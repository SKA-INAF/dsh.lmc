<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!-- ************************************************** -->
<!-- **                                                 -->
<!-- **        DISH-TM INTERFACE CONFIGURATION          -->
<!-- **                                                 -->
<!-- ************************************************** -->

<DeviceConfiguration>
		
	<!-- ************************************************** -->
	<!-- **              PROPERTIES                         -->
	<!-- ************************************************** -->
	<DeviceProperties>

		<!-- SKA options -->
		<DeviceProperty name="SkaLevel">
			<Value> {{dshmgr_ska_level}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ElementLoggerAddress">
			<Value> {{lmc_logger}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ElementAlarmsAddress">
			<Value> {{alarm_handler}} </Value>
		</DeviceProperty>
	
		<DeviceProperty name="ElementTelModelAddress">
			<Value> {{dshmgr_telmodel_address}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ElementDatabaseDSAddress">
			<Value> {{element_databased}} </Value>
		</DeviceProperty>

		<DeviceProperty name="AdminModeDefault">
			<Value> {{dshmgr_admin_mode_default}} </Value>
		</DeviceProperty>

		<!-- General options -->
		<DeviceProperty name="EnableConfigFromFile">
			<Value> {{dshmgr_enable_config_from_file}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ConfigFile">
			<Value> {{dshmgr_config_file}} </Value>
		</DeviceProperty>

		<!-- Dyn attr creation and update options -->
		<DeviceProperty name="EnableDynAttrCleanup">
			<Value> {{dshmgr_enable_dyn_attr_cleanup}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableDynAttrRandomize">
			<Value> {{dshmgr_enable_dyn_attr_randomize}} </Value>
		</DeviceProperty>

		<DeviceProperty name="DynAttrRandomizePeriod">
			<Value> {{dshmgr_dyn_attr_randomize_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableFwdAttrInitPolling">
			<Value> {{dshmgr_enable_fwd_attr_init_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="FwdAttrInitPollPeriod">
			<Value> {{dshmgr_fwd_attr_init_poll_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableStatusAttrUpdatePolling">
			<Value> {{dshmgr_enable_status_attr_update_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="StatusAttrUpdatePollPeriod">
			<Value> {{dshmgr_status_attr_update_poll_period}} </Value>
		</DeviceProperty>
		

		<!-- Logging options -->
		<DeviceProperty name="CentralLoggerEnabledDefault">
			<Value> {{dshmgr_enable_central_log_target}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggingTargetCentralDefault">
			<Value> {{dshmgr_central_log_target}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggingLevelCentralDefault">
			<Value> {{dshmgr_central_log_level}}  </Value>
		</DeviceProperty>

		<DeviceProperty name="ElementLoggerEnabledDefault">
			<Value> {{dshmgr_enable_element_log_target}} </Value>
		</DeviceProperty>
		
		<DeviceProperty name="LoggingTargetElementDefault">
			<Value> {{dshmgr_element_log_target}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggingLevelElementDefault">
			<Value> {{dshmgr_element_log_level}} </Value>
		</DeviceProperty>
		
		<DeviceProperty name="StorageLoggerEnabledDefault">
			<Value> {{dshmgr_enable_storage_log_target}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggingTargetStorageDefault">
			<Value> {{dshmgr_storage_log_target}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggingLevelStorageDefault">
			<Value> {{dshmgr_storage_log_level}} </Value>
		</DeviceProperty>

		<DeviceProperty name="SyslogFacility">
			<Value> {{dshmgr_syslog_facility}} </Value>
		</DeviceProperty>

		<DeviceProperty name="SyslogHost">
			<Value> {{dshmgr_syslog_host}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableLoggerInitPolling">
			<Value> {{dshmgr_enable_logger_init_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="LoggerInitPollPeriod">
			<Value> {{dshmgr_logger_init_poll_period}} </Value>
		</DeviceProperty>


		<!-- Proxy options -->
		<DeviceProperty name="EnableProxyMonitoring">
			<Value> {{dshmgr_enable_proxy_monitoring}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableProxyStatusAttrCreation">
			<Value> {{dshmgr_enable_proxy_status_attr_creation}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableAutoAdminProxyRegistration">
			<Value> {{dshmgr_enable_auto_admin_proxy_registration}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyMonitoringPeriod">
			<Value> {{dshmgr_proxy_monitoring_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyStatusAttrPollingPeriod">
			<Value> {{dshmgr_proxy_status_attr_polling_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyStatusAttrPeriodicEventPeriod">
			<Value> {{dshmgr_proxy_status_attr_periodic_event_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyStatusAttrArchiveEventPeriod">
			<Value> {{dshmgr_proxy_status_attr_archive_event_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyTimeout">
			<Value> {{dshmgr_proxy_timeout}} </Value>
		</DeviceProperty>

		<DeviceProperty name="EnableDevProxyInitPolling">
			<Value> {{dshmgr_enable_dev_proxy_init_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="DevProxyInitPollPeriod">
			<Value> {{dshmgr_dev_proxy_init_poll_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ProxyDevices">
				
			{% if rx_enabled_in_config | bool %}
			<Value> {{rx_controller}} </Value>
			{% endif %}

			{% if spf_enabled_in_config | bool %}
			<Value> {{spf_controller}} </Value>
			{% endif %}

			{% if ds_enabled_in_config | bool %}
			<Value> {{ds_manager}} </Value>
			{% endif %}

			{% if pdu_enabled_in_config | bool %}
			<Value> {{pdu_manager}} </Value>
			{% endif %}

			<Value> {{tm_proxy}} </Value>

		</DeviceProperty>
		
		<!-- Formula options -->
		<DeviceProperty name="EnableFormulaAttrUpdatePolling">
			<Value> {{dshmgr_enable_formula_attr_update_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="FormulaAttrUpdatePollPeriod">
			<Value> {{dshmgr_formula_attr_update_poll_period}} </Value>
		</DeviceProperty>

		<DeviceProperty name="FormulaVarMaxTimeInterval">
			<Value> {{dshmgr_formula_var_max_time_interval}} </Value>
		</DeviceProperty>

		<!-- Events and handlers options -->
		{% if ds_enabled_in_config | bool %}
		<DeviceProperty name="EventSubscriptions">
			<Value> {{ds_manager}}/powerCut </Value>
			<Value> user_event </Value>
			
			<Value> {{ds_manager}}/powerCut </Value>
			<Value> change </Value>
	
			<Value> {{ds_manager}}/powerCut </Value>
			<Value> periodic </Value>
			
			<Value> {{ds_manager}}/powerRestored </Value>
			<Value> user_event </Value>	

			<Value> {{ds_manager}}/powerRestored </Value>
			<Value> change </Value>	
	
			<Value> {{ds_manager}}/powerRestored </Value>
			<Value> periodic </Value>	

			<Value> {{ds_manager}}/indexerPosition </Value>
			<Value> change </Value>	
	
			<Value> {{ds_manager}}/indexerPosition </Value>
			<Value> periodic </Value>

			<Value> {{ds_manager}}/operatingMode </Value>
			<Value> change </Value>	
	
			<Value> {{ds_manager}}/operatingMode </Value>
			<Value> periodic </Value>			
		</DeviceProperty>
		{% endif %}
		
		
		
		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool %}
		<DeviceProperty name="EventHandlers">
			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}			
			<Value> {{ds_manager}}/powerCut </Value>
			<Value> user_event </Value>
			<Value> HandlePowerCutEvent </Value>
			<Value> 0 </Value> <!-- handler execution time delay in ms -->
			<Value> 2 </Value> <!-- handler task priority level (0=LOW, 1=MEDIUM, 2=HIGH) -->
			{% endif %}

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}			
			<Value> {{ds_manager}}/powerCut </Value>
			<Value> periodic </Value>
			<Value> HandlePowerCutEvent </Value>
			<Value> 0 </Value> <!-- handler execution time delay -->
			<Value> 2 </Value> <!-- handler task priority level-->
			{% endif %}

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}			
			<Value> {{ds_manager}}/powerCut </Value>
			<Value> change </Value>
			<Value> HandlePowerCutEvent </Value>
			<Value> 0 </Value> <!-- handler execution time delay -->
			<Value> 2 </Value> <!-- handler task priority level-->
			{% endif %}

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}						
			<Value> {{ds_manager}}/powerRestored </Value>
			<Value> user_event </Value>
			<Value> HandlePowerRestoreEvent </Value>
			<Value> 0 </Value>
			<Value> 2 </Value>
			{% endif %}

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}						
			<Value> {{ds_manager}}/powerRestored </Value>
			<Value> periodic </Value>
			<Value> HandlePowerRestoreEvent </Value>
			<Value> 0 </Value>
			<Value> 2 </Value>
			{% endif %}

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}						
			<Value> {{ds_manager}}/powerRestored </Value>
			<Value> change </Value>
			<Value> HandlePowerRestoreEvent </Value>
			<Value> 0 </Value>
			<Value> 2 </Value>
			{% endif %}

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool %}			
			<Value> {{ds_manager}}/indexerPosition </Value>
			<Value> change </Value>
			<Value> HandleBandInFocusEvent </Value>
			<Value> 0 </Value>
			<Value> 2 </Value>
			{% endif %}

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool %}	
			<Value> {{ds_manager}}/indexerPosition </Value>
			<Value> periodic </Value>
			<Value> HandleBandInFocusEvent </Value>
			<Value> 0 </Value>
			<Value> 2 </Value>
			{% endif %}


			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}			
			<Value> {{ds_manager}}/operatingMode </Value>
			<Value> change </Value>
			<Value> HandleEStopEvent </Value>
			<Value> 0 </Value>
			<Value> 2 </Value>
			{% endif %}

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}		
			<Value> {{ds_manager}}/operatingMode </Value>
			<Value> periodic </Value>
			<Value> HandleEStopEvent </Value>
			<Value> 0 </Value>
			<Value> 2 </Value>
			{% endif %}

		</DeviceProperty>
		{% endif %}
	
		<!-- Task management options -->
		<DeviceProperty name="MaxQueueableTask">
			<Value> {{dshmgr_max_queuable_tasks}} </Value>
		</DeviceProperty>
	
		<DeviceProperty name="MaxTrackableTasks">
			<Value> {{dshmgr_max_trackable_tasks}} </Value>
		</DeviceProperty>

		<DeviceProperty name="TaskHistoryTimeDepth">
			<Value> {{dshmgr_task_history_time_depth}} </Value>
		</DeviceProperty>

		<DeviceProperty name="DefaultTaskTimeout">
			<Value> {{dshmgr_default_task_timeout}} </Value>
		</DeviceProperty>

		{% if ds_enabled_in_config | bool or spf_enabled_in_config | bool or rx_enabled_in_config | bool %}
		<DeviceProperty name="TaskStatusAttrList">
			{% if ds_enabled_in_config | bool %}
			<Value> dsStowProgress </Value>
			<Value> dsSetStandbyLPModeProgress </Value>
			<Value> dsSetStandbyFPModeProgress </Value>
			<Value> dsSetPointModeProgress </Value>
			<Value> dsIndexingProgress </Value>
			{% endif %}

			{% if spf_enabled_in_config | bool %}
			<Value> spfSetOperateModeProgress </Value>
			<Value> spfSetStandbyLPModeProgress </Value>
			<Value> spfSetMaintenanceModeProgress </Value>
			{% endif %}

			{% if rx_enabled_in_config | bool %}
			<Value> rxConfigureBandProgress </Value>	
			{% endif %}
		</DeviceProperty>
		{% endif %}

		
		{% if ds_enabled_in_config | bool or spf_enabled_in_config | bool %}
		<DeviceProperty name="TaskSequenceStatusAttrList">
			
			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
			<Value> setStandbyLPModeProgress </Value>
			<Value> setStandbyFPModeProgress </Value>
			<Value> setOperateModeProgress </Value>
			<Value> setMaintenanceModeProgress </Value>			
			<Value> configureBandProgress </Value>
			<Value> shutdownOnPowerCutProgress </Value>
			<Value> startupOnPowerRestoreProgress </Value>		
			<Value> setStandbyFPOnESTOPProgress </Value>
			<Value> setStandbyFPOnBandErrorProgress </Value>
			{% endif %}

			{% if ds_enabled_in_config | bool %}
			<Value> setStowModeProgress </Value>
			{% endif %}

			{% if spf_enabled_in_config | bool %}
			<Value> spfGoOperationalProgress </Value>
			{% endif %}
		</DeviceProperty>
		{% endif %}

		
  
		<DeviceProperty name="EnableClearTaskPolling">
			<Value> {{dshmgr_enable_clear_task_polling}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ClearTaskPollPeriod">
			<Value> {{dshmgr_clear_task_poll_period}} </Value>
		</DeviceProperty>
	
		<DeviceProperty name="ProcessEventsInQueueThread">
			<Value> {{process_events_in_queue_thread}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ControlModeDefault">
			<Value> {{dshmgr_control_mode_default}} </Value>
		</DeviceProperty>

		<DeviceProperty name="RequestedBandDefault">
			<Value> {{dshmgr_requested_band_default}} </Value>
		</DeviceProperty>

		<!-- ================================= -->
		<!-- ==     SPECIFIC PROPERTIES        -->
		<!-- ================================= -->
		
		<DeviceProperty name="RxControllerAddress">
			<Value> {{rx_controller}} </Value>
		</DeviceProperty>

		<DeviceProperty name="SpfControllerAddress">
			<Value> {{spf_controller}}  </Value>
		</DeviceProperty>

		<DeviceProperty name="DsManagerAddress">
			<Value> {{ds_manager}} </Value>
		</DeviceProperty>

		<DeviceProperty name="TmProxyAddressDefault">
			<Value> {{tm_proxy}} </Value>
		</DeviceProperty>

		<DeviceProperty name="PduManagerAddress">
			<Value> {{pdu_manager}} </Value>
		</DeviceProperty>

		
		<DeviceProperty name="AsynchCmdReplyTimeout">
			<Value> {{dshmgr_asynch_cmd_reply_timeout}} </Value>
		</DeviceProperty>

		<DeviceProperty name="AsynchCmdReplyNRetries">
			<Value> {{dshmgr_asynch_cmd_reply_nretries}} </Value>
		</DeviceProperty>

		<!--
		<DeviceProperty name="ConfigureMonitoringPollPeriod">
			<Value> 5000 </Value>
		</DeviceProperty>
		
		<DeviceProperty name="ConfigureMonitoringTimeout">
			<Value> 30000 </Value>
		</DeviceProperty>
		-->

		<DeviceProperty name="SynchCmdReplyTimeout">
			<Value> {{dshmgr_synch_cmd_reply_timeout}} </Value>
		</DeviceProperty>

		<DeviceProperty name="StowTaskTimeout">
			<Value> {{dshmgr_stow_task_timeout}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ConfigureTaskTimeout">
			<Value> {{dshmgr_configure_task_timeout}} </Value>
		</DeviceProperty>

		<DeviceProperty name="OperateTaskTimeout">
			<Value> {{dshmgr_operate_task_timeout}} </Value>
		</DeviceProperty>

		<DeviceProperty name="ShutdownTaskTimeout">
			<Value> {{dshmgr_shutdown_task_timeout}} </Value>
		</DeviceProperty>

		<DeviceProperty name="RxShutdownTimeDelay">
			<Value> {{dshmgr_rx_shutdown_time_delay}} </Value>
		</DeviceProperty>

	</DeviceProperties>


	<!-- ************************************************** -->
	<!-- **              ATTRIBUTES                         -->
	<!-- ************************************************** -->
	<Attributes>

		<!-- ************************************************** -->
		<!-- **      PROXY MONITORING ATTRS                     -->
		<!-- ************************************************** -->
		<Attribute name = "seRunStatus" alias="seRunStatus">
			<Description> Sub-Element run status (0=UNKNOWN, 1=ONLINE, 2=SOFT-OFFLINE, 3=HARD-OFFLINE </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> ONLINE </Value>
				<Value> SOFT-OFFLINE </Value>
				<Value> HARD-OFFLINE </Value>
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
			<Formula>
				<Expression> 
					/* == Handle UNKNOWN case == */
					if( rx_0=='UNKNOWN' or spf_0=='UNKNOWN' or ds_0=='UNKNOWN' )
					{
						res:= 'UNKNOWN';
						return [0];
					};

					/* == Handle ONLINE case == */
					if( rx_0=='ONLINE' and spf_0=='ONLINE' and ds_0=='ONLINE' )
					{
						res:= 'ONLINE';
						return [0];
					};	

					/* == Handle HARD-OFFLINE case == */
					if( rx_0=='HARD_OFFLINE' and (spf_0=='ONLINE' or spf_0=='SOFT_OFFLINE' or spf_0=='HARD_OFFLINE') and (ds_0=='ONLINE' or ds_0=='SOFT_OFFLINE' or ds_0=='HARD_OFFLINE') )
					{
						res:= 'HARD-OFFLINE';
						return [0];
					};
					if( spf_0=='HARD_OFFLINE' and (rx_0=='ONLINE' or rx_0=='SOFT_OFFLINE' or rx_0=='HARD_OFFLINE') and (ds_0=='ONLINE' or ds_0=='SOFT_OFFLINE' or ds_0=='HARD_OFFLINE') )
					{
						res:= 'HARD-OFFLINE';
						return [0];
					};
					if( ds_0=='HARD_OFFLINE' and (rx_0=='ONLINE' or rx_0=='SOFT_OFFLINE' or rx_0=='HARD_OFFLINE') and (spf_0=='ONLINE' or spf_0=='SOFT_OFFLINE' or spf_0=='HARD_OFFLINE') )
					{
						res:= 'HARD-OFFLINE';
						return [0];
					};

					/* == Handle SOFT-OFFLINE case == */
					if( rx_0=='SOFT_OFFLINE' and (spf_0=='ONLINE' or spf_0=='SOFT_OFFLINE') and (ds_0=='ONLINE' or ds_0=='SOFT_OFFLINE') )
					{
						res:= 'SOFT-OFFLINE';
						return [0];
					};
					if( spf_0=='SOFT_OFFLINE' and (rx_0=='ONLINE' or rx_0=='SOFT_OFFLINE') and (ds_0=='ONLINE' or ds_0=='SOFT_OFFLINE') )
					{
						res:= 'SOFT-OFFLINE';
						return [0];
					};
					if( ds_0=='SOFT_OFFLINE' and (rx_0=='ONLINE' or rx_0=='SOFT_OFFLINE') and (spf_0=='ONLINE' or spf_0=='SOFT_OFFLINE') )
					{
						res:= 'SOFT-OFFLINE';
						return [0];
					};

					res:= 'UNKNOWN';
					return [-1];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						{% set name_list = rx_controller.split('/') %}
						<Value> proxyRunStatus_{{ name_list[3] }}_{{ name_list[4] }}_{{ name_list[5] }} </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						{% set name_list = spf_controller.split('/') %}
						<Value> proxyRunStatus_{{ name_list[3] }}_{{ name_list[4] }}_{{ name_list[5] }} </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
					<FormulaVar>
						<Label> ds </Label>	
						{% set name_list = ds_manager.split('/') %}
						<Value> proxyRunStatus_{{ name_list[3] }}_{{ name_list[4] }}_{{ name_list[5] }} </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}

		</Attribute>
		

		<Attribute name = "tmProxyAddress" alias="tmProxyAddress">
			<Description> Set device proxy address of TM device to be monitored </Description>
			<DataType> STRING </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<Memorized> </Memorized>
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		

		<Attribute name = "enableTMProxyMoniHandler" alias="enableTMProxyMoniHandler">	
			<Description> Enable/disable handling of TM proxy monitoring handler </Description>
			<DataType> BOOL </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<Polling> 
				<Period> {{dshmgr_very_slow_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_very_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> 0 </InitValue>
			</Value>
		</Attribute>


		<Attribute name = "enableESTOPEventHandler" alias="enableESTOPEventHandler">	
			<Description> Enable/disable handling of ESTOP event </Description>
			<DataType> BOOL </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<Polling> 
				<Period> {{dshmgr_very_slow_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_very_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> true </InitValue>
			</Value>
		</Attribute>

		<Attribute name = "enablePowerCutEventHandler" alias="enablePowerCutEventHandler">	
			<Description> Enable/disable handling of power cut event </Description>
			<DataType> BOOL </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<Polling> 
				<Period> {{dshmgr_very_slow_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_very_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> true </InitValue>
			</Value>
		</Attribute>

		<Attribute name = "enablePowerRestoreEventHandler" alias="enablePowerRestoreEventHandler">	
			<Description> Enable/disable handling of power restore event </Description>
			<DataType> BOOL </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<Polling> 
				<Period> {{dshmgr_very_slow_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_very_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> true </InitValue>
			</Value>
		</Attribute>

		<Attribute name = "enableBandErrorEventHandler" alias="enableBandErrorEventHandler">	
			<Description> Enable/disable handling of band error event </Description>
			<DataType> BOOL </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<Polling> 
				<Period> {{dshmgr_very_slow_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_very_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> true </InitValue>
			</Value>
		</Attribute>

		<!-- ************************************************** -->
		<!-- **      Modes and States Attributes                -->
		<!-- ************************************************** -->

		<Attribute name = "dishMode" alias="dishMode">
			<Description> Dish rolled-up operating mode in Dish Control Model (SCM) notation </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> <!-- Not present in ICD -->
				<Value> OFF </Value>
				<Value> STARTUP </Value>
				<Value> SHUTDOWN </Value>
				<Value> STANDBY-LP </Value>
				<Value> STANDBY-FP </Value>
				<Value> STOW </Value>
				<Value> CONFIG </Value>
				<Value> OPERATE </Value>
				<Value> MAINTENANCE </Value>
				<Value> FORBIDDEN </Value> <!-- Not present in ICD -->
				<Value> ERROR </Value>   <!-- Not present in ICD -->			
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
			<Formula>
				<Expression> 
					/* == Handle SHUTDOWN case == */
					if( ds_power=='UPS' and ds=='STANDBY-LP' )
					{
						res:= 'SHUTDOWN';
						return [0];
					};

					/* == Handle ERROR cases (CHECK!!!) == */
					if(rx=='ERROR' and (spf=='STARTUP' or spf=='STANDBY-LP' or spf=='ERROR' or spf=='OPERATE') and (ds=='STARTUP' or ds=='STANDBY-LP' or ds=='STANDBY-FP' or ds=='STOW' or ds=='ESTOP' or ds=='ERROR' or ds=='POINT') )
					{
						res:= 'ERROR';
						return [0];
					}
					
					if(spf=='ERROR' and (rx=='STARTUP' or rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='CONFIGURE' or rx=='DATA-CAPTURE' or rx=='ERROR') and (ds=='STARTUP' or ds=='STANDBY-LP' or ds=='STANDBY-FP' or ds=='STOW' or ds=='ESTOP' or ds=='ERROR' or ds=='POINT') )
					{
						res:= 'ERROR';
						return [0];
					}
					if(ds=='ERROR' and (rx=='STARTUP' or rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='CONFIGURE' or rx=='DATA-CAPTURE' or rx=='ERROR') and (spf=='STARTUP' or spf=='STANDBY-LP' or spf=='ERROR' or spf=='OPERATE') )
					{
						res:= 'ERROR';
						return [0];
					}

					/* == Handle UNKNOWN case == */
					if(rx=='UNKNOWN' or spf=='UNKNOWN' or ds=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						if(ds=='ESTOP') res:= 'MAINTENANCE';
						else res:= 'UNKNOWN';
						return [0];
					};

					/* == Handle STARTUP case == */
					if(rx=='STARTUP' and spf=='STARTUP' and ds=='STARTUP')	
					{
						res:= 'STARTUP';
						return [0];
					};

					/* == Handle STANDBY-LP case == */
					if(rx=='STANDBY-LP' and spf=='STANDBY-LP' and ds=='STANDBY-LP')	
					{
						res:= 'STANDBY-LP';
						return [0];
					};
					if(rx=='STANDBY-LP' and spf=='STANDBY-LP' and ds=='ESTOP')	
					{
						res:= 'STANDBY-LP';
						return [0];
					};

					/* == Handle STANDBY-FP case == */
					if( (rx=='DATA-CAPTURE' or rx=='STANDBY-FP') and spf=='OPERATE' and ds=='STANDBY-FP')
					{
						res:= 'STANDBY-FP';
						return [0];
					};
					if( rx=='STANDBY-FP' and spf=='OPERATE' and ds=='ESTOP')
					{
						res:= 'STANDBY-FP';
						return [0];
					};

					/* == Handle STOW case == */
					if(ds=='STOW' and (rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (spf=='STANDBY-LP' or spf=='OPERATE') )	
					{
						res:= 'STOW';
						return [0];
					};

					/* == Handle MAINTENANCE case == */
					if(rx=='MAINTENANCE' and spf=='MAINTENANCE' and (ds=='MAINTENANCE' or ds=='ESTOP') )	
					{
						res:= 'MAINTENANCE';
						return [0];
					};

					/* == Handle CONFIG case == */
					if(rx=='CONFIGURE' and spf=='OPERATE' and (ds=='STANDBY-LP' or ds=='STANDBY-FP' or ds=='STOW' or ds=='POINT') )	
					{
						res:= 'CONFIG';
						return [0];
					};

					/* == Handle OPERATE case == */
					if(rx=='DATA-CAPTURE' and spf=='OPERATE' and ds=='POINT' )	
					{
						res:= 'OPERATE';
						return [0];
					};
					if(rx=='DATA-CAPTURE' and spf=='OPERATE' and ds=='ESTOP' )	
					{
						res:= 'OPERATE';
						return [0];
					};

					/* == Handle ESTOP in STARTUP case == */
					if( (rx=='STARTUP' or spf=='STARTUP') and ds=='ESTOP')	
					{
						res:= 'ERROR';
						return [0];
					};
					/* == Handle SPF ERROR in STARTUP case (CHECK!!!!) == */
					if( rx=='STARTUP' and spf=='ERROR' and ds=='STARTUP')	
					{
						res:= 'ERROR';
						return [0];
					};

					/* == Handle transient STARTUP case == */
					if( rx=='STARTUP' and (spf=='STARTUP' or spf=='STANDBY-LP') and (ds=='STARTUP' or (ds=='STANDBY-LP' and ds_power='LOW-POWER') ) )	
					{
						res:= 'STARTUP';
						return [0];
					};
					if( spf=='STARTUP' and (rx=='STARTUP' or rx=='STANDBY-LP') and (ds=='STARTUP' or (ds=='STANDBY-LP' and ds_power='LOW-POWER') ) )	
					{
						res:= 'STARTUP';
						return [0];
					};
					if( ds=='STARTUP' and (rx=='STARTUP' or rx=='STANDBY-LP') and (spf=='STARTUP' or spf=='STANDBY-LP') )	
					{
						res:= 'STARTUP';
						return [0];
					};

					/* == Handle transient STANDBY-FP-STANDBY-LP case == */
					if( dish=='STANDBY-FP' and (rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (spf=='STANDBY-LP' or spf=='OPERATE') and (ds=='STANDBY-LP' or ds=='STANDBY-FP') )	
					{
						res:= 'STANDBY-FP';
						return [0];
					};

					if( dish=='STANDBY-FP' and spf=='OPERATE' and (rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (ds=='STANDBY-LP' or ds=='STANDBY-FP') )	
					{
						res:= 'STANDBY-FP';
						return [0];
					};
					if( dish=='STANDBY-FP' and ds=='STANDBY-FP' and (spf=='STANDBY-LP' or spf=='OPERATE') and (rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE')  )	
					{
						res:= 'STANDBY-FP';
						return [0];
					};

					/* == Handle transient STANDBY-LP-STANDBY-FP case == */
					if( dish=='STANDBY-LP' and rx=='STANDBY-LP' and (spf=='STANDBY-LP' or spf=='OPERATE') and (ds=='STANDBY-LP' or ds=='STANDBY-FP') )	
					{
						res:= 'STANDBY-LP';
						return [0];
					};
					if( dish=='STANDBY-LP' and spf=='STANDBY-LP' and (rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (ds=='STANDBY-LP' or ds=='STANDBY-FP') )	
					{
						res:= 'STANDBY-LP';
						return [0];
					};
					if( dish=='STANDBY-LP' and ds=='STANDBY-LP' and (spf=='STANDBY-LP' or spf=='OPERATE') and (rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE')  )	
					{
						res:= 'STANDBY-LP';
						return [0];
					};
		

					/* == Handle transient MAINTENANCE-STANDBY-LP case == */		
					if( dish=='MAINTENANCE' and rx=='MAINTENANCE' and (spf=='MAINTENANCE' or spf=='STANDBY-LP') and (ds=='MAINTENANCE' or ds=='STANDBY-LP') )	
					{
						res:= 'MAINTENANCE';
						return [0];
					};
					if( dish=='MAINTENANCE' and spf=='MAINTENANCE' and (rx=='MAINTENANCE' or rx=='STANDBY-LP') and (ds=='MAINTENANCE' or ds=='STANDBY-LP') )	
					{
						res:= 'MAINTENANCE';
						return [0];
					};
					if( dish=='MAINTENANCE' and ds=='MAINTENANCE' and (rx=='MAINTENANCE' or rx=='STANDBY-LP') and (spf=='MAINTENANCE' or spf=='STANDBY-LP') )	
					{
						res:= 'MAINTENANCE';
						return [0];
					};	

					/* == Handle transient STANDBY-LP-MAINTENANCE case == */		
					if( dish=='STANDBY-LP' and rx=='STANDBY-LP' and (spf=='MAINTENANCE' or spf=='STANDBY-LP') and (ds=='MAINTENANCE' or ds=='STANDBY-LP') )	
					{
						res:= 'STANDBY-LP';
						return [0];
					};
					if( dish=='STANDBY-LP' and spf=='STANDBY-LP' and (rx=='MAINTENANCE' or rx=='STANDBY-LP') and (ds=='MAINTENANCE' or ds=='STANDBY-LP') )	
					{
						res:= 'STANDBY-LP';
						return [0];
					};
					if( dish=='STANDBY-LP' and ds=='STANDBY-LP' and (rx=='MAINTENANCE' or rx=='STANDBY-LP') and (spf=='MAINTENANCE' or spf=='STANDBY-LP') )	
					{
						res:= 'STANDBY-LP';
						return [0];
					};

					/* == Handle transient OPERATE-STANDBY-FP case == */
					if( dish=='OPERATE' and rx=='STANDBY-FP' and spf=='OPERATE' and ds=='POINT' )	
					{
						res:= 'OPERATE';
						return [0];
					};

					/* == Handle transient OPERATE-STANDBY-LP case == */
					if( dish=='OPERATE' and spf=='OPERATE' and (rx=='STANDBY-FP' or rx=='STANDBY-LP' or rx=='DATA-CAPTURE') and ds=='POINT' )	
					{
						res:= 'OPERATE';
						return [0];
					};
					if( dish=='OPERATE' and spf=='OPERATE' and (rx=='STANDBY-FP' or rx=='STANDBY-LP' or rx=='DATA-CAPTURE') and (ds=='STANDBY-FP' or ds=='STANDBY-LP') )	
					{
						res:= 'STANDBY-FP';
						return [0];
					};
					

					/* == Handle transient STOW-STANDBY-FP case == */
					if( dish=='STOW' and rx=='STANDBY-LP' and (spf=='STANDBY-LP' or spf=='OPERATE') and (ds=='STOW' or ds=='STANDBY-FP') )	
					{
						res:= 'STOW';
						return [0];
					};
					if( dish=='STOW' and spf=='STANDBY-LP' and (rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (ds=='STOW' or ds=='STANDBY-FP') )	
					{
						res:= 'STOW';
						return [0];
					};
					if( dish=='STOW' and ds=='STOW' and (rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (spf=='STANDBY-LP' or spf=='OPERATE') )	
					{
						res:= 'STOW';
						return [0];
					};

					/* == Handle transient STANDBY-FP-STOW case == */
					if( dish=='STANDBY-FP' and (rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (spf=='STANDBY-LP' or spf=='OPERATE') and (ds=='STOW' or ds=='STANDBY-FP') )	
					{
						res:= 'STANDBY-FP';
						return [0];
					};
					if( dish=='STANDBY-FP' and spf=='OPERATE' and (rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (ds=='STOW' or ds=='STANDBY-FP') )	
					{
						res:= 'STANDBY-FP';
						return [0];
					};
					if( dish=='STANDBY-FP' and ds=='STANDBY-FP' and (spf=='STANDBY-LP' or spf=='OPERATE') and (rx=='STANDBY-LP' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') )	
					{
						res:= 'STANDBY-FP';
						return [0];
					};

					/* == Handle transient MAINTENANCE-STANDBY-FP case == */		
					if( dish=='MAINTENANCE' and rx=='MAINTENANCE' and (spf=='MAINTENANCE' or spf=='OPERATE') and (ds=='MAINTENANCE' or ds=='STANDBY-FP') )	
					{
						res:= 'MAINTENANCE';
						return [0];
					};	
					if( dish=='MAINTENANCE' and spf=='MAINTENANCE' and (rx=='MAINTENANCE' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (ds=='MAINTENANCE' or ds=='STANDBY-FP') )	
					{
						res:= 'MAINTENANCE';
						return [0];
					};
					if( dish=='MAINTENANCE' and ds=='MAINTENANCE' and (rx=='MAINTENANCE' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (spf=='MAINTENANCE' or spf=='OPERATE') )	
					{
						res:= 'MAINTENANCE';
						return [0];
					};
	
					/* == Handle transient STANDBY-FP-MAINTENANCE case == */		
					if( dish=='STANDBY-FP' and (rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (spf=='MAINTENANCE' or spf=='OPERATE') and (ds=='MAINTENANCE' or ds=='STANDBY-FP') )	
					{
						res:= 'STANDBY-FP';
						return [0];
					};
					if( dish=='STANDBY-FP' and spf=='OPERATE' and (rx=='MAINTENANCE' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (ds=='MAINTENANCE' or ds=='STANDBY-FP') )	
					{
						res:= 'STANDBY-FP';
						return [0];
					};
					if( dish=='STANDBY-FP' and ds=='STANDBY-FP' and (rx=='MAINTENANCE' or rx=='STANDBY-FP' or rx=='DATA-CAPTURE') and (spf=='MAINTENANCE' or spf=='OPERATE') )	
					{
						res:= 'STANDBY-FP';
						return [0];
					};
					

					/* == Handle transient MAINTENANCE-STOW case == */		
					if( dish=='MAINTENANCE' and rx=='MAINTENANCE' and (spf=='MAINTENANCE' or spf=='STANDBY-LP') and (ds=='MAINTENANCE' or ds=='STOW') )	
					{
						res:= 'MAINTENANCE';
						return [0];
					};	
					if( dish=='MAINTENANCE' and spf=='MAINTENANCE' and (rx=='MAINTENANCE' or rx=='STANDBY-LP') and (ds=='MAINTENANCE' or ds=='STOW') )	
					{
						res:= 'MAINTENANCE';
						return [0];
					};
					if( dish=='MAINTENANCE' and ds=='MAINTENANCE' and (rx=='MAINTENANCE' or rx=='STANDBY-LP') and (spf=='MAINTENANCE' or spf=='STANDBY-LP') )	
					{
						res:= 'MAINTENANCE';
						return [0];
					};


					/* == If no case if found return FORBIDDEN! == */
					res:= 'FORBIDDEN';
					return [-1];
				</Expression>
				
				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,STANDBY-FP,DATA-CAPTURE,CONFIGURE,MAINTENANCE} + {UNKNOWN,ERROR}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,OPERATE,MAINTENANCE,ERROR} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY,STOW,ESTOP,MAINTENANCE,POINT} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> ds_power </Label>	
						<Value> {{ds_manager}}/powerState </Value>
						<InitDataValue> UNKNOWN </InitDataValue>  <!-- {UPS,FULL-POWER,LOW-POWER} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> dish </Label>	
						<Value> dishMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>

				<PostActions>
					<Action> SetStandbyFPModeOnBandError </Action>
				</PostActions>
			</Formula>
			{% endif %}
		</Attribute>
		
  
			
		<!--
		{% if lmc_config_mode == 'full' %}
		<Attribute name = "operationalState" alias="operationalState">
			<Description> Operational state </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> OFF </Value>
				<Value> DISABLE </Value>
				<Value> INIT </Value>
				<Value> STANDBY </Value>
				<Value> LOW-POWER </Value>
				<Value> ON </Value>
				<Value> ALARM </Value>
				<Value> FAULT </Value>
			</PossibleValues>
			<Polling> 
				<Period> 10000 </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> 1000 </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> 1000 </Period>
				</ArchiveEvent>
			</Events>		
			<Value>
				<InitValue> UNKNOWN </InitValue>
			</Value>
		</Attribute>
		{% endif %}
		-->


		
		<Attribute name = "dishState" alias="dishState">
			<Description> Current dish state in SKA Control Mode (SCM) notation </Description>
			<DataType> STATE </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue> <!-- {OFF/FAULT/INIT/STANDBY/ON/ALARM/UNKNOWN} -->
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<!-- dishMode= {OFF/STARTUP/SHUTDOWN/STANDBY-LP/STANDBY-FP/STOW/CONFIG/OPERATE/MAINTENANCE} + {FORBIDDEN+ERROR+UNKNOWN} -->
			<Formula>
				<Expression> 
					if( x=='UNKNOWN' )
					{
						res:= UNKNOWN;
						return [0];
					};
					if( x=='OFF' )
					{
						res:= OFF;
						return [0];
					};
					if( x=='STARTUP' or x=='CONFIG' )
					{
						res:= INIT;
						return [0];
					};
					if( x=='STANDBY-LP')
					{
						res:= STANDBY;
						return [0];
					};
					if( x=='STOW' or x=='MAINTENANCE' )
					{
						res:= DISABLE;
						return [0];
					};
					if( x=='STANDBY-FP' or x=='OPERATE' )
					{
						res:= ON;
						return [0];
					};
					if( x=='SHUTDOWN' or x=='ERROR' )
					{
						res:= FAULT;
						return [0];
					};
					if( x=='FORBIDDEN' )
					{
						res:= ALARM;
						return [0];
					};
					res:= UNKNOWN;
					return [-1];
				</Expression>
				
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> dishMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>

		</Attribute>
		
  
 
		
		
		<!-- Mappatura Francesco -->
		<!--
		<Attribute name = "dish_State" alias="dish_State">
			<Description> Dish rolled-up operating mode in Dish Control Model (SCM) notation </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value> 
				<Value> OFF </Value>
				<Value> INIT </Value>
				<Value> FAULT </Value>
				<Value> STANDBY </Value>
				<Value> ON </Value>
				<Value> FORBIDDEN </Value>
				<Value> ALARM </Value> 	
				<Value> DISABLED </Value> 	
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_fast_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_fast_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
			<Formula>
				<Expression> 
					/* DS=STARTUP CASE */       
          if( ds=='STARTUP')   
          {
            if( (rx=='OFF' or rx=='STARTUP' or rx=='STANDBY-LP') and (spf=='OFF' or spf=='STARTUP' or spf=='STANDBY-LP') )  
            {
              res:= 'INIT'; 
              return [0]; 
            };
            if( (rx=='STANDBY-FP' or rx=='CONFIGURE' or rx=='DATA-CAPTURE') and spf=='OPERATE' ) 
					  {
						  res:= 'FORBIDDEN'; 
              return [-1];
            };
            if(spf=='ERROR')  
            {
              res:= 'FAULT'; 
              return [0];
            };
            if(rx=='UNKNOWN' or spf=='UNKNOWN')
            {
              res:= 'UNKNOWN'; 
              return [0];
            };                      
          };  /*end of DS='STARTUP' case*/ 

					/* DS=STANDBY CASE */       
          if( ds=='STANDBY-LP')   
          {
            if( (rx=='OFF' or rx=='STARTUP' or rx=='STANDBY-LP') and (spf=='OFF' or spf=='STARTUP' or spf=='STANDBY-LP') )
            {                                     
            	if (rx=='STANDBY-LP' and spf=='STANDBY-LP')      
              {
                res:= 'STANDBY'; 
                return [0]; 
              }; 
              else                                                
              {
                res:='INIT';                                         
						    return [0]; 
              };
            };
            if( (rx=='STANDBY-FP' and (spf=='OPERATE' or spf='STANDBY-LP') )
					  {
							res:= 'ON';                                             
						  return [0];
            };
            if (rx=='STANDBY-LP' and spf=='OPERATE') 
					  {
						  res:= 'ON';                                           
						  return [0];
            };
            if( (rx=='STANDBY-LP' or rx=='STANDBY-FP') and spf=='OPERATE') 
					  {
						  res:= 'ON';                                          
						  return [0];
            };
            if (rx=='CONFIGURE' and (spf=='OPERATE' or spf=='STANDBY-LP'))
					  {
							res:= 'ON';                                              
						  return [0];
            };
            if (spf=='ERROR')  
            {
            	res:= 'FAULT';                                  
							return [0];
            };
            if (rx=='UNKNOWN' or spf=='UNKNOWN)
            {
            	res:= 'UNKNOWN';                                 
							return [0];
            };                         
          };  /*end of DS='STANDBY-LP' case*/   
	
					/* == If no case if found return FORBIDDEN! == */
					res:= 'FORBIDDEN';
					return [-1];
				</Expression>
				
				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> --> <!-- {OFF,STARTUP,STANDBY-LP,STANDBY-FP,DATA-CAPTURE,CONFIGURE,MAINTENANCE} + {UNKNOWN,ERROR}-->
						<!--
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> --> <!-- {OFF,STARTUP,STANDBY-LP,OPERATE,MAINTENANCE,ERROR} + {UNKNOWN}-->
						<!-- <ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> --> <!-- {OFF,STARTUP,STANDBY,STOW,ESTOP,MAINTENANCE,POINT} + {UNKNOWN} -->
						<!-- <ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> ds_power </Label>	
						<Value> {{ds_manager}}/powerState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> -->  <!-- {UPS,FULL-POWER,LOW-POWER} + {UNKNOWN} -->
						<!-- <ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>	
			{% endif %}
		</Attribute>
		-->



		
		<Attribute name = "powerState" alias="powerState">
			<Description> Current dish power state </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> OFF </Value>
				<Value> UPS </Value>
				<Value> LOW </Value>
				<Value> FULL </Value>
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
			<Formula>
				<Expression> 
					/* == Handle DS OFF case == */
					if( ds_power=='OFF' )
					{
						res:= 'OFF';
						return [0];
					};

					/* == Handle UNKNOWN case == */
					if(rx_power=='UNKNOWN' or spf_power=='UNKNOWN' or ds_power=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						if(ds_power=='UPS') res:= 'UPS';
						else res:= 'UNKNOWN';
						return [0];
					};

					/* == Handle DS USP case == */
					if( ds_power=='UPS' )
					{
						res:= 'UPS';
						return [0];
					};
					/* == Handle all LOW-POWER case == */
					if( ds_power=='LOW-POWER' and spf_power=='LOW-POWER' and rx_power=='LOW-POWER' )
					{
						res:= 'LOW';
						return [0];
					};
					/* == Handle all FULL-POWER case == */
					if( ds_power=='FULL-POWER' or spf_power=='FULL-POWER' or rx_power=='FULL-POWER' )
					{
						res:= 'FULL';
						return [0];
					};	
					res:= 'UNKNOWN';
					return [-1];
				</Expression>
				
				<FormulaVars>
					<FormulaVar>
						<Label> spf_power </Label>	
						<Value> {{spf_controller}}/powerState </Value>
						<InitDataValue> UNKNOWN </InitDataValue>  <!-- {FULL-POWER,LOW-POWER} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> rx_power </Label>	
						<Value> {{rx_controller}}/powerState </Value>
						<InitDataValue> UNKNOWN </InitDataValue>  <!-- {FULL-POWER,LOW-POWER} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> ds_power </Label>	
						<Value> {{ds_manager}}/powerState </Value>
						<InitDataValue> UNKNOWN </InitDataValue>  <!-- {OFF,UPS,FULL-POWER,LOW-POWER} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}
		</Attribute>
		
		
	
		<Attribute name = "observingState" alias="observingState">
			<Description> Current dish pointing state </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>	
			<PossibleValues>	
				<Value> UNKNOWN </Value> 
				<Value> IDLE </Value>
				<Value> CONFIGURING </Value>
				<Value> READY </Value>
				<Value> SCANNING </Value>
				<Value> PAUSE </Value>
				<Value> ABORTED </Value>
				<Value> FAULT </Value> 
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
			<Formula>
				<Expression> 
					/* == Handle FAULT case == */
					if( dsMode=='ESTOP' )
					{
						res:= 'FAULT';
						return [0];
					};

					/* == Handle UNKNOWN case == */
					if(dishMode=='UNKNOWN' or pointingState=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						res:= 'UNKNOWN';
						return [0];
					};

					/* == Handle CONFIGURING case == */
					if( dishMode=='CONFIG' )
					{
						res:= 'CONFIGURING';
						return [0];
					};

					/* == Handle IDLE case == */
					if( pointingState=='NONE' )
					{
						res:= 'IDLE';
						return [0];
					};

					/* == Handle READY case == */
					if( pointingState=='READY' )
					{
						res:= 'READY';
						return [0];
					};

					/* == Handle SCANNING case == */
					if( pointingState=='SLEW' or pointingState=='TRACK' or pointingState=='SCAN' )
					{
						res:= 'SCANNING';
						return [0];
					};

					res:= 'UNKNOWN';
					return [-1];
				</Expression>
				
				<FormulaVars>
					<FormulaVar>
						<Label> pointingState </Label>	
						<Value> {{ds_manager}}/pointingState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> dsMode </Label>	
						<Value> {{ds_manager}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> dishMode </Label>	
						<Value> dishMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}
		</Attribute>
	  


   
		<Attribute name = "controlMode" alias="controlMode">
			<Description> Current dish control mode </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ_WRITE </RWType>
			<Memorized> </Memorized>		
			<PossibleValues>
				<!-- <Value> UNRESTRICTED </Value> --> 
				<Value> REMOTE </Value>
				<Value> LOCAL </Value>
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_medium_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> REMOTE </InitValue>
			</Value>
		</Attribute>
		


		
		<Attribute name = "elementType" alias="elementType">
			<Description> Element type </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> REAL </Value>
				<Value> EMULATED </Value>
				<Value> HYBRID </Value>
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_medium_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_very_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>		
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
			<Formula>
				<Expression> 
					/* == Handle UNKNOWN case == */
					if(ds=='UNKNOWN' or spf=='UNKNOWN' or rx=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						res:= 'UNKNOWN';
						return [0];
					};
					/* == Handle all emulated case == */
					if( ds=='EMULATED' and spf=='EMULATED' and rx=='EMULATED' )
					{
						res:= 'EMULATED';
						return [0];
					};
					/* == Handle all real case == */
					if( ds=='REAL' and spf=='REAL' and rx=='REAL' )
					{
						res:= 'REAL';
						return [0];
					};
					/* == Handle mixed emulated/real case == */
					if( (ds=='EMULATED' or spf=='EMULATED' or rx=='EMULATED') and (ds=='REAL' or spf=='REAL' or rx=='REAL') )
					{
						res:= 'HYBRID';
						return [0];
					};	
					res:= 'UNKNOWN';
					return [-1];
				</Expression>
				
				<FormulaVars>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/interfaceType </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/interfaceType </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/interfaceType </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}
		</Attribute>
		
	


		<Attribute name = "adminMode" alias="adminMode">
			<Description> Admin mode </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ_WRITE </RWType>
			<Memorized> </Memorized>		
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> ONLINE </Value>
				<Value> OFFLINE </Value>
				<Value> MAINTENANCE </Value>
				<Value> NOT-FITTED </Value>
				<Value> RESERVED </Value>
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_medium_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>		
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
	
			
			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
			<Formula>
				<Expression> 
					/* == Handle UNKNOWN case == */
					if(dishMode=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						res:= 'UNKNOWN';
						return [0];
					};

					/* == Handle ONLINE case == */
					if( dishMode=='STOW' or dishMode=='STANDBY-LP' or dishMode=='STANDBY-FP' or dishMode=='OPERATE' or dishMode=='CONFIG' )
					{
						if(rxEngMode==1 or ds=='MAINTENANCE' or spf=='MAINTENANCE' or rx=='MAINTENANCE') res:= 'MAINTENANCE';
						else res:= 'ONLINE';	
						return [0];
					};

					/* == Handle OFFLINE case == */
					if( dishMode=='OFF' or dishMode=='STARTUP' or dishMode=='SHUTDOWN' )
					{
						res:= 'OFFLINE';	
						return [0];
					};

					/* == Handle MAINTENANCE case == */
					if( ds=='MAINTENANCE' or spf=='MAINTENANCE' or rx=='MAINTENANCE' or dishMode=='MAINTENANCE' or rxEngMode==1 )
					{
						res:= 'MAINTENANCE';
						return [0];
					};
					
					res:= 'UNKNOWN';
					return [-1];
				</Expression>
				
				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,STANDBY-FP,DATA-CAPTURE,CONFIGURE,MAINTENANCE} + {UNKNOWN,ERROR}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,OPERATE,MAINTENANCE,ERROR} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY,STOW,ESTOP,MAINTENANCE,POINT} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
					<FormulaVar>
						<Label> dishMode </Label>	
						<Value> dishMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> rxEngMode </Label>	
						<Value> {{rx_controller}}/engineeringModeEnabled </Value>
						<InitDataValue> 0 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>
				
				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}
			
		</Attribute>
		


		
		<Attribute name = "healthState" alias="healthState">
			<Description> Health status </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ_WRITE </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> OK </Value>
				<Value> DEGRADED </Value>
				<Value> FAILED </Value>
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>		
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
			<Formula>
				<Expression> 
					/* == Handle UNKNOWN case == */
					if(rx=='UNKNOWN' or spf=='UNKNOWN' or ds=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						res:= 'UNKNOWN';
						return [0];
					};

					/* == Handle all NORMAL case == */
					if( ds=='NORMAL' and spf=='NORMAL' and rx=='NORMAL' )
					{
						res:= 'OK';
						return [0];
					};	
					/* == Handle FAILED case == */
					if( ds=='FAILED' or spf=='FAILED' or rx=='FAILED' )
					{
						res:= 'FAILED';
						return [0];
					};
					/* == Handle DEGRADED case == */
					if( (ds=='DEGRADED' or spf=='DEGRADED' or rx=='DEGRADED') and (ds!='UNKNOWN' and spf!='UNKNOWN' and rx!='UNKNOWN') )
					{
						res:= 'DEGRADED';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>
				
				<FormulaVars>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/healthState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/healthState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/healthState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>
				
				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}
		</Attribute>
		


		
		<!--
		<Attribute name = "usageFlag" alias="usageFlag">
			<Description> Usage flag </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>
			<PossibleValues>
				<Value> IDLE </Value>
				<Value> CONFIG </Value>
				<Value> ACTIVE </Value>
				<Value> STANDBY </Value>
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_medium_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_medium_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_medium_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>		
			<Value>
				<InitValue> IDLE </InitValue>
			</Value>
		</Attribute>
		-->

		
		<Attribute name = "simulationMode" alias="simulationMode">
			<Description> Flag indicating whether the Dish element is simulated or not </Description>
			<DataType> BOOL </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>	 	
			<Polling> 
				<Period> {{dshmgr_medium_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> 1 </InitValue>
			</Value>

			<Formula>
				<Expression> 
					if( x=='REAL' )
					{
						res:= false;
						return [0];
					};
					res:= true;
					return [0];
				</Expression>
				
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> elementType </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>
				
				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>
		
		<Attribute name = "testMode" alias="testMode">	
			<Description> Enable/disable test mode </Description>
			<DataType> BOOL </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<Polling> 
				<Period> {{dshmgr_very_slow_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_very_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> 0 </InitValue>
			</Value>
		</Attribute>

		<!-- ************************************************** -->
		<!-- **      Capabilities Attributes                    -->
		<!-- ************************************************** -->

		
		<!--
			== DISH CAPABILITY CODES ==
			UNAVAILABLE: The band is not available, due to a functional error or components not fitted.
			STANDBY: The band is fully functional, and ready to operate.
			CONFIGURING: The band is configuring to become ready.
			OPERATE_DEGRADED: The band is fully functional, but system noise performance is degraded.
			OPERATE_FULL: The band is fully functional and is meeting all performance requirements.
		-->
		<!-- B1 Capability State (in Dish notation) -->
		<Attribute name = "b1CapabilityState" alias="b1CapabilityState">
			<Description> Band 1 capability state in Dish notation </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>
			<PossibleValues>
				<Value> UNAVAILABLE </Value>
				<Value> STANDBY </Value>
				<Value> CONFIGURING </Value>
				<Value> OPERATE-DEGRADED </Value>
				<Value> OPERATE-FULL </Value>
				<Value> UNKNOWN </Value> <!-- Added wrt to ICD -->
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
			
			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and spf_enable_b1_in_config | bool and rx_enabled_in_config | bool and rx_enable_b1_in_config | bool %}
			<Formula>
				<Expression>
					/* Handle UNAVAILABLE case */		
					if( (ds=='STARTUP' or ds=='ESTOP') or (spf_cap=='UNAVAILABLE') or (rx_cap=='UNAVAILABLE') )
					{
						res:= 'UNAVAILABLE';
						return [0];
					};

					/* Handle UNKNOWN case */		
					if( spf_cap=='UNKNOWN' or rx_cap=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						res:= 'UNKNOWN';
						return [0];
					};

					/* Handle STANDBY case */		
					if( (dish=='STANDBY-LP' or dish=='STANDBY-FP') and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='STANDBY' or rx_cap=='OPERATE') )
					{
						res:= 'STANDBY';
						return [0];
					};
					if( dish=='OPERATE' and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};
					if( dish=='STOW' and spf_cap=='STANDBY' and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};

					/* Handle CONFIGURING case */		
					if( (dish=='CONFIG' or ds_indexer=='MOVING') and (spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='CONFIGURE' or rx_cap=='OPERATE') )
					{
						res:= 'CONFIGURING';
						return [0];
					};

					/* Handle OPERATE-DEGRADED case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-DEGRADED') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-DEGRADED';
						return [0];
					};

					/* Handle OPERATE-FULL case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-FULL') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-FULL';
						return [0];
					};

					res:= 'UNKNOWN';
					return [-1];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,STANDBY-FP,DATA-CAPTURE,CONFIGURE,MAINTENANCE} + {UNKNOWN,ERROR}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,OPERATE,MAINTENANCE,ERROR} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY,STOW,ESTOP,MAINTENANCE,POINT} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
		
					<FormulaVar>
						<Label> rx_cap </Label>	
						<Value> {{rx_controller}}/b1CapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,CONFIGURE,OPERATE} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf_cap </Label>	
						<Value> {{spf_controller}}/b1CapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,OPERATE-DEGRADED,OPERATE-FULL} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				
					<FormulaVar>
						<Label> dish </Label>	
						<Value> dishMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

					<FormulaVar>
						<Label> ds_indexer </Label>	
						<Value> {{ds_manager}}/indexerPosition </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {B1,...,B5} + {UNKNOWN,MOVING} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	

					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>

			</Formula>
			{% endif %}
		</Attribute>		
		
		
		<!-- B2 Capability State (in Dish notation) -->
		<Attribute name = "b2CapabilityState" alias="b2CapabilityState">
			<Description> Band 2 capability state in Dish notation </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>
			<PossibleValues>
				<Value> UNAVAILABLE </Value>
				<Value> STANDBY </Value>
				<Value> CONFIGURING </Value>
				<Value> OPERATE-DEGRADED </Value>
				<Value> OPERATE-FULL </Value>
				<Value> UNKNOWN </Value> <!-- Added wrt to ICD -->
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>		
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and spf_enable_b2_in_config | bool and rx_enabled_in_config | bool and rx_enable_b2_in_config | bool %}
			<Formula>
				<Expression>
					/* Handle UNAVAILABLE case */		
					if( (ds=='STARTUP' or ds=='ESTOP') or (spf_cap=='UNAVAILABLE') or (rx_cap=='UNAVAILABLE') )
					{
						res:= 'UNAVAILABLE';
						return [0];
					};

					/* Handle UNKNOWN case */		
					if( spf_cap=='UNKNOWN' or rx_cap=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						res:= 'UNKNOWN';
						return [0];
					};

					/* Handle STANDBY case */		
					if( (dish=='STANDBY-LP' or dish=='STANDBY-FP') and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='STANDBY' or rx_cap=='OPERATE') )
					{
						res:= 'STANDBY';
						return [0];
					};
					if( dish=='OPERATE' and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};
					if( dish=='STOW' and spf_cap=='STANDBY' and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};

					/* Handle CONFIGURING case */		
					if( (dish=='CONFIG' or ds_indexer=='MOVING') and (spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='CONFIGURE' or rx_cap=='OPERATE') )
					{
						res:= 'CONFIGURING';
						return [0];
					};

					/* Handle OPERATE-DEGRADED case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-DEGRADED') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-DEGRADED';
						return [0];
					};

					/* Handle OPERATE-FULL case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-FULL') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-FULL';
						return [0];
					};

					res:= 'UNKNOWN';
					return [-1];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,STANDBY-FP,DATA-CAPTURE,CONFIGURE,MAINTENANCE} + {UNKNOWN,ERROR}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,OPERATE,MAINTENANCE,ERROR} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY,STOW,ESTOP,MAINTENANCE,POINT} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
		
					<FormulaVar>
						<Label> rx_cap </Label>	
						<Value> {{rx_controller}}/b2CapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,CONFIGURE,OPERATE} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf_cap </Label>	
						<Value> {{spf_controller}}/b2CapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,OPERATE-DEGRADED,OPERATE-FULL} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				
					<FormulaVar>
						<Label> dish </Label>	
						<Value> dishMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

					<FormulaVar>
						<Label> ds_indexer </Label>	
						<Value> {{ds_manager}}/indexerPosition </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {B1,...,B5} + {UNKNOWN,MOVING} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	

					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}
		</Attribute>		
		

		<!-- B3 Capability State (in Dish notation) -->
		<Attribute name = "b3CapabilityState" alias="b3CapabilityState">
			<Description> Band 3 capability state in Dish notation </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>
			<PossibleValues>
				<Value> UNAVAILABLE </Value>
				<Value> STANDBY </Value>
				<Value> CONFIGURING </Value>
				<Value> OPERATE-DEGRADED </Value>
				<Value> OPERATE-FULL </Value>
				<Value> UNKNOWN </Value> <!-- Added wrt to ICD -->
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>		
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and spf_enable_b3_in_config | bool and rx_enabled_in_config | bool and rx_enable_b3_in_config | bool %}
			<Formula>
				<Expression>
					/* Handle UNAVAILABLE case */		
					if( (ds=='STARTUP' or ds=='ESTOP') or (spf_cap=='UNAVAILABLE') or (rx_cap=='UNAVAILABLE') )
					{
						res:= 'UNAVAILABLE';
						return [0];
					};

					/* Handle UNKNOWN case */		
					if( spf_cap=='UNKNOWN' or rx_cap=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						res:= 'UNKNOWN';
						return [0];
					};

					/* Handle STANDBY case */		
					if( (dish=='STANDBY-LP' or dish=='STANDBY-FP') and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='STANDBY' or rx_cap=='OPERATE') )
					{
						res:= 'STANDBY';
						return [0];
					};
					if( dish=='OPERATE' and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};
					if( dish=='STOW' and spf_cap=='STANDBY' and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};

					/* Handle CONFIGURING case */		
					if( (dish=='CONFIG' or ds_indexer=='MOVING') and (spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='CONFIGURE' or rx_cap=='OPERATE') )
					{
						res:= 'CONFIGURING';
						return [0];
					};

					/* Handle OPERATE-DEGRADED case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-DEGRADED') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-DEGRADED';
						return [0];
					};

					/* Handle OPERATE-FULL case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-FULL') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-FULL';
						return [0];
					};

					res:= 'UNKNOWN';
					return [-1];
				</Expression>
			
				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,STANDBY-FP,DATA-CAPTURE,CONFIGURE,MAINTENANCE} + {UNKNOWN,ERROR}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,OPERATE,MAINTENANCE,ERROR} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY,STOW,ESTOP,MAINTENANCE,POINT} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
		
					<FormulaVar>
						<Label> rx_cap </Label>	
						<Value> {{rx_controller}}/b3CapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,CONFIGURE,OPERATE} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf_cap </Label>	
						<Value> {{spf_controller}}/b3CapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,OPERATE-DEGRADED,OPERATE-FULL} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				
					<FormulaVar>
						<Label> dish </Label>	
						<Value> dishMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

					<FormulaVar>
						<Label> ds_indexer </Label>	
						<Value> {{ds_manager}}/indexerPosition </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {B1,...,B5} + {UNKNOWN,MOVING} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	

					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}
		</Attribute>		
		
		
		<!-- B4 Capability State (in Dish notation) -->
		<Attribute name = "b4CapabilityState" alias="b4CapabilityState">
			<Description> Band 4 capability state in Dish notation </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>
			<PossibleValues>
				<Value> UNAVAILABLE </Value>
				<Value> STANDBY </Value>
				<Value> CONFIGURING </Value>
				<Value> OPERATE-DEGRADED </Value>
				<Value> OPERATE-FULL </Value>
				<Value> UNKNOWN </Value> <!-- Added wrt to ICD -->
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		
			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and spf_enable_b4_in_config | bool and rx_enabled_in_config | bool and rx_enable_b4_in_config | bool %}
			<Formula>
				<Expression>
					/* Handle UNAVAILABLE case */		
					if( (ds=='STARTUP' or ds=='ESTOP') or (spf_cap=='UNAVAILABLE') or (rx_cap=='UNAVAILABLE') )
					{
						res:= 'UNAVAILABLE';
						return [0];
					};

					/* Handle UNKNOWN case */		
					if( spf_cap=='UNKNOWN' or rx_cap=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						res:= 'UNKNOWN';
						return [0];
					};

					/* Handle STANDBY case */		
					if( (dish=='STANDBY-LP' or dish=='STANDBY-FP') and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='STANDBY' or rx_cap=='OPERATE') )
					{
						res:= 'STANDBY';
						return [0];
					};
					if( dish=='OPERATE' and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};
					if( dish=='STOW' and spf_cap=='STANDBY' and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};

					/* Handle CONFIGURING case */		
					if( (dish=='CONFIG' or ds_indexer=='MOVING') and (spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='CONFIGURE' or rx_cap=='OPERATE') )
					{
						res:= 'CONFIGURING';
						return [0];
					};

					/* Handle OPERATE-DEGRADED case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-DEGRADED') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-DEGRADED';
						return [0];
					};

					/* Handle OPERATE-FULL case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-FULL') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-FULL';
						return [0];
					};

					res:= 'UNKNOWN';
					return [-1];
				</Expression>
		

				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,STANDBY-FP,DATA-CAPTURE,CONFIGURE,MAINTENANCE} + {UNKNOWN,ERROR}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,OPERATE,MAINTENANCE,ERROR} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY,STOW,ESTOP,MAINTENANCE,POINT} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
		
					<FormulaVar>
						<Label> rx_cap </Label>	
						<Value> {{rx_controller}}/b4CapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,CONFIGURE,OPERATE} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf_cap </Label>	
						<Value> {{spf_controller}}/b4CapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,OPERATE-DEGRADED,OPERATE-FULL} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				
					<FormulaVar>
						<Label> dish </Label>	
						<Value> dishMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

					<FormulaVar>
						<Label> ds_indexer </Label>	
						<Value> {{ds_manager}}/indexerPosition </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {B1,...,B5} + {UNKNOWN,MOVING} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	

					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}
		</Attribute>	
		


		
		<!-- B5a Capability State (in Dish notation) -->
		<Attribute name = "b5aCapabilityState" alias="b5aCapabilityState">
			<Description> Band 5a capability state in Dish notation </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>
			<PossibleValues>
				<Value> UNAVAILABLE </Value>
				<Value> STANDBY </Value>
				<Value> CONFIGURING </Value>
				<Value> OPERATE-DEGRADED </Value>
				<Value> OPERATE-FULL </Value>
				<Value> UNKNOWN </Value> <!-- Added wrt to ICD -->
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>		
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and spf_enable_b5_in_config | bool and rx_enabled_in_config | bool and rx_enable_b5a_in_config | bool %}
			<Formula>
				<Expression>
					/* Handle UNAVAILABLE case */		
					if( (ds=='STARTUP' or ds=='ESTOP' or ds=='OFF') or (spf=='OFF' or spf=='STARTUP' or spf=='ERROR' or spf_cap=='UNAVAILABLE') or (rx=='OFF' or rx=='STARTUP' or rx_cap=='UNAVAILABLE') )
					{
						res:= 'UNAVAILABLE';
						return [0];
					};

					/* Handle UNKNOWN case */		
					if( spf_cap=='UNKNOWN' or rx_cap=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						res:= 'UNKNOWN';
						return [0];
					};

					/* Handle STANDBY case */		
					if( (dish=='STANDBY-LP' or dish=='STANDBY-FP') and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='STANDBY' or rx_cap=='OPERATE') )
					{
						res:= 'STANDBY';
						return [0];
					};
					if( dish=='OPERATE' and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};
					if( dish=='STOW' and spf_cap=='STANDBY' and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};

					/* Handle CONFIGURING case */		
					if( (dish=='CONFIG' or ds_indexer=='MOVING') and (spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='CONFIGURE' or rx_cap=='OPERATE') )
					{
						res:= 'CONFIGURING';
						return [0];
					};

					/* Handle OPERATE-DEGRADED case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-DEGRADED') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-DEGRADED';
						return [0];
					};

					/* Handle OPERATE-FULL case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-FULL') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-FULL';
						return [0];
					};

					res:= 'UNKNOWN';
					return [-1];
				</Expression>
		

				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,STANDBY-FP,DATA-CAPTURE,CONFIGURE,MAINTENANCE} + {UNKNOWN,ERROR}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,OPERATE,MAINTENANCE,ERROR} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY,STOW,ESTOP,MAINTENANCE,POINT} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
		
					<FormulaVar>
						<Label> rx_cap </Label>	
						<Value> {{rx_controller}}/b5aCapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,CONFIGURE,OPERATE} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf_cap </Label>	
						<Value> {{spf_controller}}/b5CapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,OPERATE-DEGRADED,OPERATE-FULL} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				
					<FormulaVar>
						<Label> dish </Label>	
						<Value> dishMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

					<FormulaVar>
						<Label> ds_indexer </Label>	
						<Value> {{ds_manager}}/indexerPosition </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {B1,...,B5} + {UNKNOWN,MOVING} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	

					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}

		</Attribute>
		


		<!-- B5b Capability State (in Dish notation) -->
		<Attribute name = "b5bCapabilityState" alias="b5bCapabilityState">
			<Description> Band 5b capability state in Dish notation </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat>
			<RWType> READ </RWType>
			<PossibleValues>
				<Value> UNAVAILABLE </Value>
				<Value> STANDBY </Value>
				<Value> CONFIGURING </Value>
				<Value> OPERATE-DEGRADED </Value>
				<Value> OPERATE-FULL </Value>
				<Value> UNKNOWN </Value> <!-- Added wrt to ICD -->
			</PossibleValues>
			<Polling> 
				<Period> {{dshmgr_fast_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>		
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and spf_enable_b5_in_config | bool and rx_enabled_in_config | bool and rx_enable_b5b_in_config | bool %}
			<Formula>
				<Expression>
					/* Handle UNAVAILABLE case */		
					if( (ds=='STARTUP' or ds=='ESTOP' or ds=='OFF') or (spf=='OFF' or spf=='STARTUP' or spf=='ERROR' or spf_cap=='UNAVAILABLE') or (rx=='OFF' or rx=='STARTUP' or rx_cap=='UNAVAILABLE') )
					{
						res:= 'UNAVAILABLE';
						return [0];
					};

					/* Handle UNKNOWN case */		
					if( spf_cap=='UNKNOWN' or rx_cap=='UNKNOWN' or (seRunStatus=='SOFT-OFFLINE' or seRunStatus=='HARD-OFFLINE') )
					{
						res:= 'UNKNOWN';
						return [0];
					};

					/* Handle STANDBY case */		
					if( (dish=='STANDBY-LP' or dish=='STANDBY-FP') and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='STANDBY' or rx_cap=='OPERATE') )
					{
						res:= 'STANDBY';
						return [0];
					};	
					if( dish=='OPERATE' and (spf_cap=='STANDBY' or spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};	
					if( dish=='STOW' and spf_cap=='STANDBY' and rx_cap=='STANDBY' )
					{
						res:= 'STANDBY';
						return [0];
					};				

					/* Handle CONFIGURING case */		
					if( (dish=='CONFIG' or ds_indexer=='MOVING') and (spf_cap=='OPERATE-DEGRADED' or spf_cap=='OPERATE-FULL') and (rx_cap=='CONFIGURE' or rx_cap=='OPERATE') )
					{
						res:= 'CONFIGURING';
						return [0];
					};

					/* Handle OPERATE-DEGRADED case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-DEGRADED') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-DEGRADED';
						return [0];
					};

					/* Handle OPERATE-FULL case */		
					if( (ds_indexer!='MOVING' and (ds=='POINT' or ds=='STOW') ) and (spf_cap=='OPERATE-FULL') and (rx_cap=='OPERATE') )
					{
						res:= 'OPERATE-FULL';
						return [0];
					};

					res:= 'UNKNOWN';
					return [-1];
				</Expression>
		

				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{rx_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,STANDBY-FP,DATA-CAPTURE,CONFIGURE,MAINTENANCE} + {UNKNOWN,ERROR}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{spf_controller}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY-LP,OPERATE,MAINTENANCE,ERROR} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> ds </Label>	
						<Value> {{ds_manager}}/operatingMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {OFF,STARTUP,STANDBY,STOW,ESTOP,MAINTENANCE,POINT} + {UNKNOWN} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
		
					<FormulaVar>
						<Label> rx_cap </Label>	
						<Value> {{rx_controller}}/b5bCapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,CONFIGURE,OPERATE} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf_cap </Label>	
						<Value> {{spf_controller}}/b5CapabilityState </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {UNAVAILABLE,STANDBY,OPERATE-DEGRADED,OPERATE-FULL} + {UNKNOWN}-->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				
					<FormulaVar>
						<Label> dish </Label>	
						<Value> dishMode </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>

					<FormulaVar>
						<Label> ds_indexer </Label>	
						<Value> {{ds_manager}}/indexerPosition </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {B1,...,B5} + {UNKNOWN,MOVING} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	

					<FormulaVar>
						<Label> seRunStatus </Label>	
						<Value> seRunStatus </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}

		</Attribute>
		
		

		<!-- ************************************************** -->
		<!-- **      BAND CONFIGURATION ATTRIBUTES              -->
		<!-- ************************************************** -->
		<Attribute name = "requestedBand" alias="requestedBand">
			<Description> Band id requested to be configured (needed to know which band was requested in case of a device crash) </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<Memorized>  </Memorized>	
			<PossibleValues>
				<Value> NONE </Value>
				<Value> B1 </Value>
				<Value> B2 </Value>
				<Value> B3 </Value>
				<Value> B4 </Value>
				<Value> B5a </Value>
				<Value> B5b </Value>						
			</PossibleValues>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dsmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dsmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> NONE </InitValue>
				<SafeValue> NONE </SafeValue>
			</Value>
		</Attribute>


	
		<Attribute name = "configuredBand" alias="configuredBand">
			<Description> Band id currently configured (determined from sub-elements) </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> B1 </Value>
				<Value> B2 </Value>
				<Value> B3 </Value>
				<Value> B4 </Value>
				<Value> B5a </Value>
				<Value> B5b </Value>				
				<Value> NONE </Value>
				<Value> ERROR </Value>
				<Value> UNDEFINED </Value>
			</PossibleValues>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<AbsChangeEvent>
					<ChangeValue> 1 </ChangeValue>
				</AbsChangeEvent>
				<PeriodicEvent>
					<Period> {{dsmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dsmgr_very_slow_archive_event_period}} </Period>
					<AbsChange> 1 </AbsChange>
				</ArchiveEvent>
			</Events>
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
	
			{% if ds_enabled_in_config | bool and rx_enabled_in_config | bool %}
			<Formula>
				<Expression> 
					if( ds_indexer=='UNKNOWN' or rx_activeBand=='UNKNOWN' )
					{
						res:= 'UNKNOWN';
						return [0];
					};
					if( ds_indexer=='MOVING' or rx_activeBand=='NONE' )
					{
						res:= 'NONE';
						return [0];
					};

          if( ds_indexer=='B1' and rx_activeBand=='B1' )
					{
						res:= 'B1';
						return [0];
					};
					if( ds_indexer=='B2' and rx_activeBand=='B2' )
					{
						res:= 'B2';
						return [0];
					};
					if( ds_indexer=='B3' and rx_activeBand=='B3' )
					{
						res:= 'B3';
						return [0];
					};
					if( ds_indexer=='B4' and rx_activeBand=='B4' )
					{
						res:= 'B4';
						return [0];
					};
					if( ds_indexer=='B5' and rx_activeBand=='B5a' )
					{
						res:= 'B5a';
						return [0];
					};
					if( ds_indexer=='B5' and rx_activeBand=='B5b' )
					{
						res:= 'B5b';
						return [0];
					};
					
					res:= 'UNDEFINED';
					return [-1];
				</Expression>
		

				<FormulaVars>
					<FormulaVar>
						<Label> ds_indexer </Label>	
						<Value> {{ds_manager}}/indexerPosition </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {B1,...,B5} + {UNKNOWN,MOVING} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> rx_activeBand </Label>	
						<Value> {{rx_controller}}/configuredBand </Value>
						<InitDataValue> UNKNOWN </InitDataValue> <!-- {B1,...,B5a,B5b} + {UNKNOWN,NONE} -->
						<ExpDataType> ENUM </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>	
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}
		</Attribute>
		

		
		<!-- ************************************************** -->
		<!-- **      TASK STATUS ATTRIBUTES                     -->
		<!-- ************************************************** -->

		<!-- DISH TASK STATUS -->
		{% if ds_enabled_in_config | bool %}
		<Attribute name = "setStowModeProgress" alias="setStowModeProgress">
			<Description> Set dish stow mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}

		{% if ds_enabled_in_config | bool  %}
		<Attribute name = "setStowModeProgressStatus" alias="setStowModeProgressStatus">
			<Description> Set dish stow mode task progress status </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> INIT </Value>
				<Value> IDLE </Value>
				<Value> RUNNING </Value>
				<Value> COMPLETED </Value>
				<Value> FAILED </Value>
				<Value> ABORTED </Value>				
				<Value> EXPIRED </Value>
				<Value> CANCELED </Value>
			</PossibleValues>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if( x_0=='UNKNOWN' )
					{
						res:= 'UNKNOWN';
						return [0];
					};
					if( x_0=='INIT' )
					{
						res:= 'INIT';
						return [0];
					};	
					if( x_0=='IDLE' )
					{
						res:= 'IDLE';
						return [0];
					};
					if( x_0=='RUNNING' )
					{
						res:= 'RUNNING';
						return [0];
					};
					if( x_0=='COMPLETED' )
					{
						res:= 'COMPLETED';
						return [0];
					};
					if( x_0=='FAILED' )
					{
						res:= 'FAILED';
						return [0];
					};
					if( x_0=='ABORTED' )
					{
						res:= 'ABORTED';
						return [0];
					};
					if( x_0=='EXPIRED' )
					{
						res:= 'EXPIRED';
						return [0];
					};
					if( x_0=='CANCELED' )
					{
						res:= 'CANCELED';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> setStowModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>
		{% endif %}



		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "setStandbyLPModeProgress" alias="setStandbyLPModeProgress">
			<Description> Set dish STANDBY-LP mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}

		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "setStandbyLPModeProgressStatus" alias="setStandbyLPModeProgressStatus">
			<Description> Set dish STANDBY-LP mode task progress status </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> INIT </Value>
				<Value> IDLE </Value>
				<Value> RUNNING </Value>
				<Value> COMPLETED </Value>
				<Value> FAILED </Value>
				<Value> ABORTED </Value>				
				<Value> EXPIRED </Value>
				<Value> CANCELED </Value>
			</PossibleValues>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if( x_0=='UNKNOWN' )
					{
						res:= 'UNKNOWN';
						return [0];
					};
					if( x_0=='INIT' )
					{
						res:= 'INIT';
						return [0];
					};	
					if( x_0=='IDLE' )
					{
						res:= 'IDLE';
						return [0];
					};
					if( x_0=='RUNNING' )
					{
						res:= 'RUNNING';
						return [0];
					};
					if( x_0=='COMPLETED' )
					{
						res:= 'COMPLETED';
						return [0];
					};
					if( x_0=='FAILED' )
					{
						res:= 'FAILED';
						return [0];
					};
					if( x_0=='ABORTED' )
					{
						res:= 'ABORTED';
						return [0];
					};
					if( x_0=='EXPIRED' )
					{
						res:= 'EXPIRED';
						return [0];
					};
					if( x_0=='CANCELED' )
					{
						res:= 'CANCELED';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> setStandbyLPModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>
		{% endif %}


		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "setStandbyFPModeProgress" alias="setStandbyFPModeProgress">
			<Description> Dish set standbyFP task status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}


		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "setStandbyFPModeProgressStatus" alias="setStandbyFPModeProgressStatus">
			<Description> Set dish STANDBY-FP mode task progress status </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> INIT </Value>
				<Value> IDLE </Value>
				<Value> RUNNING </Value>
				<Value> COMPLETED </Value>
				<Value> FAILED </Value>
				<Value> ABORTED </Value>				
				<Value> EXPIRED </Value>
				<Value> CANCELED </Value>
			</PossibleValues>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if( x_0=='UNKNOWN' )
					{
						res:= 'UNKNOWN';
						return [0];
					};
					if( x_0=='INIT' )
					{
						res:= 'INIT';
						return [0];
					};	
					if( x_0=='IDLE' )
					{
						res:= 'IDLE';
						return [0];
					};
					if( x_0=='RUNNING' )
					{
						res:= 'RUNNING';
						return [0];
					};
					if( x_0=='COMPLETED' )
					{
						res:= 'COMPLETED';
						return [0];
					};
					if( x_0=='FAILED' )
					{
						res:= 'FAILED';
						return [0];
					};
					if( x_0=='ABORTED' )
					{
						res:= 'ABORTED';
						return [0];
					};
					if( x_0=='EXPIRED' )
					{
						res:= 'EXPIRED';
						return [0];
					};
					if( x_0=='CANCELED' )
					{
						res:= 'CANCELED';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> setStandbyFPModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>
		{% endif %}


		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "setMaintenanceModeProgress" alias="setMaintenanceModeProgress">
			<Description> Dish set MAINTENANCE mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}


		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "setMaintenanceModeProgressStatus" alias="setMaintenanceModeProgressStatus">
			<Description> Dish set MAINTENANCE mode task progress status </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> INIT </Value>
				<Value> IDLE </Value>
				<Value> RUNNING </Value>
				<Value> COMPLETED </Value>
				<Value> FAILED </Value>
				<Value> ABORTED </Value>				
				<Value> EXPIRED </Value>
				<Value> CANCELED </Value>
			</PossibleValues>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if( x_0=='UNKNOWN' )
					{
						res:= 'UNKNOWN';
						return [0];
					};
					if( x_0=='INIT' )
					{
						res:= 'INIT';
						return [0];
					};	
					if( x_0=='IDLE' )
					{
						res:= 'IDLE';
						return [0];
					};
					if( x_0=='RUNNING' )
					{
						res:= 'RUNNING';
						return [0];
					};
					if( x_0=='COMPLETED' )
					{
						res:= 'COMPLETED';
						return [0];
					};
					if( x_0=='FAILED' )
					{
						res:= 'FAILED';
						return [0];
					};
					if( x_0=='ABORTED' )
					{
						res:= 'ABORTED';
						return [0];
					};
					if( x_0=='EXPIRED' )
					{
						res:= 'EXPIRED';
						return [0];
					};
					if( x_0=='CANCELED' )
					{
						res:= 'CANCELED';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> setMaintenanceModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>
		{% endif %}


		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "setOperateModeProgress" alias="setOperateModeProgress">
			<Description> Set dish OPERATE mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}


		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "setOperateModeProgressStatus" alias="setOperateModeProgressStatus">
			<Description> Dish set OPERATE mode task progress status </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> INIT </Value>
				<Value> IDLE </Value>
				<Value> RUNNING </Value>
				<Value> COMPLETED </Value>
				<Value> FAILED </Value>
				<Value> ABORTED </Value>				
				<Value> EXPIRED </Value>
				<Value> CANCELED </Value>
			</PossibleValues>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if( x_0=='UNKNOWN' )
					{
						res:= 'UNKNOWN';
						return [0];
					};
					if( x_0=='INIT' )
					{
						res:= 'INIT';
						return [0];
					};	
					if( x_0=='IDLE' )
					{
						res:= 'IDLE';
						return [0];
					};
					if( x_0=='RUNNING' )
					{
						res:= 'RUNNING';
						return [0];
					};
					if( x_0=='COMPLETED' )
					{
						res:= 'COMPLETED';
						return [0];
					};
					if( x_0=='FAILED' )
					{
						res:= 'FAILED';
						return [0];
					};
					if( x_0=='ABORTED' )
					{
						res:= 'ABORTED';
						return [0];
					};
					if( x_0=='EXPIRED' )
					{
						res:= 'EXPIRED';
						return [0];
					};
					if( x_0=='CANCELED' )
					{
						res:= 'CANCELED';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> setOperateModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>
		{% endif %}

		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "configureBandProgress" alias="configureBandProgress">
			<Description> Configure band task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}

		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "configureBandProgressStatus" alias="configureBandProgressStatus">
			<Description> Configure band task progress status </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ_WRITE </RWType>	
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> INIT </Value>
				<Value> IDLE </Value>
				<Value> RUNNING </Value>
				<Value> COMPLETED </Value>
				<Value> FAILED </Value>
				<Value> ABORTED </Value>				
				<Value> EXPIRED </Value>
				<Value> CANCELED </Value>
			</PossibleValues>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression>
					if( x_0=='UNKNOWN' )
					{
						res:= 'UNKNOWN';
						return [0];
					};
					if( x_0=='INIT' )
					{
						res:= 'INIT';
						return [0];
					};	
					if( x_0=='IDLE' )
					{
						res:= 'IDLE';
						return [0];
					};
					if( x_0=='RUNNING' )
					{
						res:= 'RUNNING';
						return [0];
					};
					if( x_0=='COMPLETED' )
					{
						res:= 'COMPLETED';
						return [0];
					};
					if( x_0=='FAILED' )
					{
						res:= 'FAILED';
						return [0];
					};
					if( x_0=='ABORTED' )
					{
						res:= 'ABORTED';
						return [0];
					};
					if( x_0=='EXPIRED' )
					{
						res:= 'EXPIRED';
						return [0];
					};
					if( x_0=='CANCELED' )
					{
						res:= 'CANCELED';
						return [0];
					};
					res:= 'UNKNOWN';
					return [-1];
				</Expression>

				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> configureBandProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue> 
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>
		{% endif %}



		<!-- SUB-ELEMENT TASK STATUS -->
		<!-- DS -->
		{% if ds_enabled_in_config | bool %}
		<Attribute name = "dsStowProgress" alias="dsStowProgress">
			<Description> DS stow task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 2 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{ds_manager}}/stowProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


		{% if ds_enabled_in_config | bool %}
		<Attribute name = "dsSetStandbyLPModeProgress" alias="dsSetStandbyLPModeProgress">
			<Description> DS set STANDBY-LP mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 2 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{ds_manager}}/setStandbyLPModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


		{% if ds_enabled_in_config | bool %}
		<Attribute name = "dsSetStandbyFPModeProgress" alias="dsSetStandbyFPModeProgress">
			<Description> DS set STANDBY-FP mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 2 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{ds_manager}}/setStandbyFPModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


		{% if ds_enabled_in_config | bool %}
		<Attribute name = "dsSetPointModeProgress" alias="dsSetPointModeProgress">
			<Description> DS set POINT mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 2 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{ds_manager}}/setPointModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}

		{% if ds_enabled_in_config | bool %}
		<Attribute name = "dsIndexingProgress" alias="dsIndexingProgress">
			<Description> DS indexing task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{ds_manager}}/indexingProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 2 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>		
		</Attribute>
		{% endif %}


		<!-- SPF -->
		{% if spf_enabled_in_config | bool %}
		<Attribute name = "spfGoOperationalProgress" alias="spfGoOperationalProgress">
			<Description> SPF go operational task progress. Set SPF to OPERATE mode and then turn on LNAs. </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}


		{% if spf_enabled_in_config | bool %}
		<Attribute name = "spfSetOperateModeProgress" alias="spfSetOperateModeProgress">
			<Description> SPF set operate mode status progress </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setOperateModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


		
	  {% if spf_enabled_in_config | bool %}
		<Attribute name = "spfSetStandbyLPModeProgress" alias="spfSetStandbyLPModeProgress">
			<Description> SPF set standby LP mode status progress </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setStandbyLPModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		</Attribute>
		{% endif %}


		{% if spf_enabled_in_config | bool %}
		<Attribute name = "spfSetMaintenanceModeProgress" alias="spfSetMaintenanceModeProgress">
			<Description> SPF set maintenance mode status progress </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setMaintenanceModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<Attribute name = "spfSetB1FeedOperateModeProgress" alias="spfSetB1FeedOperateModeProgress">
			<Description> SPF Set feed to OPERATE mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB1FeedOperateModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<Attribute name = "spfSetB2FeedOperateModeProgress" alias="spfSetB2FeedOperateModeProgress">
			<Description> SPF Set feed to OPERATE mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB2FeedOperateModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<Attribute name = "spfSetB3FeedOperateModeProgress" alias="spfSetB3FeedOperateModeProgress">
			<Description> SPF Set feed to OPERATE mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB3FeedOperateModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<Attribute name = "spfSetB4FeedOperateModeProgress" alias="spfSetB4FeedOperateModeProgress">
			<Description> SPF Set feed to OPERATE mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB4FeedOperateModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<Attribute name = "spfSetB5FeedOperateModeProgress" alias="spfSetB5FeedOperateModeProgress">
			<Description> SPF Set feed to OPERATE mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB5FeedOperateModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}
		

		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<Attribute name = "spfSetB1FeedRegenerationModeProgress" alias="spfSetB1FeedRegenerationModeProgress">
			<Description> SPF Set feed to REGENERATION mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>		
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB1FeedRegenerationModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<Attribute name = "spfSetB2FeedRegenerationModeProgress" alias="spfSetB2FeedRegenerationModeProgress">
			<Description> SPF Set feed to REGENERATION mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>
			<DisplayLevel> EXPERT </DisplayLevel>		
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB2FeedRegenerationModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<Attribute name = "spfSetB3FeedRegenerationModeProgress" alias="spfSetB3FeedRegenerationModeProgress">
			<Description> SPF Set feed to REGENERATION mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB3FeedRegenerationModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<Attribute name = "spfSetB4FeedRegenerationModeProgress" alias="spfSetB4FeedRegenerationModeProgress">
			<Description> SPF Set feed to REGENERATION mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB4FeedRegenerationModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<Attribute name = "spfSetB5FeedRegenerationModeProgress" alias="spfSetB5FeedRegenerationModeProgress">
			<Description> SPF Set feed to REGENERATION mode task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB5FeedRegenerationModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


			{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<Attribute name = "spfSetB1FeedStandbyLPModeProgress" alias="spfSetB1FeedStandbyLPModeProgress">
			<Description> SPF set feed STANDBY-LP mode </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB1FeedStandbyLPModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>		
		</Attribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<Attribute name = "spfSetB2FeedStandbyLPModeProgress" alias="spfSetB2FeedStandbyLPModeProgress">
			<Description> SPF set feed STANDBY-LP mode </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB2FeedStandbyLPModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<Attribute name = "spfSetB3FeedStandbyLPModeProgress" alias="spfSetB3FeedStandbyLPModeProgress">
			<Description> SPF set feed STANDBY-LP mode </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB3FeedStandbyLPModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<Attribute name = "spfSetB4FeedStandbyLPModeProgress" alias="spfSetB4FeedStandbyLPModeProgress">
			<Description> SPF set feed STANDBY-LP mode </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;	
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB4FeedStandbyLPModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<Attribute name = "spfSetB5FeedStandbyLPModeProgress" alias="spfSetB5FeedStandbyLPModeProgress">
			<Description> SPF set feed STANDBY-LP mode </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>	
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{spf_controller}}/setB5FeedStandbyLPModeProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


		<!-- Rx -->
		{% if rx_enabled_in_config | bool %}
		<Attribute name = "rxConfigureBandProgress" alias="rxConfigureBandProgress">
			<Description> Rx configure band task progress status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 3 </DimX>
			<DisplayLevel> EXPERT </DisplayLevel>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			<Formula>
				<Expression> 
					res_0:= x_0;
					res_1:= x_1;
					res_2:= x_2;
					return [0];
				</Expression>
		
				<FormulaVars>
					<FormulaVar>
						<Label> x </Label>	
						<Value> {{rx_controller}}/configureBandProgress </Value>
						<InitDataValue> UNKNOWN </InitDataValue>
						<ExpDataType> STRING </ExpDataType>
						<ExpDataFormat> SPECTRUM </ExpDataFormat>
						<ExpDataSize> 3 </ExpDataSize>
					</FormulaVar>
				</FormulaVars>

				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
		
		</Attribute>
		{% endif %}


		<!-- Event handler tasks -->
		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "startupOnPowerRestoreProgress" alias="startupOnPowerRestoreProgress">
			<Description> Dish startup (on power restore event) task status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}

		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "shutdownOnPowerCutProgress" alias="shutdownOnPowerCutProgress">
			<Description> Dish shutdown (on power cut event) task status </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}


		
		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "setStandbyFPOnESTOPProgress" alias="setStandbyFPOnESTOPProgress">
			<Description> Dish set standbyFP task status (on ESTOP event) </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}


		{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool and rx_enabled_in_config | bool %}
		<Attribute name = "setStandbyFPOnBandErrorProgress" alias="setStandbyFPOnBandErrorProgress">
			<Description> Dish set standbyFP task status (on band functional error event) </Description>
			<DataType> STRING </DataType>
			<DataFormat> SPECTRUM </DataFormat> 
			<RWType> READ </RWType>	
			<DimX> 2 </DimX>	
			<Polling> 
				<Period> {{dshmgr_default_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>
		</Attribute>
		{% endif %}


		<!-- ************************************************** -->
		<!--               PDU ATTRS                            -->
		<!-- ************************************************** -->
		{% if pdu_enabled_in_config | bool %}
		<Attribute name = "seCtrlPowerStatus" alias="seCtrlPowerStatus">
			<Description> Flag indicating if sub-element controllers are powered on/off </Description>
			<DataType> ENUM </DataType>
			<DataFormat> SCALAR </DataFormat> 
			<RWType> READ </RWType>
			<PossibleValues>
				<Value> UNKNOWN </Value>
				<Value> ON </Value>
				<Value> OFF </Value>
				<Value> CHANGING </Value>						
			</PossibleValues>	
			<Polling> 
				<Period> {{dshmgr_medium_poll_period}} </Period>
			</Polling>
			<Events>
				<PushEvent> </PushEvent>
				<PeriodicEvent>
					<Period> {{dshmgr_slow_periodic_event_period}} </Period>
				</PeriodicEvent>
				<ArchiveEvent>
					<Period> {{dshmgr_very_slow_archive_event_period}} </Period>
				</ArchiveEvent>
			</Events>	
			<Value>
				<InitValue> UNKNOWN </InitValue>
				<SafeValue> UNKNOWN </SafeValue>
			</Value>

			{% if ds_enabled_in_config | bool and spf_enabled_in_config | bool %}
			<Formula>
				<Expression> 
					if( spf==0 and rx==0 )
					{
						res:= 'OFF';
						return [0];
					};
					if( spf==1 and rx==1 )
					{
						res:= 'ON';
						return [0];
					};
					if( (spf==0 and rx==1) or (spf==1 and rx==0) )
					{
						res:= 'CHANGING';
						return [0];
					};
					res:= 'UNKNOWN';
					return [0];
				</Expression>
				
				<FormulaVars>
					<FormulaVar>
						<Label> rx </Label>	
						<Value> {{pdu_manager}}/SPFC </Value>
						<InitDataValue> 1 </InitDataValue>
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
					<FormulaVar>
						<Label> spf </Label>	
						<Value> {{pdu_manager}}/SPFRX </Value>
						<InitDataValue> 1 </InitDataValue> 
						<ExpDataType> BOOL </ExpDataType>
						<ExpDataFormat> SCALAR </ExpDataFormat>
					</FormulaVar>
				</FormulaVars>
				
				<EvaluationMode>
					<Value> CHANGE </Value>
					<Value> PERIODIC </Value>
					<Value> USER </Value>
				</EvaluationMode>
			</Formula>
			{% endif %}
		</Attribute>
		{% endif %}


		<!-- ************************************************** -->
		<!--               FWD ATTRS                            -->
		<!-- ************************************************** -->
		<!-- == DS fwd attributes == -->
		{% if ds_enabled_in_config | bool %}
		<FwdAttribute name = "dsOperatingMode" alias="dsOperatingMode">
			<Label> DS Operating mode </Label>
			<Url> {{ds_manager}}/operatingMode </Url>
			<!--
			<Polling> 
				<Period> {{ds_fast_poll_period}} </Period>
			</Polling>	
			-->
		</FwdAttribute>

		<FwdAttribute name = "dsIndexerPosition" alias="dsIndexerPosition">
			<Label> DS indexer position </Label>
			<Url> {{ds_manager}}/indexerPosition </Url>
			<!--
			<Polling> 
				<Period> {{ds_fast_poll_period}} </Period>
			</Polling>	
			-->
		</FwdAttribute>

		<FwdAttribute name = "dsPowerState" alias="dsPowerState">
			<Label> DS power state </Label>
			<Url> {{ds_manager}}/powerState </Url>
			<!--
			<Polling> 
				<Period> {{ds_fast_poll_period}} </Period>
			</Polling>	
			-->
		</FwdAttribute>

		<FwdAttribute name = "pointingState" alias="pointingState">
			<Label> DS pointing state </Label>
			<Url> {{ds_manager}}/pointingState </Url>	
			<!--
			<Polling> 
				<Period> {{ds_very_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>

		<FwdAttribute name = "desiredPointing" alias="desiredPointing">
			<Label> Desired pointing </Label>
			<Url> {{ds_manager}}/desiredPointing </Url>	
			<!--
			<Polling> 
				<Period> {{ds_very_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>

		<FwdAttribute name = "achievedPointing" alias="achievedPointing">
			<Label> Achieved pointing </Label>
			<Url> {{ds_manager}}/achievedPointing </Url>
			<!--
			<Polling> 
				<Period> {{ds_very_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>

		<FwdAttribute name = "pointingModelParams" alias="pointingModelParams">
			<Label> Pointing model pars </Label>
			<Url> {{ds_manager}}/pointingModelParams </Url>
			<!--
			<Polling> 
				<Period> {{ds_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>

		<FwdAttribute name = "targetLock" alias="targetLock">
			<Label> Target lock </Label>
			<Url> {{ds_manager}}/targetLock </Url>
			<!--
			<Polling> 
				<Period> {{ds_very_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}


		<!-- == Rx fwd attributes == -->
		{% if rx_enabled_in_config | bool %}
		<FwdAttribute name = "rxOperatingMode" alias="rxOperatingMode">
			<Label> SPFRx Operating mode </Label>
			<Url> {{rx_controller}}/operatingMode </Url>
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool %}
		<FwdAttribute name = "rxPowerState" alias="rxPowerState">
			<Label> SPFRx power state </Label>
			<Url> {{rx_controller}}/powerState </Url>
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>	
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool %}
		<FwdAttribute name = "rxHealthState" alias="rxHealthState">
			<Label> SPFRx health state </Label>
			<Url> {{rx_controller}}/healthState </Url>
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>	
			-->
		</FwdAttribute>
		{% endif %}
		
		{% if rx_enabled_in_config | bool and rx_enable_b1_in_config | bool %}
		<FwdAttribute name = "rxB1CapabilityState" alias="rxB1CapabilityState">
			<Label> SPFRx Band 1 Capability State </Label>
			<Url> {{rx_controller}}/b1CapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b2_in_config | bool %}
		<FwdAttribute name = "rxB2CapabilityState" alias="rxB2CapabilityState">
			<Label> SPFRx Band 2 Capability State </Label>
			<Url> {{rx_controller}}/b2CapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b3_in_config | bool %}
		<FwdAttribute name = "rxB3CapabilityState" alias="rxB3CapabilityState">
			<Label> SPFRx Band 3 Capability State </Label>
			<Url> {{rx_controller}}/b3CapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b4_in_config | bool %}
		<FwdAttribute name = "rxB4CapabilityState" alias="rxB4CapabilityState">
			<Label> SPFRx Band 4 Capability State </Label>
			<Url> {{rx_controller}}/b4CapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b5a_in_config | bool %}
		<FwdAttribute name = "rxB5aCapabilityState" alias="rxB5aCapabilityState">
			<Label> SPFRx Band 5a Capability State </Label>
			<Url> {{rx_controller}}/b5aCapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b5b_in_config | bool %}
		<FwdAttribute name = "rxB5bCapabilityState" alias="rxB5bCapabilityState">
			<Label> SPFRx Band 5b Capability State </Label>
			<Url> {{rx_controller}}/b5bCapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool %}
		<FwdAttribute name = "rxInterfaceType" alias="rxInterfaceType">
			<Label> SPFRx Interface Type </Label>
			<Url> {{rx_controller}}/interfaceType </Url>
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b1_in_config | bool %}
		<FwdAttribute name = "rxB1PolHAttenuationDefault" alias="rxB1PolHAttenuationDefault">
			<Label> Receiver default attenuation for B1 horizontal polarization </Label>
			<Url> {{rx_controller}}/b1PolHAttenuationDefault </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>	
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b2_in_config | bool %}
		<FwdAttribute name = "rxB2PolHAttenuationDefault" alias="rxB2PolHAttenuationDefault">
			<Label> Receiver default attenuation for B2 horizontal polarization </Label>
			<Url> {{rx_controller}}/b2PolHAttenuationDefault </Url>		
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>	
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b3_in_config | bool %}
		<FwdAttribute name = "rxB3PolHAttenuationDefault" alias="rxB3PolHAttenuationDefault">
			<Label> Receiver default attenuation for B3 horizontal polarization </Label>
			<Url> {{rx_controller}}/b3PolHAttenuationDefault </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b4_in_config | bool %}
		<FwdAttribute name = "rxB4PolHAttenuationDefault" alias="rxB4PolHAttenuationDefault">
			<Label> Receiver default attenuation for B4 horizontal polarization </Label>
			<Url> {{rx_controller}}/b4PolHAttenuationDefault </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b5a_in_config | bool %}
		<FwdAttribute name = "rxB5aPolHAttenuationDefault" alias="rxB5aPolHAttenuationDefault">
			<Label> Receiver default attenuation for B5a horizontal polarization </Label>
			<Url> {{rx_controller}}/b5aPolHAttenuationDefault </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b5b_in_config | bool %}
		<FwdAttribute name = "rxB5bPolHAttenuationDefault" alias="rxB5bPolHAttenuationDefault">
			<Label> Receiver default attenuation for B5b horizontal polarization </Label>
			<Url> {{rx_controller}}/b5bPolHAttenuationDefault </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b1_in_config | bool %}
		<FwdAttribute name = "rxB1PolVAttenuationDefault" alias="rxB1PolVAttenuationDefault">
			<Label> Receiver default attenuation for B1 vertical polarization </Label>
			<Url> {{rx_controller}}/b1PolVAttenuationDefault </Url>		
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b2_in_config | bool %}
		<FwdAttribute name = "rxB2PolVAttenuationDefault" alias="rxB2PolVAttenuationDefault">
			<Label> Receiver default attenuation for B2 vertical polarization </Label>
			<Url> {{rx_controller}}/b2PolVAttenuationDefault </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b3_in_config | bool %}
		<FwdAttribute name = "rxB3PolVAttenuationDefault" alias="rxB3PolVAttenuationDefault">
			<Label> Receiver default attenuation for B3 vertical polarization </Label>
			<Url> {{rx_controller}}/b3PolVAttenuationDefault </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b4_in_config | bool %}
		<FwdAttribute name = "rxB4PolVAttenuationDefault" alias="rxB4PolVAttenuationDefault">
			<Label> Receiver default attenuation for B4 vertical polarization </Label>
			<Url> {{rx_controller}}/b4PolVAttenuationDefault </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b5a_in_config | bool %}
		<FwdAttribute name = "rxB5aPolVAttenuationDefault" alias="rxB5aPolVAttenuationDefault">
			<Label> Receiver default attenuation for B5a vertical polarization </Label>
			<Url> {{rx_controller}}/b5aPolVAttenuationDefault </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b5b_in_config | bool %}
		<FwdAttribute name = "rxB5bPolVAttenuationDefault" alias="rxB5bPolVAttenuationDefault">
			<Label> Receiver default attenuation for B5b vertical polarization </Label>
			<Url> {{rx_controller}}/b5bPolVAttenuationDefault </Url>
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}
	
	

		{% if rx_enabled_in_config | bool and rx_enable_b1_in_config | bool %}
		<FwdAttribute name = "rxB1DefaultSamplingClockFrequency" alias="rxB1DefaultSamplingClockFrequency">
			<Label> Receiver default band sampling clock frequency </Label>
			<Url> {{rx_controller}}/b1DefaultSamplingClockFrequency </Url>	
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b2_in_config | bool %}
		<FwdAttribute name = "rxB2DefaultSamplingClockFrequency" alias="rxB2DefaultSamplingClockFrequency">
			<Label> Receiver default band sampling clock frequency </Label>
			<Url> {{rx_controller}}/b2DefaultSamplingClockFrequency </Url>	
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b3_in_config | bool %}
		<FwdAttribute name = "rxB3DefaultSamplingClockFrequency" alias="rxB3DefaultSamplingClockFrequency">
			<Label> Receiver default band sampling clock frequency </Label>
			<Url> {{rx_controller}}/b3DefaultSamplingClockFrequency </Url>	
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b4_in_config | bool %}
		<FwdAttribute name = "rxB4DefaultSamplingClockFrequency" alias="rxB4DefaultSamplingClockFrequency">
			<Label> Receiver default band sampling clock frequency </Label>
			<Url> {{rx_controller}}/b4DefaultSamplingClockFrequency </Url>	
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b5a_in_config | bool %}
		<FwdAttribute name = "rxB5aDefaultSamplingClockFrequency" alias="rxB5aDefaultSamplingClockFrequency">
			<Label> Receiver default band sampling clock frequency </Label>
			<Url> {{rx_controller}}/b5aDefaultSamplingClockFrequency </Url>	
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool and rx_enable_b5b_in_config | bool %}
		<FwdAttribute name = "rxB5bDefaultSamplingClockFrequency" alias="rxB5bDefaultSamplingClockFrequency">
			<Label> Receiver default band sampling clock frequency </Label>
			<Url> {{rx_controller}}/b5bDefaultSamplingClockFrequency </Url>	
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}


		

		{% if rx_enabled_in_config | bool %}
		<FwdAttribute name = "rxPolHAttenuation" alias="rxPolHAttenuation">
			<Label> Receiver attenuation for horizontal polarization </Label>
			<Url> {{rx_controller}}/attenuationPolH </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>

		<FwdAttribute name = "rxPolVAttenuation" alias="rxPolVAttenuation">
			<Label> Receiver attenuation for vertical polarization </Label>
			<Url> {{rx_controller}}/attenuationPolV </Url>
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
	
		<FwdAttribute name = "rxNoiseDiodeState" alias="rxNoiseDiodeState">
			<Label> Noise diode state </Label>
			<Url> {{rx_controller}}/noiseDiodeState </Url>
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->	
		</FwdAttribute>
		
		<FwdAttribute name = "rxPeriodicNoiseDiodePars" alias="rxPeriodicNoiseDiodePars">
			<Label> Noise diode periodic model params </Label>
			<Url> {{rx_controller}}/periodicNoiseDiodePars </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		
		<FwdAttribute name = "rxPseudoRandomNoiseDiodePars" alias="rxPseudoRandomNoiseDiodePars">
			<Label> Noise diode pseudo random model params </Label>
			<Url> {{rx_controller}}/pseudoRandomNoiseDiodePars </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>

		<FwdAttribute name = "rxSamplingClockFrequency" alias="rxSamplingClockFrequency">
			<Label> Receiver sampling clock frequency for active band </Label>
			<Url> {{rx_controller}}/samplingClockFrequency </Url>	
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>

		<FwdAttribute name = "rxConfiguredBand" alias="rxConfiguredBand">
			<Label> Rx configured band </Label>
			<Url> {{rx_controller}}/configuredBand </Url>	
			<!--
			<Polling> 
				<Period> {{rx_medium_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		
		<FwdAttribute name = "rxCapturingData" alias="rxCapturingData">
			<Label> Rx capturing data </Label>
			<Url> {{rx_controller}}/capturingData </Url>	
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>

		<FwdAttribute name = "rxSamplingClockSynchronised" alias="rxSamplingClockSynchronised">
			<Label> Rx band synchronised </Label>
			<Url> {{rx_controller}}/samplingClockSynchronised </Url>	
			<!--
			<Polling> 
				<Period> {{rx_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>

		<FwdAttribute name = "rxEngineeringModeEnabled" alias="rxEngineeringModeEnabled">
			<Label> Rx engineering mode enabled/disabled </Label>
			<Url> {{rx_controller}}/engineeringModeEnabled </Url>	
		</FwdAttribute>
		{% endif %}


		{% if rx_enabled_in_config | bool %}
		<FwdAttribute name = "rxSerialNumbers" alias="rxSerialNumbers">
			<Label> Rx Serial Numbers </Label>
			<Url> {{rx_controller}}/serialNumbers </Url>
		</FwdAttribute>
		{% endif %}

		{% if rx_enabled_in_config | bool %}
		<FwdAttribute name = "rxSwVersions" alias="rxSwVersions">
			<Label> Rx Software Versions </Label>
			<Url> {{rx_controller}}/swVersions </Url>
		</FwdAttribute>
		{% endif %}
		
		{% if rx_enabled_in_config | bool %}
		<FwdAttribute name = "rxFwVersions" alias="rxFwVersions">
			<Label> Rx Firmware Versions </Label>
			<Url> {{rx_controller}}/fwVersions </Url>
		</FwdAttribute>
		{% endif %}
		


		<!-- == SPF fwd attributes == -->
		<!-- State & Mode attrs -->
		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfOperatingMode" alias="spfOperatingMode">
			<Label> SPF Operating Mode </Label>
			<Url> {{spf_controller}}/operatingMode </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}
	
		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfPowerState" alias="spfPowerState">
			<Label> SPF Power State </Label>
			<Url> {{spf_controller}}/powerState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfHealthState" alias="spfHealthState">
			<Label> SPF Health State </Label>
			<Url> {{spf_controller}}/healthState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1CapabilityState" alias="spfB1CapabilityState">
			<Label> SPF Band 1 Capability State </Label>
			<Url> {{spf_controller}}/b1CapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2CapabilityState" alias="spfB2CapabilityState">
			<Label> SPF Band 2 Capability State </Label>
			<Url> {{spf_controller}}/b2CapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3CapabilityState" alias="spfB3CapabilityState">
			<Label> SPF Band 3 Capability State </Label>
			<Url> {{spf_controller}}/b3CapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4CapabilityState" alias="spfB4CapabilityState">
			<Label> SPF Band 4 Capability State </Label>
			<Url> {{spf_controller}}/b4CapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5CapabilityState" alias="spfB5CapabilityState">
			<Label> SPF Band 5 Capability State </Label>
			<Url> {{spf_controller}}/b5CapabilityState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}
		
		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1HealthState" alias="spfB1HealthState">
			<Label> SPF Band 1 Health State </Label>
			<Url> {{spf_controller}}/b1HealthState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}
		
		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2HealthState" alias="spfB2HealthState">
			<Label> SPF Band 2 Health State </Label>
			<Url> {{spf_controller}}/b2HealthState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3HealthState" alias="spfB3HealthState">
			<Label> SPF Band 3 Health State </Label>
			<Url> {{spf_controller}}/b3HealthState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4HealthState" alias="spfB4HealthState">
			<Label> SPF Band 4 Health State </Label>
			<Url> {{spf_controller}}/b4HealthState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5HealthState" alias="spfB5HealthState">
			<Label> SPF Band 5 Health State </Label>
			<Url> {{spf_controller}}/b5HealthState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1OperatingState" alias="spfB1OperatingState">
			<Label> SPF Band 1 Operating State </Label>
			<Url> {{spf_controller}}/b1OperatingState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2OperatingState" alias="spfB2OperatingState">
			<Label> SPF Band 2 Operating State </Label>
			<Url> {{spf_controller}}/b2OperatingState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3OperatingState" alias="spfB3OperatingState">
			<Label> SPF Band 3 Operating State </Label>
			<Url> {{spf_controller}}/b3OperatingState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4OperatingState" alias="spfB4OperatingState">
			<Label> SPF Band 4 Operating State </Label>
			<Url> {{spf_controller}}/b4OperatingState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}
		
		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5OperatingState" alias="spfB5OperatingState">
			<Label> SPF Band 5 Operating State </Label>
			<Url> {{spf_controller}}/b5OperatingState </Url>
			<!--
			<Polling> 
				<Period> {{spf_fast_poll_period}} </Period>
			</Polling>
			-->
		</FwdAttribute>
		{% endif %}

		<!--
		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfHeHealthState" alias="spfHeHealthState">
			<Label> SPF Helium Health State </Label>
			<Url> {{spf_helium}}/heHealthState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfHeOperatingState" alias="spfHeOperatingState">
			<Label> SPF Helium Operating State </Label>
			<Url> {{spf_helium}}/heOperatingState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfVaHealthState" alias="spfVaHealthState">
			<Label> SPF Vacuum Health State </Label>
			<Url> {{spf_vacuum}}/vaHealthState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfVaOperatingState" alias="spfVaOperatingState">
			<Label> SPF Vacuum Operating State </Label>
			<Url> {{spf_vacuum}}/vaOperatingState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfCtrlHealthState" alias="spfCtrlHealthState">
			<Label> SPF SPFC Health State </Label>
			<Url> {{spf_controller}}/spfcHealthState </Url>
		</FwdAttribute>
		{% endif %}
		-->

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfInterfaceType" alias="spfInterfaceType">
			<Label> SPF Interface Type </Label>
			<Url> {{spf_controller}}/interfaceType </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfSerialNumbers" alias="spfSerialNumbers">
			<Label> SPF Serial Numbers </Label>
			<Url> {{spf_controller}}/serialNumbers </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfSwVersions" alias="spfSwVersions">
			<Label> SPF Software Versions </Label>
			<Url> {{spf_controller}}/swVersions </Url>
		</FwdAttribute>
		{% endif %}
		
		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfFwVersions" alias="spfFwVersions">
			<Label> SPF Firmware Versions </Label>
			<Url> {{spf_controller}}/fwVersions </Url>
		</FwdAttribute>
		{% endif %}
		

		<!-- Task progress status attr -->	
		<!--
		<FwdAttribute name = "spfOperateTaskStatus" alias="spfOperateTaskStatus">
			<Label> SPF Operate Task Status </Label>
			<Url> {{spf_controller}}/operateTaskStatus </Url>
		</FwdAttribute>

		<FwdAttribute name = "spfB1FeedFullPerfTaskStatus" alias="spfB1FeedFullPerfTaskStatus">
			<Label> SPF Set B1 feed to FULL-PERFORMANCES mode task status </Label>
			<Url> {{spf_controller}}/b1FeedFullPerfTaskStatus </Url>
		</FwdAttribute>
		<FwdAttribute name = "spfB2FeedFullPerfTaskStatus" alias="spfB2FeedFullPerfTaskStatus">
			<Label> SPF Set B2 feed to FULL-PERFORMANCES mode task status </Label>
			<Url> {{spf_controller}}/b2FeedFullPerfTaskStatus </Url>
		</FwdAttribute>
		<FwdAttribute name = "spfB3FeedFullPerfTaskStatus" alias="spfB3FeedFullPerfTaskStatus">
			<Label> SPF Set B3 feed to FULL-PERFORMANCES mode task status </Label>
			<Url> {{spf_controller}}/b3FeedFullPerfTaskStatus </Url>
		</FwdAttribute>
		<FwdAttribute name = "spfB4FeedFullPerfTaskStatus" alias="spfB4FeedFullPerfTaskStatus">
			<Label> SPF Set B4 feed to FULL-PERFORMANCES mode task status </Label>
			<Url> {{spf_controller}}/b4FeedFullPerfTaskStatus </Url>
		</FwdAttribute>
		<FwdAttribute name = "spfB5FeedFullPerfTaskStatus" alias="spfB5FeedFullPerfTaskStatus">
			<Label> SPF Set B5 feed to FULL-PERFORMANCES mode task status </Label>
			<Url> {{spf_controller}}/b5FeedFullPerfTaskStatus </Url>
		</FwdAttribute>
		
		<FwdAttribute name = "spfB1FeedRegenerationTaskStatus" alias="spfB1FeedRegenerationTaskStatus">
			<Label> SPF Set B1 feed to DO-REGENERATION mode task status </Label>
			<Url> {{spf_controller}}/b1FeedRegenerationTaskStatus </Url>
		</FwdAttribute>
		<FwdAttribute name = "spfB2FeedRegenerationTaskStatus" alias="spfB2FeedRegenerationTaskStatus">
			<Label> SPF Set B2 feed to DO-REGENERATION mode task status </Label>
			<Url> {{spf_controller}}/b2FeedRegenerationTaskStatus </Url>
		</FwdAttribute>
		<FwdAttribute name = "spfB3FeedRegenerationTaskStatus" alias="spfB3FeedRegenerationTaskStatus">
			<Label> SPF Set B3 feed to DO-REGENERATION mode task status </Label>
			<Url> {{spf_controller}}/b3FeedRegenerationTaskStatus </Url>
		</FwdAttribute>
		<FwdAttribute name = "spfB4FeedRegenerationTaskStatus" alias="spfB4FeedRegenerationTaskStatus">
			<Label> SPF Set B4 feed to DO-REGENERATION mode task status </Label>
			<Url> {{spf_controller}}/b4FeedRegenerationTaskStatus </Url>
		</FwdAttribute>
		<FwdAttribute name = "spfB5FeedRegenerationTaskStatus" alias="spfB5FeedRegenerationTaskStatus">
			<Label> SPF Set B5 feed to DO-REGENERATION mode task status </Label>
			<Url> {{spf_controller}}/b5FeedRegenerationTaskStatus </Url>
		</FwdAttribute>
		-->

		<!-- Control and setup attr -->
		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfBandInFocus" alias="spfBandInFocus">
			<Label> SPF band id in focus </Label>
			<Url> {{spf_controller}}/bandInFocus </Url>
			<Polling> 
				<Period> {{spf_medium_poll_period}} </Period>
			</Polling>
		</FwdAttribute>
		{% endif %}

		
		<!--
		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2LnaIlluminationEnabled" alias="spfB2LnaIlluminationEnabled">
			<Label> SPF B2 LNA Illumination Enabled </Label>
			<Url> {{spf_B2}}/b2LnaIlluminationEnabled </Url>
		</FwdAttribute>
		{% endif %}
		-->

		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1LnaHPowerState" alias="spfB1LnaHPowerState">
			<Label> SPF B1 LNA H Power State </Label>
			<Url> {{spf_B1}}/b1LnaHPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2LnaHPowerState" alias="spfB2LnaHPowerState">
			<Label> SPF B2 LNA H Power State </Label>
			<Url> {{spf_B2}}/b2LnaHPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3LnaHPowerState" alias="spfB3LnaHPowerState">
			<Label> SPF B3 LNA H Power State </Label>
			<Url> {{spf_B345}}/b3LnaHPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4LnaHPowerState" alias="spfB4LnaHPowerState">
			<Label> SPF B4 LNA H Power State </Label>
			<Url> {{spf_B345}}/b4LnaHPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5LnaHPowerState" alias="spfB5LnaHPowerState">
			<Label> SPF B5 LNA H Power State </Label>
			<Url> {{spf_B345}}/b5LnaHPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1LnaVPowerState" alias="spfB1LnaVPowerState">
			<Label> SPF B1 LNA V Power State </Label>
			<Url> {{spf_B1}}/b1LnaVPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2LnaVPowerState" alias="spfB2LnaVPowerState">
			<Label> SPF B2 LNA V Power State </Label>
			<Url> {{spf_B2}}/b2LnaVPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3LnaVPowerState" alias="spfB3LnaVPowerState">
			<Label> SPF B3 LNA V Power State </Label>
			<Url> {{spf_B345}}/b3LnaVPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4LnaVPowerState" alias="spfB4LnaVPowerState">
			<Label> SPF B4 LNA V Power State </Label>
			<Url> {{spf_B345}}/b4LnaVPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5LnaVPowerState" alias="spfB5LnaVPowerState">
			<Label> SPF B5 LNA V Power State </Label>
			<Url> {{spf_B345}}/b5LnaVPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1Amp2HPowerState" alias="spfB1Amp2HPowerState">
			<Label> SPF B1 Amp2 H Power State </Label>
			<Url> {{spf_B1}}/b1Amp2HPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2Amp2HPowerState" alias="spfB2Amp2HPowerState">
			<Label> SPF B2 Amp2 H Power State </Label>
			<Url> {{spf_B2}}/b2Amp2HPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3Amp2HPowerState" alias="spfB3Amp2HPowerState">
			<Label> SPF B3 Amp2 H Power State </Label>
			<Url> {{spf_B345}}/b3Amp2HPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4Amp2HPowerState" alias="spfB4Amp2HPowerState">
			<Label> SPF B4 Amp2 H Power State </Label>
			<Url> {{spf_B345}}/b4Amp2HPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5Amp2HPowerState" alias="spfB5Amp2HPowerState">
			<Label> SPF B5 Amp2 H Power State </Label>
			<Url> {{spf_B345}}/b5Amp2HPowerState </Url>
		</FwdAttribute>
		{% endif %}
		
		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1Amp2VPowerState" alias="spfB1Amp2VPowerState">
			<Label> SPF B1 Amp2 V Power State </Label>
			<Url> {{spf_B1}}/b1Amp2VPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2Amp2VPowerState" alias="spfB2Amp2VPowerState">
			<Label> SPF B2 Amp2 V Power State </Label>
			<Url> {{spf_B2}}/b2Amp2VPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3Amp2VPowerState" alias="spfB3Amp2VPowerState">
			<Label> SPF B3 Amp2 V Power State </Label>
			<Url> {{spf_B345}}/b3Amp2VPowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4Amp2VPowerState" alias="spfB4Amp2VPowerState">
			<Label> SPF B4 Amp2 V Power State </Label>
			<Url> {{spf_B345}}/b4Amp2VPowerState </Url>
		</FwdAttribute>
		{% endif %}
	
		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5Amp2VPowerState" alias="spfB5Amp2VPowerState">
			<Label> SPF B5 Amp2 V Power State </Label>
			<Url> {{spf_B345}}/b5Amp2VPowerState </Url>
		</FwdAttribute>
		{% endif %}


		
		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1CalSourcePowerState" alias="spfB1CalSourcePowerState">
			<Label> SPF B1 Calibration Source Power State </Label>
			<Url> {{spf_B1}}/b1CalSourcePowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2CalSourcePowerState" alias="spfB2CalSourcePowerState">
			<Label> SPF B2 Calibration Source Power State </Label>
			<Url> {{spf_B2}}/b2CalSourcePowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3CalSourcePowerState" alias="spfB3CalSourcePowerState">
			<Label> SPF B3 Calibration Source Power State </Label>
			<Url> {{spf_B345}}/b3CalSourcePowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4CalSourcePowerState" alias="spfB4CalSourcePowerState">
			<Label> SPF B4 Calibration Source Power State </Label>
			<Url> {{spf_B345}}/b4CalSourcePowerState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5CalSourcePowerState" alias="spfB5CalSourcePowerState">
			<Label> SPF B5 Calibration Source Power State </Label>
			<Url> {{spf_B345}}/b5CalSourcePowerState </Url>
		</FwdAttribute>
		{% endif %}


		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1CalSourceTempCtrlState" alias="spfB1CalSourceTempCtrlState">
			<Label> SPF B1 Calibration Source Temp Controller State </Label>
			<Url> {{spf_B1}}/b1CalSourceTempCtrlState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2CalSourceTempCtrlState" alias="spfB2CalSourceTempCtrlState">
			<Label> SPF B2 Calibration Source Temp Controller State </Label>
			<Url> {{spf_B2}}/b2CalSourceTempCtrlState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3CalSourceTempCtrlState" alias="spfB3CalSourceTempCtrlState">
			<Label> SPF B3 Calibration Source Temp Controller State </Label>
			<Url> {{spf_B345}}/b3CalSourceTempCtrlState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4CalSourceTempCtrlState" alias="spfB4CalSourceTempCtrlState">
			<Label> SPF B4 Calibration Source Temp Controller State </Label>
			<Url> {{spf_B345}}/b4CalSourceTempCtrlState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5CalSourceTempCtrlState" alias="spfB5CalSourceTempCtrlState">
			<Label> SPF B5 Calibration Source Temp Controller State </Label>
			<Url> {{spf_B345}}/b5CalSourceTempCtrlState </Url>
		</FwdAttribute>
		{% endif %}



		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1CalSourceTempSetPoint" alias="spfB1CalSourceTempSetPoint">
			<Label> SPF B1 Cal Source Temperature Set Point </Label>
			<Url> {{spf_B1}}/b1CalSourceTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}
	
		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2CalSourceTempSetPoint" alias="spfB2CalSourceTempSetPoint">
			<Label> SPF B2 Cal Source Temperature Set Point </Label>
			<Url> {{spf_B2}}/b2CalSourceTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3CalSourceTempSetPoint" alias="spfB3CalSourceTempSetPoint">
			<Label> SPF B3 Cal Source Temperature Set Point </Label>
			<Url> {{spf_B345}}/b3CalSourceTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4CalSourceTempSetPoint" alias="spfB4CalSourceTempSetPoint">
			<Label> SPF B4 Cal Source Temperature Set Point </Label>
			<Url> {{spf_B345}}/b4CalSourceTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5CalSourceTempSetPoint" alias="spfB5CalSourceTempSetPoint">
			<Label> SPF B5 Cal Source Temperature Set Point </Label>
			<Url> {{spf_B345}}/b5CalSourceTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}


		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1DefaultCalSourceTempSetPoint" alias="spfB1DefaultCalSourceTempSetPoint">
			<Label> SPF B1 Default Cal Source Temperature Set Point </Label>
			<Url> {{spf_B1}}/b1DefaultCalSourceTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2DefaultCalSourceTempSetPoint" alias="spfB2DefaultCalSourceTempSetPoint">
			<Label> SPF B2 Default Cal Source Temperature Set Point </Label>
			<Url> {{spf_B2}}/b2DefaultCalSourceTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3DefaultCalSourceTempSetPoint" alias="spfB3DefaultCalSourceTempSetPoint">
			<Label> SPF B3 Default Cal Source Temperature Set Point </Label>
			<Url> {{spf_B345}}/b3DefaultCalSourceTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4DefaultCalSourceTempSetPoint" alias="spfB4DefaultCalSourceTempSetPoint">
			<Label> SPF B4 Default Cal Source Temperature Set Point </Label>
			<Url> {{spf_B345}}/b4DefaultCalSourceTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5DefaultCalSourceTempSetPoint" alias="spfB5DefaultCalSourceTempSetPoint">
			<Label> SPF B5 Default Cal Source Temperature Set Point </Label>
			<Url> {{spf_B345}}/b5DefaultCalSourceTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}



		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<!--
		<FwdAttribute name = "spfB1Rfe1TempSetPoint" alias="spfB1Rfe1TempSetPoint">
			<Label> SPF B1 RFE1 Temperature Set Point </Label>
			<Url> {{spf_B1}}/b1Rfe1TempSetPoint </Url>
		</FwdAttribute>
		-->
		<FwdAttribute name = "spfB1LnaHTempSetPoint" alias="spfB1LnaHTempSetPoint">
			<Label> SPF B1 RFE1 Temperature Set Point (H pol)</Label>
			<Url> {{spf_B1}}/b1LnaHTempSetPoint </Url>
		</FwdAttribute>	
		<FwdAttribute name = "spfB1LnaVTempSetPoint" alias="spfB1LnaVTempSetPoint">
			<Label> SPF B1 RFE1 Temperature Set Point (V pol)</Label>
			<Url> {{spf_B1}}/b1LnaVTempSetPoint </Url>
		</FwdAttribute>	
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2Rfe1TempSetPoint" alias="spfB2Rfe1TempSetPoint">
			<Label> SPF B2 RFE1 Temperature Set Point </Label>
			<Url> {{spf_B2}}/b2Rfe1TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3Rfe1TempSetPoint" alias="spfB3Rfe1TempSetPoint">
			<Label> SPF B3 RFE1 Temperature Set Point </Label>
			<Url> {{spf_B345}}/b3Rfe1TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4Rfe1TempSetPoint" alias="spfB4Rfe1TempSetPoint">
			<Label> SPF B4 RFE1 Temperature Set Point </Label>
			<Url> {{spf_B345}}/b4Rfe1TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5Rfe1TempSetPoint" alias="spfB5Rfe1TempSetPoint">
			<Label> SPF B5 RFE1 Temperature Set Point </Label>
			<Url> {{spf_B345}}/b5Rfe1TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}



		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<!--
		<FwdAttribute name = "spfB1DefaultRfe1TempSetPoint" alias="spfB1DefaultRfe1TempSetPoint">
			<Label> SPF B1 RFE1 Default Temperature Set Point </Label>
			<Url> {{spf_B1}}/b1DefaultRfe1TempSetPoint </Url>
		</FwdAttribute>
		-->
		<FwdAttribute name = "spfB1DefaultLnaHTempSetPoint" alias="spfB1DefaultLnaHTempSetPoint">
			<Label> SPF B1 RFE1 Default Temperature Set Point (H pol)</Label>
			<Url> {{spf_B1}}/b1DefaultLnaHTempSetPoint </Url>
		</FwdAttribute>
		<FwdAttribute name = "spfB1DefaultLnaVTempSetPoint" alias="spfB1DefaultLnaVTempSetPoint">
			<Label> SPF B1 RFE1 Default Temperature Set Point (V pol)</Label>
			<Url> {{spf_B1}}/b1DefaultLnaVTempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2DefaultRfe1TempSetPoint" alias="spfB2DefaultRfe1TempSetPoint">
			<Label> SPF B2 RFE1 Default Temperature Set Point </Label>
			<Url> {{spf_B2}}/b2DefaultRfe1TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3DefaultRfe1TempSetPoint" alias="spfB3DefaultRfe1TempSetPoint">
			<Label> SPF B3 RFE1 Default Temperature Set Point </Label>
			<Url> {{spf_B345}}/b3DefaultRfe1TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4DefaultRfe1TempSetPoint" alias="spfB4DefaultRfe1TempSetPoint">
			<Label> SPF B4 RFE1 Default Temperature Set Point </Label>
			<Url> {{spf_B345}}/b4DefaultRfe1TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5DefaultRfe1TempSetPoint" alias="spfB5DefaultRfe1TempSetPoint">
			<Label> SPF B5 RFE1 Default Temperature Set Point </Label>
			<Url> {{spf_B345}}/b5DefaultRfe1TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}


		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<!--
		<FwdAttribute name = "spfB1Rfe1TempCtrlState" alias="spfB1Rfe1TempCtrlState">
			<Label> SPF B1 RFE1 Temperature Controller state </Label>
			<Url> {{spf_B1}}/b1Rfe1TempCtrlState </Url>
		</FwdAttribute>
		-->
		<FwdAttribute name = "spfB1LnaHTempCtrlState" alias="spfB1LnaHTempCtrlState">
			<Label> SPF B1 RFE1 Temperature Controller state (H pol)</Label>
			<Url> {{spf_B1}}/b1LnaHTempCtrlState </Url>
		</FwdAttribute>
		<FwdAttribute name = "spfB1LnaVTempCtrlState" alias="spfB1LnaVTempCtrlState">
			<Label> SPF B1 RFE1 Temperature Controller state (V pol)</Label>
			<Url> {{spf_B1}}/b1LnaVTempCtrlState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2Rfe1TempCtrlState" alias="spfB2Rfe1TempCtrlState">
			<Label> SPF B2 RFE1 Temperature Controller state </Label>
			<Url> {{spf_B2}}/b2Rfe1TempCtrlState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3Rfe1TempCtrlState" alias="spfB3Rfe1TempCtrlState">
			<Label> SPF B3 RFE1 Temperature Controller state </Label>
			<Url> {{spf_B345}}/b3Rfe1TempCtrlState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4Rfe1TempCtrlState" alias="spfB4Rfe1TempCtrlState">
			<Label> SPF B4 RFE1 Temperature Controller state </Label>
			<Url> {{spf_B345}}/b4Rfe1TempCtrlState </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5Rfe1TempCtrlState" alias="spfB5Rfe1TempCtrlState">
			<Label> SPF B5 RFE1 Temperature Controller state </Label>
			<Url> {{spf_B345}}/b5Rfe1TempCtrlState </Url>
		</FwdAttribute>
		{% endif %}


		<!--
		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1Rfe2TempSetPoint" alias="spfB1Rfe2TempSetPoint">
			<Label> SPF B1 RFE2 Temperature Set Point </Label>
			<Url> {{spf_B1}}/b1Rfe2TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}
		-->

		<!--
		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2Rfe2TempSetPoint" alias="spfB2Rfe2TempSetPoint">
			<Label> SPF B2 RFE2 Temperature Set Point </Label>
			<Url> {{spf_B2}}/b2Rfe2TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}
		-->

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3Rfe2TempSetPoint" alias="spfB3Rfe2TempSetPoint">
			<Label> SPF B3 RFE2 Temperature Set Point </Label>
			<Url> {{spf_B345}}/b3Rfe2TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4Rfe2TempSetPoint" alias="spfB4Rfe2TempSetPoint">
			<Label> SPF B4 RFE2 Temperature Set Point </Label>
			<Url> {{spf_B345}}/b4Rfe2TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5Rfe2TempSetPoint" alias="spfB5Rfe2TempSetPoint">
			<Label> SPF B5 RFE2 Temperature Set Point </Label>
			<Url> {{spf_B345}}/b5Rfe2TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}
	

		<!--
		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1DefaultRfe2TempSetPoint" alias="spfB1DefaultRfe2TempSetPoint">
			<Label> SPF B1 RFE2 Default Temperature Set Point </Label>
			<Url> {{spf_B1}}/b1DefaultRfe2TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}
		-->

		<!--
		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2DefaultRfe2TempSetPoint" alias="spfB2DefaultRfe2TempSetPoint">
			<Label> SPF B2 RFE2 Default Temperature Set Point </Label>
			<Url> {{spf_B2}}/b2DefaultRfe2TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}
		-->

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3DefaultRfe2TempSetPoint" alias="spfB3DefaultRfe2TempSetPoint">
			<Label> SPF B3 RFE2 Default Temperature Set Point </Label>
			<Url> {{spf_B345}}/b3DefaultRfe2TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4DefaultRfe2TempSetPoint" alias="spfB4DefaultRfe2TempSetPoint">
			<Label> SPF B4 RFE2 Default Temperature Set Point </Label>
			<Url> {{spf_B345}}/b4DefaultRfe2TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5DefaultRfe2TempSetPoint" alias="spfB5DefaultRfe2TempSetPoint">
			<Label> SPF B5 RFE2 Default Temperature Set Point </Label>
			<Url> {{spf_B345}}/b5DefaultRfe2TempSetPoint </Url>
		</FwdAttribute>
		{% endif %}

		<!-- 
		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3Rfe2TempCtrlState" alias="spfB3Rfe2TempCtrlState">
			<Label> SPF B3 RFE2 Temperature Controller state </Label>
			<Url> {{spf_B345}}/b3Rfe2TempCtrlState </Url>
		</FwdAttribute>	
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4Rfe2TempCtrlState" alias="spfB4Rfe2TempCtrlState">
			<Label> SPF B4 RFE2 Temperature Controller state </Label>
			<Url> {{spf_B345}}/b4Rfe2TempCtrlState </Url>
		</FwdAttribute>	
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5Rfe2TempCtrlState" alias="spfB5Rfe2TempCtrlState">
			<Label> SPF B5 RFE2 Temperature Controller state </Label>
			<Url> {{spf_B345}}/b5Rfe2TempCtrlState </Url>
		</FwdAttribute>	
		{% endif %}
		-->

		<!--
		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2CryoMotorState" alias="spfB2CryoMotorState">
			<Label> SPF B2 Cryocooler motor state </Label>
			<Url> {{spf_B2}}/b2CryoMotorState </Url>
		</FwdAttribute>	
		{% endif %}

		{% if spf_enabled_in_config | bool and (spf_enable_b3_in_config | bool or spf_enable_b4_in_config | bool or spf_enable_b5_in_config | bool) %}
		<FwdAttribute name = "spfB345CryoMotorState" alias="spfB345CryoMotorState">
			<Label> SPF B345 Cryocooler motor state </Label>
			<Url> {{spf_B345}}/b345CryoMotorState </Url>
		</FwdAttribute>	
		{% endif %}
		-->

		<!--
		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2CryoMotorSpeed" alias="spfB2CryoMotorSpeed">
			<Label> SPF B2 Cryocooler motor speed </Label>
			<Url> {{spf_B2}}/b2CryoMotorSpeed </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and (spf_enable_b3_in_config | bool or spf_enable_b4_in_config | bool or spf_enable_b5_in_config | bool) %}
		<FwdAttribute name = "spfB345CryoMotorSpeed" alias="spfB345CryoMotorSpeed">
			<Label> SPF B345 Cryocooler motor speed </Label>
			<Url> {{spf_B345}}/b345CryoMotorSpeed </Url>
		</FwdAttribute>	
		{% endif %}
		-->
		
		<!--
		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2VaValveState" alias="spfB2VaValveState">
			<Label> SPF B2 vacuum valve state </Label>
			<Url> {{spf_B2}}/b2VaValveState </Url>
		</FwdAttribute>	
		{% endif %}

		{% if spf_enabled_in_config | bool and (spf_enable_b3_in_config | bool or spf_enable_b4_in_config | bool or spf_enable_b5_in_config | bool) %}
		<FwdAttribute name = "spfB345VaValveState" alias="spfB345VaValveState">
			<Label> SPF B345 vacuum valve state </Label>
			<Url> {{spf_B345}}/b345VaValveState </Url>
		</FwdAttribute>	
		{% endif %}
		-->

		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1DefaultStartupState" alias="spfB1DefaultStartupState">
			<Label> SPF B1 default startup state </Label>
			<Url> {{spf_B1}}/b1DefaultStartState </Url>
		</FwdAttribute>	
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2DefaultStartupState" alias="spfB2DefaultStartupState">
			<Label> SPF B2 default startup state </Label>
			<Url> {{spf_B2}}/b2DefaultStartState </Url>
		</FwdAttribute>	
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3DefaultStartupState" alias="spfB3DefaultStartupState">
			<Label> SPF B3 default startup state </Label>
			<Url> {{spf_B345}}/b3DefaultStartState </Url>
		</FwdAttribute>	
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4DefaultStartupState" alias="spfB4DefaultStartupState">
			<Label> SPF B4 default startup state </Label>
			<Url> {{spf_B345}}/b4DefaultStartState </Url>
		</FwdAttribute>	
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5DefaultStartupState" alias="spfB5DefaultStartupState">
			<Label> SPF B5 default startup state </Label>
			<Url> {{spf_B345}}/b5DefaultStartState </Url>
		</FwdAttribute>	
		{% endif %}
		

		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1ExpectedOnline" alias="spfB1ExpectedOnline">
			<Label> SPF B1 Expected online </Label>
			<Url> {{spf_controller}}/b1ExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2ExpectedOnline" alias="spfB2ExpectedOnline">
			<Label> SPF B2 Expected online </Label>
			<Url> {{spf_controller}}/b2ExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3ExpectedOnline" alias="spfB3ExpectedOnline">
			<Label> SPF B3 Expected online </Label>
			<Url> {{spf_controller}}/b3ExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4ExpectedOnline" alias="spfB4ExpectedOnline">
			<Label> SPF B4 Expected online </Label>
			<Url> {{spf_controller}}/b4ExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5ExpectedOnline" alias="spfB5ExpectedOnline">
			<Label> SPF B5 Expected online </Label>
			<Url> {{spf_controller}}/b5ExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfHeExpectedOnline" alias="spfHeExpectedOnline">
			<Label> SPF Helium System Expected online </Label>
			<Url> {{spf_controller}}/heExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfVaExpectedOnline" alias="spfVaExpectedOnline">
			<Label> SPF Vacuum System Expected online </Label>
			<Url> {{spf_controller}}/vaExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool %}
		<FwdAttribute name = "spfCtrlExpectedOnline" alias="spfCtrlExpectedOnline">
			<Label> SPF controller Expected online </Label>
			<Url> {{spf_controller}}/spfcExpectedOnline </Url>
		</FwdAttribute>
		{% endif %}
		

		{% if spf_enabled_in_config | bool and spf_enable_b1_in_config | bool %}
		<FwdAttribute name = "spfB1CapTime2OpFull" alias="spfB1CapTime2OpFull">
			<Label> SPF time (min) to reach full perf in B1 </Label>
			<Url> {{spf_controller}}/b1CapTime2OpFull </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b2_in_config | bool %}
		<FwdAttribute name = "spfB2CapTime2OpFull" alias="spfB2CapTime2OpFull">
			<Label> SPF time (min) to reach full perf in B2 </Label>
			<Url> {{spf_controller}}/b2CapTime2OpFull </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b3_in_config | bool %}
		<FwdAttribute name = "spfB3CapTime2OpFull" alias="spfB3CapTime2OpFull">
			<Label> SPF time (min) to reach full perf in B3 </Label>
			<Url> {{spf_controller}}/b3CapTime2OpFull </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b4_in_config | bool %}
		<FwdAttribute name = "spfB4CapTime2OpFull" alias="spfB4CapTime2OpFull">
			<Label> SPF time (min) to reach full perf in B4 </Label>
			<Url> {{spf_controller}}/b4CapTime2OpFull </Url>
		</FwdAttribute>
		{% endif %}

		{% if spf_enabled_in_config | bool and spf_enable_b5_in_config | bool %}
		<FwdAttribute name = "spfB5CapTime2OpFull" alias="spfB5CapTime2OpFull">
			<Label> SPF time (min) to reach full perf in B5 </Label>
			<Url> {{spf_controller}}/b5CapTime2OpFull </Url>
		</FwdAttribute>
		{% endif %}


		<!-- == PDU fwd attributes == -->
		<!-- Power state attrs -->
		{% if pdu_enabled_in_config | bool %}
		<FwdAttribute name = "spfcPowered" alias="spfcPowered">
			<Label> SPFC Power state from PDU </Label>
			<Url> {{pdu_manager}}/SPFC </Url>
		</FwdAttribute>
		{% endif %}

		{% if pdu_enabled_in_config | bool %}
		<FwdAttribute name = "rxpuPowered" alias="rxpuPowered">
			<Label> RXPU Power state from PDU </Label>
			<Url> {{pdu_manager}}/SPFRx </Url>
		</FwdAttribute>
		{% endif %}

	</Attributes>

</DeviceConfiguration>




