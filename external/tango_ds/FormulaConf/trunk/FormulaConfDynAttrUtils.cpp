/*----- PROTECTED REGION ID(FormulaConf::DynAttrUtils.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        FormulaConfDynAttrUtils.cpp
//
// description : Dynamic attributes utilities file for the FormulaConf class
//
// project :     FormulaConf
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <FormulaConf.h>
#include <FormulaConfClass.h>

/*----- PROTECTED REGION END -----*/	//	FormulaConf::DynAttrUtils.cpp

//================================================================
//  Attributes managed are:
//================================================================
//  BoolScalarDyn      |  Tango::DevBoolean	Scalar
//  DoubleScalarDyn    |  Tango::DevDouble	Scalar
//  LongScalarDyn      |  Tango::DevLong	Scalar
//  StringSpectrumDyn  |  Tango::DevString	Spectrum  ( max = 1000)
//  BoolSpectrumDyn    |  Tango::DevBoolean	Spectrum  ( max = 1000)
//  DoubleSpectrumDyn  |  Tango::DevDouble	Spectrum  ( max = 1000)
//  LongSpectrumDyn    |  Tango::DevLong	Spectrum  ( max = 1000)
//================================================================

//	For compatibility reason, this file (FormulaConfDynAttrUtils)
//	manage also the dynamic command utilities.
//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//================================================================

namespace FormulaConf_ns
{
//=============================================================
//	Add/Remove dynamic attribute methods
//=============================================================

//--------------------------------------------------------
/**
 *	Add a BoolScalarDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void FormulaConf::add_BoolScalarDyn_dynamic_attribute(string attname)
{
	//	Attribute : BoolScalarDyn
	BoolScalarDynAttrib	*boolscalardyn = new BoolScalarDynAttrib(attname);
	Tango::UserDefaultAttrProp	boolscalardyn_prop;
	//	description	not set for BoolScalarDyn
	//	label	not set for BoolScalarDyn
	//	unit	not set for BoolScalarDyn
	//	standard_unit	not set for BoolScalarDyn
	//	display_unit	not set for BoolScalarDyn
	//	format	not set for BoolScalarDyn
	//	max_value	not set for BoolScalarDyn
	//	min_value	not set for BoolScalarDyn
	//	max_alarm	not set for BoolScalarDyn
	//	min_alarm	not set for BoolScalarDyn
	//	max_warning	not set for BoolScalarDyn
	//	min_warning	not set for BoolScalarDyn
	//	delta_t	not set for BoolScalarDyn
	//	delta_val	not set for BoolScalarDyn
	
	/*----- PROTECTED REGION ID(FormulaConf::att_BoolScalarDyn_dynamic_attribute) ENABLED START -----*/
	
	map<string,vector<attr_desc_t> >::iterator attr_it = att_data.find(attname);
	if(attr_it != att_data.end())
	{
		stringstream descr_prop;
		size_t ind_descr=0;
		for(vector<attr_desc_t>::iterator it_descr = attr_it->second.begin(); it_descr != attr_it->second.end(); it_descr++)
		{
			descr_prop << "[" << ind_descr << "] " << it_descr->descr.c_str();
			if(ind_descr < attr_it->second.size()-1)
				descr_prop << endl;
			ind_descr++;
		}
		boolscalardyn_prop.set_description(descr_prop.str().c_str());
	}
                        
	/*----- PROTECTED REGION END -----*/	//	FormulaConf::att_BoolScalarDyn_dynamic_attribute
	boolscalardyn->set_default_properties(boolscalardyn_prop);
	//	Not Polled
	boolscalardyn->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	boolscalardyn->set_change_event(true, false);
	boolscalardyn->set_archive_event(true, false);
	BoolScalarDyn_data.insert(make_pair(attname, false));
	add_attribute(boolscalardyn);
}
//--------------------------------------------------------
/**
 *	remove a BoolScalarDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void FormulaConf::remove_BoolScalarDyn_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevBoolean>::iterator ite;
    if ((ite=BoolScalarDyn_data.find(attname))!=BoolScalarDyn_data.end())
    {
    	/*----- PROTECTED REGION ID(FormulaConf::remove_BoolScalarDyn_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	FormulaConf::remove_BoolScalarDyn_dynamic_attribute
		BoolScalarDyn_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a DoubleScalarDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void FormulaConf::add_DoubleScalarDyn_dynamic_attribute(string attname)
{
	//	Attribute : DoubleScalarDyn
	DoubleScalarDynAttrib	*doublescalardyn = new DoubleScalarDynAttrib(attname);
	Tango::UserDefaultAttrProp	doublescalardyn_prop;
	//	description	not set for DoubleScalarDyn
	//	label	not set for DoubleScalarDyn
	//	unit	not set for DoubleScalarDyn
	//	standard_unit	not set for DoubleScalarDyn
	//	display_unit	not set for DoubleScalarDyn
	//	format	not set for DoubleScalarDyn
	//	max_value	not set for DoubleScalarDyn
	//	min_value	not set for DoubleScalarDyn
	//	max_alarm	not set for DoubleScalarDyn
	//	min_alarm	not set for DoubleScalarDyn
	//	max_warning	not set for DoubleScalarDyn
	//	min_warning	not set for DoubleScalarDyn
	//	delta_t	not set for DoubleScalarDyn
	//	delta_val	not set for DoubleScalarDyn
	
	/*----- PROTECTED REGION ID(FormulaConf::att_DoubleScalarDyn_dynamic_attribute) ENABLED START -----*/
	map<string,vector<attr_desc_t> >::iterator attr_it = att_data.find(attname);
	if(attr_it != att_data.end())
	{
		stringstream descr_prop;
		size_t ind_descr=0;
		for(vector<attr_desc_t>::iterator it_descr = attr_it->second.begin(); it_descr != attr_it->second.end(); it_descr++)
		{
			descr_prop << "[" << ind_descr << "] " << it_descr->descr.c_str();
			if(ind_descr < attr_it->second.size()-1)
				descr_prop << endl;
			ind_descr++;
		}
		doublescalardyn_prop.set_description(descr_prop.str().c_str());
	}
	
	/*----- PROTECTED REGION END -----*/	//	FormulaConf::att_DoubleScalarDyn_dynamic_attribute
	doublescalardyn->set_default_properties(doublescalardyn_prop);
	//	Not Polled
	doublescalardyn->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	doublescalardyn->set_change_event(true, true);
	doublescalardyn->set_archive_event(true, true);
	DoubleScalarDyn_data.insert(make_pair(attname, 0.0));
	add_attribute(doublescalardyn);
}
//--------------------------------------------------------
/**
 *	remove a DoubleScalarDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void FormulaConf::remove_DoubleScalarDyn_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=DoubleScalarDyn_data.find(attname))!=DoubleScalarDyn_data.end())
    {
    	/*----- PROTECTED REGION ID(FormulaConf::remove_DoubleScalarDyn_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	FormulaConf::remove_DoubleScalarDyn_dynamic_attribute
		DoubleScalarDyn_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a LongScalarDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void FormulaConf::add_LongScalarDyn_dynamic_attribute(string attname)
{
	//	Attribute : LongScalarDyn
	LongScalarDynAttrib	*longscalardyn = new LongScalarDynAttrib(attname);
	Tango::UserDefaultAttrProp	longscalardyn_prop;
	//	description	not set for LongScalarDyn
	//	label	not set for LongScalarDyn
	//	unit	not set for LongScalarDyn
	//	standard_unit	not set for LongScalarDyn
	//	display_unit	not set for LongScalarDyn
	//	format	not set for LongScalarDyn
	//	max_value	not set for LongScalarDyn
	//	min_value	not set for LongScalarDyn
	//	max_alarm	not set for LongScalarDyn
	//	min_alarm	not set for LongScalarDyn
	//	max_warning	not set for LongScalarDyn
	//	min_warning	not set for LongScalarDyn
	//	delta_t	not set for LongScalarDyn
	//	delta_val	not set for LongScalarDyn
	
	/*----- PROTECTED REGION ID(FormulaConf::att_LongScalarDyn_dynamic_attribute) ENABLED START -----*/
	map<string,vector<attr_desc_t> >::iterator attr_it = att_data.find(attname);
	if(attr_it != att_data.end())
	{
		stringstream descr_prop;
		size_t ind_descr=0;
		for(vector<attr_desc_t>::iterator it_descr = attr_it->second.begin(); it_descr != attr_it->second.end(); it_descr++)
		{
			descr_prop << "[" << ind_descr << "] " << it_descr->descr.c_str();
			if(ind_descr < attr_it->second.size()-1)
				descr_prop << endl;
			ind_descr++;
		}
		longscalardyn_prop.set_description(descr_prop.str().c_str());
	}
	
	/*----- PROTECTED REGION END -----*/	//	FormulaConf::att_LongScalarDyn_dynamic_attribute
	longscalardyn->set_default_properties(longscalardyn_prop);
	//	Not Polled
	longscalardyn->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	longscalardyn->set_change_event(true, true);
	longscalardyn->set_archive_event(true, true);
	LongScalarDyn_data.insert(make_pair(attname, 0));
	add_attribute(longscalardyn);
}
//--------------------------------------------------------
/**
 *	remove a LongScalarDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 */
//--------------------------------------------------------
void FormulaConf::remove_LongScalarDyn_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevLong>::iterator ite;
    if ((ite=LongScalarDyn_data.find(attname))!=LongScalarDyn_data.end())
    {
    	/*----- PROTECTED REGION ID(FormulaConf::remove_LongScalarDyn_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	FormulaConf::remove_LongScalarDyn_dynamic_attribute
		LongScalarDyn_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a StringSpectrumDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 *  parameter ptr:     memory buffer used to set attribute value.
 *                     If NULL or not specified, buffer will be allocated.
 */
//--------------------------------------------------------
void FormulaConf::add_StringSpectrumDyn_dynamic_attribute(string attname, Tango::DevString *ptr)
{
	//	Attribute : StringSpectrumDyn
	if (ptr==NULL)
		ptr = new Tango::DevString[1000];
	StringSpectrumDynAttrib	*stringspectrumdyn = new StringSpectrumDynAttrib(attname);
	Tango::UserDefaultAttrProp	stringspectrumdyn_prop;
	//	description	not set for StringSpectrumDyn
	//	label	not set for StringSpectrumDyn
	//	unit	not set for StringSpectrumDyn
	//	standard_unit	not set for StringSpectrumDyn
	//	display_unit	not set for StringSpectrumDyn
	//	format	not set for StringSpectrumDyn
	//	max_value	not set for StringSpectrumDyn
	//	min_value	not set for StringSpectrumDyn
	//	max_alarm	not set for StringSpectrumDyn
	//	min_alarm	not set for StringSpectrumDyn
	//	max_warning	not set for StringSpectrumDyn
	//	min_warning	not set for StringSpectrumDyn
	//	delta_t	not set for StringSpectrumDyn
	//	delta_val	not set for StringSpectrumDyn
	
	/*----- PROTECTED REGION ID(FormulaConf::att_StringSpectrumDyn_dynamic_attribute) ENABLED START -----*/
	map<string,vector<attr_desc_t> >::iterator attr_it = att_data.find(attname);
	if(attr_it != att_data.end())
	{
		stringstream descr_prop;
		size_t ind_descr=0;
		for(vector<attr_desc_t>::iterator it_descr = attr_it->second.begin(); it_descr != attr_it->second.end(); it_descr++)
		{
			descr_prop << "[" << ind_descr << "] " << it_descr->descr.c_str();
			if(ind_descr < attr_it->second.size()-1)
				descr_prop << endl;
			ind_descr++;
		}
		stringspectrumdyn_prop.set_description(descr_prop.str().c_str());
	}
	
	/*----- PROTECTED REGION END -----*/	//	FormulaConf::att_StringSpectrumDyn_dynamic_attribute
	stringspectrumdyn->set_default_properties(stringspectrumdyn_prop);
	//	Not Polled
	stringspectrumdyn->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	stringspectrumdyn->set_change_event(true, false);
	stringspectrumdyn->set_archive_event(true, false);
	char array[1];
	array[0] = '\0';
	StringSpectrumDyn_data.insert(make_pair(attname, ptr));
	add_attribute(stringspectrumdyn);
}
//--------------------------------------------------------
/**
 *	remove a StringSpectrumDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 *  parameter free_it: memory buffer will be freed if true or not specified.
 */
//--------------------------------------------------------
void FormulaConf::remove_StringSpectrumDyn_dynamic_attribute(string attname, bool free_it)
{
	remove_attribute(attname, true);
	map<string,Tango::DevString *>::iterator ite;
    if ((ite=StringSpectrumDyn_data.find(attname))!=StringSpectrumDyn_data.end())
    {
    	/*----- PROTECTED REGION ID(FormulaConf::remove_StringSpectrumDyn_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	FormulaConf::remove_StringSpectrumDyn_dynamic_attribute
		if (free_it)
			delete[] ite->second;
		StringSpectrumDyn_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a BoolSpectrumDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 *  parameter ptr:     memory buffer used to set attribute value.
 *                     If NULL or not specified, buffer will be allocated.
 */
//--------------------------------------------------------
void FormulaConf::add_BoolSpectrumDyn_dynamic_attribute(string attname, Tango::DevBoolean *ptr)
{
	//	Attribute : BoolSpectrumDyn
	if (ptr==NULL)
		ptr = new Tango::DevBoolean[1000];
	BoolSpectrumDynAttrib	*boolspectrumdyn = new BoolSpectrumDynAttrib(attname);
	Tango::UserDefaultAttrProp	boolspectrumdyn_prop;
	//	description	not set for BoolSpectrumDyn
	//	label	not set for BoolSpectrumDyn
	//	unit	not set for BoolSpectrumDyn
	//	standard_unit	not set for BoolSpectrumDyn
	//	display_unit	not set for BoolSpectrumDyn
	//	format	not set for BoolSpectrumDyn
	//	max_value	not set for BoolSpectrumDyn
	//	min_value	not set for BoolSpectrumDyn
	//	max_alarm	not set for BoolSpectrumDyn
	//	min_alarm	not set for BoolSpectrumDyn
	//	max_warning	not set for BoolSpectrumDyn
	//	min_warning	not set for BoolSpectrumDyn
	//	delta_t	not set for BoolSpectrumDyn
	//	delta_val	not set for BoolSpectrumDyn
	
	/*----- PROTECTED REGION ID(FormulaConf::att_BoolSpectrumDyn_dynamic_attribute) ENABLED START -----*/
	map<string,vector<attr_desc_t> >::iterator attr_it = att_data.find(attname);
	if(attr_it != att_data.end())
	{
		stringstream descr_prop;
		size_t ind_descr=0;
		for(vector<attr_desc_t>::iterator it_descr = attr_it->second.begin(); it_descr != attr_it->second.end(); it_descr++)
		{
			descr_prop << "[" << ind_descr << "] " << it_descr->descr.c_str();
			if(ind_descr < attr_it->second.size()-1)
				descr_prop << endl;
			ind_descr++;
		}
		boolspectrumdyn_prop.set_description(descr_prop.str().c_str());
	}
	
	/*----- PROTECTED REGION END -----*/	//	FormulaConf::att_BoolSpectrumDyn_dynamic_attribute
	boolspectrumdyn->set_default_properties(boolspectrumdyn_prop);
	//	Not Polled
	boolspectrumdyn->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	boolspectrumdyn->set_change_event(true, false);
	boolspectrumdyn->set_archive_event(true, false);
	BoolSpectrumDyn_data.insert(make_pair(attname, ptr));
	add_attribute(boolspectrumdyn);
}
//--------------------------------------------------------
/**
 *	remove a BoolSpectrumDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 *  parameter free_it: memory buffer will be freed if true or not specified.
 */
//--------------------------------------------------------
void FormulaConf::remove_BoolSpectrumDyn_dynamic_attribute(string attname, bool free_it)
{
	remove_attribute(attname, true);
	map<string,Tango::DevBoolean *>::iterator ite;
    if ((ite=BoolSpectrumDyn_data.find(attname))!=BoolSpectrumDyn_data.end())
    {
    	/*----- PROTECTED REGION ID(FormulaConf::remove_BoolSpectrumDyn_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	FormulaConf::remove_BoolSpectrumDyn_dynamic_attribute
		if (free_it)
			delete[] ite->second;
		BoolSpectrumDyn_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a DoubleSpectrumDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 *  parameter ptr:     memory buffer used to set attribute value.
 *                     If NULL or not specified, buffer will be allocated.
 */
//--------------------------------------------------------
void FormulaConf::add_DoubleSpectrumDyn_dynamic_attribute(string attname, Tango::DevDouble *ptr)
{
	//	Attribute : DoubleSpectrumDyn
	if (ptr==NULL)
		ptr = new Tango::DevDouble[1000];
	DoubleSpectrumDynAttrib	*doublespectrumdyn = new DoubleSpectrumDynAttrib(attname);
	Tango::UserDefaultAttrProp	doublespectrumdyn_prop;
	//	description	not set for DoubleSpectrumDyn
	//	label	not set for DoubleSpectrumDyn
	//	unit	not set for DoubleSpectrumDyn
	//	standard_unit	not set for DoubleSpectrumDyn
	//	display_unit	not set for DoubleSpectrumDyn
	//	format	not set for DoubleSpectrumDyn
	//	max_value	not set for DoubleSpectrumDyn
	//	min_value	not set for DoubleSpectrumDyn
	//	max_alarm	not set for DoubleSpectrumDyn
	//	min_alarm	not set for DoubleSpectrumDyn
	//	max_warning	not set for DoubleSpectrumDyn
	//	min_warning	not set for DoubleSpectrumDyn
	//	delta_t	not set for DoubleSpectrumDyn
	//	delta_val	not set for DoubleSpectrumDyn
	
	/*----- PROTECTED REGION ID(FormulaConf::att_DoubleSpectrumDyn_dynamic_attribute) ENABLED START -----*/
	map<string,vector<attr_desc_t> >::iterator attr_it = att_data.find(attname);
	if(attr_it != att_data.end())
	{
		stringstream descr_prop;
		size_t ind_descr=0;
		for(vector<attr_desc_t>::iterator it_descr = attr_it->second.begin(); it_descr != attr_it->second.end(); it_descr++)
		{
			descr_prop << "[" << ind_descr << "] " << it_descr->descr.c_str();
			if(ind_descr < attr_it->second.size()-1)
				descr_prop << endl;
			ind_descr++;
		}
		doublespectrumdyn_prop.set_description(descr_prop.str().c_str());
	}
	
	/*----- PROTECTED REGION END -----*/	//	FormulaConf::att_DoubleSpectrumDyn_dynamic_attribute
	doublespectrumdyn->set_default_properties(doublespectrumdyn_prop);
	//	Not Polled
	doublespectrumdyn->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	doublespectrumdyn->set_change_event(true, true);
	doublespectrumdyn->set_archive_event(true, true);
	DoubleSpectrumDyn_data.insert(make_pair(attname, ptr));
	add_attribute(doublespectrumdyn);
}
//--------------------------------------------------------
/**
 *	remove a DoubleSpectrumDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 *  parameter free_it: memory buffer will be freed if true or not specified.
 */
//--------------------------------------------------------
void FormulaConf::remove_DoubleSpectrumDyn_dynamic_attribute(string attname, bool free_it)
{
	remove_attribute(attname, true);
	map<string,Tango::DevDouble *>::iterator ite;
    if ((ite=DoubleSpectrumDyn_data.find(attname))!=DoubleSpectrumDyn_data.end())
    {
    	/*----- PROTECTED REGION ID(FormulaConf::remove_DoubleSpectrumDyn_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	FormulaConf::remove_DoubleSpectrumDyn_dynamic_attribute
		if (free_it)
			delete[] ite->second;
		DoubleSpectrumDyn_data.erase(ite);
	}
}
//--------------------------------------------------------
/**
 *	Add a LongSpectrumDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 *  parameter ptr:     memory buffer used to set attribute value.
 *                     If NULL or not specified, buffer will be allocated.
 */
//--------------------------------------------------------
void FormulaConf::add_LongSpectrumDyn_dynamic_attribute(string attname, Tango::DevLong *ptr)
{
	//	Attribute : LongSpectrumDyn
	if (ptr==NULL)
		ptr = new Tango::DevLong[1000];
	LongSpectrumDynAttrib	*longspectrumdyn = new LongSpectrumDynAttrib(attname);
	Tango::UserDefaultAttrProp	longspectrumdyn_prop;
	//	description	not set for LongSpectrumDyn
	//	label	not set for LongSpectrumDyn
	//	unit	not set for LongSpectrumDyn
	//	standard_unit	not set for LongSpectrumDyn
	//	display_unit	not set for LongSpectrumDyn
	//	format	not set for LongSpectrumDyn
	//	max_value	not set for LongSpectrumDyn
	//	min_value	not set for LongSpectrumDyn
	//	max_alarm	not set for LongSpectrumDyn
	//	min_alarm	not set for LongSpectrumDyn
	//	max_warning	not set for LongSpectrumDyn
	//	min_warning	not set for LongSpectrumDyn
	//	delta_t	not set for LongSpectrumDyn
	//	delta_val	not set for LongSpectrumDyn
	
	/*----- PROTECTED REGION ID(FormulaConf::att_LongSpectrumDyn_dynamic_attribute) ENABLED START -----*/
	map<string,vector<attr_desc_t> >::iterator attr_it = att_data.find(attname);
	if(attr_it != att_data.end())
	{
		stringstream descr_prop;
		size_t ind_descr=0;
		for(vector<attr_desc_t>::iterator it_descr = attr_it->second.begin(); it_descr != attr_it->second.end(); it_descr++)
		{
			descr_prop << "[" << ind_descr << "] " << it_descr->descr.c_str();
			if(ind_descr < attr_it->second.size()-1)
				descr_prop << endl;
			ind_descr++;
		}
		longspectrumdyn_prop.set_description(descr_prop.str().c_str());
	}
	
	/*----- PROTECTED REGION END -----*/	//	FormulaConf::att_LongSpectrumDyn_dynamic_attribute
	longspectrumdyn->set_default_properties(longspectrumdyn_prop);
	//	Not Polled
	longspectrumdyn->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	longspectrumdyn->set_change_event(true, true);
	longspectrumdyn->set_archive_event(true, true);
	LongSpectrumDyn_data.insert(make_pair(attname, ptr));
	add_attribute(longspectrumdyn);
}
//--------------------------------------------------------
/**
 *	remove a LongSpectrumDyn dynamic attribute.
 *
 *  parameter attname: attribute name to be removed.
 *  parameter free_it: memory buffer will be freed if true or not specified.
 */
//--------------------------------------------------------
void FormulaConf::remove_LongSpectrumDyn_dynamic_attribute(string attname, bool free_it)
{
	remove_attribute(attname, true);
	map<string,Tango::DevLong *>::iterator ite;
    if ((ite=LongSpectrumDyn_data.find(attname))!=LongSpectrumDyn_data.end())
    {
    	/*----- PROTECTED REGION ID(FormulaConf::remove_LongSpectrumDyn_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	FormulaConf::remove_LongSpectrumDyn_dynamic_attribute
		if (free_it)
			delete[] ite->second;
		LongSpectrumDyn_data.erase(ite);
	}
}


//============================================================
//	Tool methods to get pointer on attribute data buffer 
//============================================================
//--------------------------------------------------------
/**
 *	Return a pointer on BoolScalarDyn data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevBoolean *FormulaConf::get_BoolScalarDyn_data_ptr(string &name)
{
	map<string,Tango::DevBoolean>::iterator ite;
    if ((ite=BoolScalarDyn_data.find(name))==BoolScalarDyn_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"FormulaConf::get_BoolScalarDyn_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on DoubleScalarDyn data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *FormulaConf::get_DoubleScalarDyn_data_ptr(string &name)
{
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=DoubleScalarDyn_data.find(name))==DoubleScalarDyn_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"FormulaConf::get_DoubleScalarDyn_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on LongScalarDyn data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevLong *FormulaConf::get_LongScalarDyn_data_ptr(string &name)
{
	map<string,Tango::DevLong>::iterator ite;
    if ((ite=LongScalarDyn_data.find(name))==LongScalarDyn_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"FormulaConf::get_LongScalarDyn_data_ptr()");
    }
	return  &(ite->second);
}
//--------------------------------------------------------
/**
 *	Return a pointer on StringSpectrumDyn data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevString *FormulaConf::get_StringSpectrumDyn_data_ptr(string &name)
{
	map<string,Tango::DevString *>::iterator ite;
    if ((ite=StringSpectrumDyn_data.find(name))==StringSpectrumDyn_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"FormulaConf::get_StringSpectrumDyn_data_ptr()");
    }
	return  ite->second;
}
//--------------------------------------------------------
/**
 *	Return a pointer on BoolSpectrumDyn data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevBoolean *FormulaConf::get_BoolSpectrumDyn_data_ptr(string &name)
{
	map<string,Tango::DevBoolean *>::iterator ite;
    if ((ite=BoolSpectrumDyn_data.find(name))==BoolSpectrumDyn_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"FormulaConf::get_BoolSpectrumDyn_data_ptr()");
    }
	return  ite->second;
}
//--------------------------------------------------------
/**
 *	Return a pointer on DoubleSpectrumDyn data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *FormulaConf::get_DoubleSpectrumDyn_data_ptr(string &name)
{
	map<string,Tango::DevDouble *>::iterator ite;
    if ((ite=DoubleSpectrumDyn_data.find(name))==DoubleSpectrumDyn_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"FormulaConf::get_DoubleSpectrumDyn_data_ptr()");
    }
	return  ite->second;
}
//--------------------------------------------------------
/**
 *	Return a pointer on LongSpectrumDyn data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevLong *FormulaConf::get_LongSpectrumDyn_data_ptr(string &name)
{
	map<string,Tango::DevLong *>::iterator ite;
    if ((ite=LongSpectrumDyn_data.find(name))==LongSpectrumDyn_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"FormulaConf::get_LongSpectrumDyn_data_ptr()");
    }
	return  ite->second;
}


//=============================================================
//	Add/Remove dynamic command methods
//=============================================================


} //	namespace
