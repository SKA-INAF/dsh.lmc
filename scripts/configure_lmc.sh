#!/bin/sh

#######################################
##   DEFINE STANDARD CONFIG FILE
#######################################
usage(){
	echo ""
	echo "**************************"
  echo "***     USAGE          ***"
	echo "**************************"
 	echo "$0 [ARGS]"
	echo ""
	echo "=========================="
	echo "==    ARGUMENT LIST     =="
	echo "=========================="
	echo "*** MANDATORY ARGS ***"
	echo "--tangohost=[TANGOHOST] - Tango host to be specified in configuration. NB: If --config option is supplied, the latter will take precedence."
	echo "--config=[CONFIG_FILE] - User-supplied json file with lmc configuration to be applied. NB: This will override the templated config file with default settings generated by this script."
	echo "--lmcconfigdir=[LMC_CONFIG_DIR] - Directory in the configured host where to place generated LMC configuration files. NB: If --config option is supplied, the latter will take precedence."
	echo "--lmcdevdir=[LMC_DEVICE_DIR] - Directory in the configured host where LMC Tango device (binary files) are residing. NB: If --config option is supplied, the latter will take precedence."
	echo "--lmclogdir=[LMC_LOG_DIR] - Directory in the configured host where LMC Tango device logs will reside. NB: If --config option is supplied, the latter will take precedence."

	echo ""
	echo "*** OPTIONAL ARGS ***"		
	echo "--deploy - Deploy first latest LMC version from reporitory before configuring"
	echo "--tangoport=[TANGOPORT] - Tango port [default: 10000]"
	echo "--tangodomain=[TANGODOMAIN] - Tango domain [default: mid_dish_0001]"
	echo "--host=[CONFIGURED_HOST] - Name of host to be configured as specified in your Ansible inventory file. NB: This host must be present in your ansible host inventory file under [lmc_servers] tag. [default: localhost]"
	echo "--askvault - Ask vault password if host vars in inventory are encrypted"
	echo "--hostname=[CONFIGURED_HOSTNAME] - Hostname of the host to be configured. NB: Specify if different from TANGO_HOST [default: assumed equal to TANGO_HOST]"
	echo "--host-inventory=[HOST_INVENTORY_FILE] - User-supplied host inventory file. [default: use that provided in LMC ansible dir]"
	echo "--ansible-user=[ANSIBLE_USER] - Ansible user for configured host. [default: throw error if not localhost]"	
	echo "--ansible-port=[ANSIBLE_PORT] - Ansible port for configured host. [default: 22]"
	echo "--allhosts - Apply configuration to all hosts listed in the default (or user-supplied) inventory. NB: This option override the default --host option."
	echo "--clearservers - Delete and recreate all servers in TangoDB during configuration. [default: no]"
	echo "--human-output - Print ansible output in a debug and human-readable mode [default: no]"
	
	echo "=========================="
	echo ""
}

#######################################
##         PARSE ARGS
#######################################

NARGS="$#"
echo "INFO: NARGS= $NARGS"

if [ "$NARGS" -lt 1 ]; then
	echo "ERROR: Invalid number of arguments...see script usage!"
  echo ""
	usage
	exit 1
fi


CONFIG_FILE_GIVEN=false
CONFIG_FILE=""
TANGOHOST_GIVEN=false
LIMIT_HOSTS=true
CONFIGURED_HOST="localhost"
CONFIGURED_HOSTNAME=""
CONFIGURED_HOSTNAME_GIVEN=false
HOST_INVENTORY_FILE=""
HOST_INVENTORY_GIVEN=false
ROLE_FILE=""
TANGOPORT="10000"
TANGODOMAIN="mid_dish_0001"
CLEAR_SERVERS="no"
LMC_CONFIG_DIR=""
LMC_CONFIG_DIR_GIVEN=false
LMC_DEVICE_DIR=""
LMC_DEVICE_DIR_GIVEN=false
LMC_LOG_DIR=""
LMC_LOG_DIR_GIVEN=false
ANSIBLE_USER=""
ANSIBLE_PORT="22"
ANSIBLE_CMD_PREFIX=""
DEPLOY_LMC=false
ASK_VAULT_FLAG=""

for item in "$@"
do
	case $item in 
		## MANDATORY FIELDS ##	
		--config=*)
    	CONFIG_FILE=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
			if [ "$CONFIG_FILE" != "" ]; then
				CONFIG_FILE_GIVEN=true
			fi
    ;;
		--tangohost=*)
    	TANGOHOST=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
			if [ "$TANGOHOST" != "" ]; then
				TANGOHOST_GIVEN=true
			fi
    ;;
		--lmcconfigdir=*)
    	LMC_CONFIG_DIR=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
			if [ "$LMC_CONFIG_DIR" != "" ]; then
				LMC_CONFIG_DIR_GIVEN=true
			fi
    ;;
		--lmcdevdir=*)
    	LMC_DEVICE_DIR=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
			if [ "$LMC_DEVICE_DIR" != "" ]; then
				LMC_DEVICE_DIR_GIVEN=true
			fi
    ;;
		--lmclogdir=*)
    	LMC_LOG_DIR=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
			if [ "$LMC_LOG_DIR" != "" ]; then
				LMC_LOG_DIR_GIVEN=true
			fi
    ;;

		## OPTIONAL ##
		--host=*)
    	HOST=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
			if [ "$HOST" != "" ]; then
				CONFIGURED_HOST=$HOST
			fi
    ;;
		--hostname=*)
    	PARSED_HOSTNAME=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
			if [ "$PARSED_HOSTNAME" != "" ]; then
				CONFIGURED_HOSTNAME=$PARSED_HOSTNAME
			fi
    ;;
		--host-inventory=*)
    	HOST_INVENTORY=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
			if [ "$HOST_INVENTORY" != "" ]; then
				HOST_INVENTORY_FILE=$HOST_INVENTORY
				HOST_INVENTORY_GIVEN=true
			fi
    ;;
		
		--deploy*)
    	DEPLOY_LMC=true
    ;;

		--askvault*)
    	ASK_VAULT_FLAG="--ask-vault-pass"
    ;;
		
		--tangoport=*)
    	TANGOPORT=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
    ;;
		--tangodomain=*)
    	TANGODOMAIN=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
    ;;
		--allhosts*)
    	LIMIT_HOSTS=false
    ;;
		--clearservers*)
    	CLEAR_SERVERS="yes"
    ;;
		--ansible-user=*)
    	ANSIBLE_USER=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
    ;;
		--ansible-port=*)
    	ANSIBLE_PORT=`echo $item | sed 's/[-a-zA-Z0-9]*=//'`
    ;;
		--human-output*)
			ANSIBLE_CMD_PREFIX='ANSIBLE_STDOUT_CALLBACK="debug"'
		;;

		--help*)
    	usage
			exit
    ;;
		--h*)
    	usage
			exit
    ;;
    *)
    # Unknown option
    echo "ERROR: Unknown option ($item)...exit!"
    exit 1
    ;;
	esac
done

if [ "$CONFIGURED_HOSTNAME_GIVEN" = false ]; then
	if [ "$CONFIGURED_HOST" = "localhost" ]; then
		CONFIGURED_HOSTNAME="localhost"
	else
		CONFIGURED_HOSTNAME="$TANGOHOST"
	fi
  
fi

LIMIT_HOST_FLAG="--limit $CONFIGURED_HOST"
if [ "$LIMIT_HOSTS" = false ]; then
	LIMIT_HOST_FLAG=""
fi

echo ""
echo "*****  PARSED ARGUMENTS ****"
echo "CONFIG_FILE: $CONFIG_FILE, CONFIG_FILE_GIVEN: $CONFIG_FILE_GIVEN"
echo "LMC_CONFIG_DIR: $LMC_CONFIG_DIR, LMC_DEVICE_DIR: $LMC_DEVICE_DIR, LMC_LOG_DIR: $LMC_LOG_DIR"
echo "TANGOHOST: $TANGOHOST, TANGOHOST_GIVEN: $TANGOHOST_GIVEN, TANGOPORT: $TANGOPORT, TANGO_DOMAIN: $TANGODOMAIN"
echo "LIMIT_HOSTS: $LIMIT_HOSTS"
echo "CONFIGURED_HOST: $CONFIGURED_HOST"
echo "CONFIGURED_HOSTNAME: $CONFIGURED_HOSTNAME, CONFIGURED_HOSTNAME_GIVEN: $CONFIGURED_HOSTNAME_GIVEN"
echo "HOST_INVENTORY_FILE: $HOST_INVENTORY_FILE"
echo "ASK_VAULT_FLAG: $ASK_VAULT_FLAG"
echo "****************************"
echo ""


## Check arguments parsed
if [ "$CONFIG_FILE_GIVEN" = false ] && [ "$TANGOHOST_GIVEN" = false ]; then
  echo "ERROR: Missing or empty CONFIG and TANGOHOST args (hint: you should specify at least one), see usage!"
	exit 1
fi
if [ "$CONFIG_FILE_GIVEN" = false ] && [ "$LMC_CONFIG_DIR_GIVEN" = false ]; then
  echo "ERROR: Missing LMC_CONFIG_DIR, see usage!"
	exit 1
fi
if [ "$CONFIG_FILE_GIVEN" = false ] && [ "$LMC_DEVICE_DIR_GIVEN" = false ]; then
  echo "ERROR: Missing LMC_DEVICE_DIR, see usage!"
	exit 1
fi
if [ "$CONFIG_FILE_GIVEN" = false ] && [ "$LMC_LOG_DIR_GIVEN" = false ]; then
  echo "ERROR: Missing LMC_LOG_DIR, see usage!"
	exit 1
fi

if [ "$CONFIGURED_HOST" != "localhost" ] && [ "$HOST_INVENTORY_GIVEN" = false ] && [ "$ANSIBLE_USER" = "" ]; then
	echo "ERROR: You requested to configure lmc on a remote host but you did not supply a ANSIBLE_USER to connect nor an inventory file with host connection variables (hint: specify --ansible-user and --ansible-port if non standard or alternatively provide an host inventory file)"
	exit 1
fi

## Search role file
ROLE_FILE="$DSHLMC_DIR/ansible/lmc_servers.yml"
if [ ! -e $ROLE_FILE ]; then
	echo "ERROR: Ansible LMC role file $ROLE_FILE not found (hint: did you install DishLMC and specify the $DSHLMC_DIR env var?"
	exit 1
fi

#######################################
##   DEFINE STANDARD CONFIG FILE
#######################################
generate_standard_config(){

	## Input vars
	local cfgfile=$1


	echo "INFO: Creating standard LMC config file $cfgfile ..."
	( 
		
			echo '{'
			echo '  "lmc_clear_servers": "'"$CLEAR_SERVERS"'",'
			echo '  "lmc_tango_hostname": "'"$TANGOHOST"'",'
			echo '  "tango_host": "'"$TANGOHOST:$TANGOPORT"'",'
			echo '  "lmc_config_dir":"'"$LMC_CONFIG_DIR"'",'
			echo '  "lmc_tango_syslog_dir":"'"$LMC_LOG_DIR"'",'
			echo '  "lmc_ds_dir":"'"$LMC_DEVICE_DIR"'",	'
			echo '  "lmc_export_servers": "no",'
			echo '  "lmcstarter_enabled_in_config": "yes",'
			echo '  "lmc_starter": "'"tango://$TANGOHOST:$TANGOPORT/tango/admin/$CONFIGURED_HOSTNAME"'",'	
			echo '  "lmcstarter_start_servers": "false",'
			echo '  "lmcstarter_server_startup_timeout": 20,'
			echo '  "lmcstarter_interstartup_level_wait": 3,'
			echo '  "rx_enabled_in_config": "yes",'
			echo '  "rx_controller": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/spfrx/emulator"'",'
			echo '  "rx_astor_controlled": "true",'
			echo '  "rx_startup_level": 1,'
			echo '  "spf_enabled_in_config": "yes",'
			echo '  "spf_controller": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/spf/emulator"'",'
			echo '  "spf_astor_controlled": "true",'
			echo '  "spf_startup_level": 1,'
			echo '  "spf_fast_poll_period": 3000,'
			echo '  "ds_enabled_in_config": "yes",'
			echo '  "ds_manager": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/lmc/ds_emulator"'",'
			echo '  "ds_astor_controlled": "true",'
			echo '  "ds_startup_level": 2,'
			echo '  "dsmgr_enable_config_from_file": "false",'
			echo '  "dsmgr_config_file": "",'
			echo '  "dsmgr_astor_controlled": "false",'
			echo '  "dsmgr_startup_level": 2,'
			echo '  "lmclogger_enabled_in_config": "yes",'
			echo '  "lmc_logger": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/elt/logger"'",'
			echo '  "lmclogger_astor_controlled": "true",'
			echo '  "lmclogger_startup_level": 1,'
			echo '  "dshmgr_enabled_in_config": "yes",'
			echo '  "lmc_master": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/elt/master"'",'
			echo '  "dshmgr_astor_controlled": "true",'
			echo '  "dshmgr_startup_level": 3,'
			echo '  "dshmgr_formula_var_max_time_interval": 120,'
			echo '  "lmcmon_enabled_in_config": "yes",'
			echo '  "lmc_monitor": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/lmc/lmc_monitor"'",'
			echo '  "lmcmon_astor_controlled": "true",'
			echo '  "lmcmon_startup_level": 1,'
			echo '  "alarmhandler_enabled_in_config": "yes",'
			echo '  "alarm_handler": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/elt/alarms"'",'
			echo '  "alarmhandler_astor_controlled": "true",'
			echo '  "alarmhandler_startup_level": 4,'
			echo '  "archiver_enabled_in_config": "yes",'
			echo '  "archiver_astor_controlled": "true",'
			echo '  "archiver_startup_level": 5,'
			echo '  "archiver_lmc_enabled_in_config": "yes",'
			echo '  "archiver_lmc": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/elt/archiver-lmc"'",'
			echo '  "archiver_spf_enabled_in_config": "yes",'
			echo '  "archiver_spf": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/elt/archiver-spf"'",'
			echo '  "archiver_rx_enabled_in_config": "yes",'
			echo '  "archiver_rx": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/elt/archiver-spfrx"'",'
			echo '  "archiver_ds_enabled_in_config": "yes",'
			echo '  "archiver_ds": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/elt/archiver-ds"'",'
			echo '  "archiver_cm_enabled_in_config": "false",'
			echo '  "archiver_cm": "'"tango://$TANGOHOST:$TANGOPORT/$TANGODOMAIN/elt/archiver-cm"'",'
			echo '  "archiver_cm_astor_controlled": "false",'
			echo '  "archiver_cm_startup_level": 5'

			echo '}'

 	) > $cfgfile

}
## close function generate_standard_config()

generate_inventory_file(){

	## Input vars
	local inventoryfile=$1

	echo "INFO: Creating inventory file $inventoryfile ..."
	( 
		echo '[local]'
		echo '127.0.0.1 ansible_connection=local'
		echo 'localhost ansible_connection=ssh'
		echo ''
		echo '[lmc_servers]'
		if [ "$CONFIGURED_HOST" = "localhost" ]; then
			echo "$CONFIGURED_HOSTNAME ansible_host=127.0.0.1 ansible_connection=local"
		else
			echo "$CONFIGURED_HOSTNAME ansible_host=$CONFIGURED_HOST ansible_connection=ssh ansible_user=$ANSIBLE_USER ansible_port=$ANSIBLE_PORT"
		fi
		
	) > $inventoryfile

}
## close generate inventory file

#######################################
##   CHECK IF ANSIBLE IS INSTALLED
#######################################
ANSIBLE_EXE='ansible'
ANSIBLE_CHECK=`command -v $ANSIBLE_EXE`
if [ "$ANSIBLE_CHECK" = "" ]; then
	echo "ERROR: $ANSIBLE_EXE is not found (hint: install it or specify path in your system)!"
	exit
fi


#####################################################
##   IF LOCALHOST CHECK IF MYSQL/TANGO ARE RUNNING
#####################################################
TANGO_EXE='tango'
TANGO_CHECK=`command -v $TANGO_EXE`
if [ "$TANGO_CHECK" = "" ]; then
	echo "ERROR: $TANGO_EXE is not found (hint: install it or specify path in your system)!"
	exit
fi

TANGO_CHECK_RESULT=`tango status`
MYSQL_CHECK=`echo $TANGO_CHECK_RESULT | sed 's/^.*MySQL//' | awk '{print $1}'`
TANGODB_CHECK=`echo $TANGO_CHECK_RESULT | sed 's/^.*TANGO//' | awk '{print $3}'`
if [ "$MYSQL_CHECK" != "OK" ]; then
	echo "ERROR: MySQL not running on the configured host!"
	exit
fi
if [ "$TANGODB_CHECK" != "OK" ]; then
	echo "ERROR: TangoDB not running on the configured host!"
	exit
fi


#######################################
##   GENERATE CONFIGURATION IF NEEDED
#######################################
cfgfile="lmc_config.json"
if [ "$CONFIG_FILE_GIVEN" = false ]; then
	generate_standard_config "$cfgfile"
fi

#######################################
##   GENERATE HOST INVENTORY IF NEEDED
#######################################
inventoryfile="hosts"
if [ $HOST_INVENTORY_GIVEN = false ]; then
	generate_inventory_file "$inventoryfile"
	HOST_INVENTORY_FILE=$inventoryfile
fi

#######################################
##   RUN ANSIBLE DEPLOY
#######################################
if [ "$DEPLOY_LMC" = true ]; then
	CMD="$ANSIBLE_CMD_PREFIX ansible-playbook -i $HOST_INVENTORY_FILE $ROLE_FILE $LIMIT_HOST_FLAG --tags deploy $ASK_VAULT_FLAG --ask-become-pass"
	echo "INFO: Running deploy command $CMD ..."
	eval $CMD
fi

#######################################
##   RUN ANSIBLE CONFIGURATION
#######################################
CMD="$ANSIBLE_CMD_PREFIX ansible-playbook -i $HOST_INVENTORY_FILE $ROLE_FILE $LIMIT_HOST_FLAG --tags configure $ASK_VAULT_FLAG --ask-become-pass --extra-vars "'"'"@$cfgfile"'"'
echo "INFO: Running configuration command $CMD ..."
eval $CMD

echo "### END RUN ###"



