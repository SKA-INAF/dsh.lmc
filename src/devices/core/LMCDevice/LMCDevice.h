/*----- PROTECTED REGION ID(LMCDevice.h) ENABLED START -----*/
//=============================================================================
//
// file :        LMCDevice.h
//
// description : Include file for the LMCDevice class
//
// project :     LMCDevice
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LMCDevice_H
#define LMCDevice_H


#ifndef _TANGO_UTILS_h
	#include <TangoUtils.h>
#endif

#ifndef _ATTR_DATA_h
	#include <AttrData.h>
#endif

#ifndef _DEV_CONFIG_PARSER_H
	#include <DevConfigParser.h>
#endif

#ifndef _TANGO_PROXY_MANAGER_h
	#include <TangoProxyManager.h>
#endif

#ifndef _TASK_h
	#include <Task.h>
#endif

#ifndef _FORMULA_DATA_h
	#include <FormulaData.h>
#endif

#ifndef _FORMULA_MANAGER_h
	#include <FormulaManager.h>
#endif

//Tango headers
#ifndef _TANGO_H
	#include <tango.h>
#endif

#ifndef _LOG4TANGO_APPENDER_H
	#include <log4tango/Appender.hh>
#endif

#ifndef _TANGO_APPENDER_H_
	#include <tangoappender.h>
#endif

//- YAT/YAT4TANGO
#ifndef _INNER_APPENDER_H_
	#include <yat4tango/InnerAppender.h>
#endif

#ifndef _YAT4TANGO_DYNAMIC_ATTR_MANAGER_H_
	#include <yat4tango/DynamicAttributeManager.h>
#endif

#ifndef _YAT_XSTRING_H_
	#include <yat/utils/XString.h>
#endif

//C++ headers
#include <random>

namespace Utils_ns
{
	class Logger;
	class DevConfigParser;
	class DeviceAttr;
	class TangoUtils;
	class EvtSubscriptionData;
	class TaskManager;
	class Task;
}//close namespace Utils_ns


/*
enum class _centralLoggerStatusEnum: short {
	_UNKNOWN,
	_DISABLED,
	_OK,
	_FAILED,
} ;
typedef _centralLoggerStatusEnum centralLoggerStatusEnum;

enum class _elementLoggerStatusEnum: short {
	_UNKNOWN,
	_DISABLED,
	_OK,
	_FAILED,
} ;
typedef _elementLoggerStatusEnum elementLoggerStatusEnum;

enum class _storageLoggerStatusEnum: short {
	_UNKNOWN,
	_DISABLED,
	_OK,
	_FAILED,
} ;
typedef _storageLoggerStatusEnum storageLoggerStatusEnum;

enum class _fwdAttrInitStatusEnum: short {
	_UNKNOWN,
	_OK,
	_FAILED,
} ;
typedef _fwdAttrInitStatusEnum fwdAttrInitStatusEnum;
*/


/*----- PROTECTED REGION END -----*/	//	LMCDevice.h

/**
 *  LMCDevice class description:
 *    This class represents the base device class for SKA Dish LMC. 
 *    All LMC Tango devices inherit from this basic functionalities, 
 *    among them:
 *    
 *    - logging configuration (level/target)
 *    - proxy registration and monitoring utilities
 *    - event handler registration utilities
 *    - dynamic attribute creation from XML configuration file
 *    - formula attributes
 *    - task command queue management
 *    
 *    More details are reported in the Dish LMC repository wiki page.
 */

namespace LMCDevice_ns
{
enum class _centralLoggerStatusEnum: short {
	_UNKNOWN,
	_DISABLED,
	_OK,
	_FAILED,
} ;
typedef _centralLoggerStatusEnum centralLoggerStatusEnum;

enum class _elementLoggerStatusEnum: short {
	_UNKNOWN,
	_DISABLED,
	_OK,
	_FAILED,
} ;
typedef _elementLoggerStatusEnum elementLoggerStatusEnum;

enum class _storageLoggerStatusEnum: short {
	_UNKNOWN,
	_DISABLED,
	_OK,
	_FAILED,
} ;
typedef _storageLoggerStatusEnum storageLoggerStatusEnum;

enum class _fwdAttrInitStatusEnum: short {
	_UNKNOWN,
	_OK,
	_FAILED,
} ;
typedef _fwdAttrInitStatusEnum fwdAttrInitStatusEnum;

/*----- PROTECTED REGION ID(LMCDevice::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
	class EventCallBack;
	class ProxyMonitorTask;
	class EventHandlerTask;
	class TaskThread;
	class AttrRandomizerThread;

/*----- PROTECTED REGION END -----*/	//	LMCDevice::Additional Class Declarations

class LMCDevice : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(LMCDevice::Data Members) ENABLED START -----*/

//	Add your own data members
	protected:

		omni_mutex m_mutex;
		std::mt19937 m_randGenerator;
		Tango::DevLong attr_loggingLevelCentral_write;
		Tango::DevLong attr_loggingLevelElement_write;
		Tango::DevLong attr_loggingLevelStorage_write;
		Tango::DevLong attr_loggingLevelConsole_write;
	
		//Tango::DevString attr_loggingTargetCentral_write;
		//Tango::DevString attr_loggingTargetElement_write;
		//Tango::DevString attr_loggingTargetStorage_write;
		std::string attr_loggingTargetCentral_write;
		std::string attr_loggingTargetElement_write;
		std::string attr_loggingTargetStorage_write;
		

		Tango::DevBoolean attr_centralLoggerEnabled_write;
		Tango::DevBoolean	attr_elementLoggerEnabled_write;
		Tango::DevBoolean	attr_storageLoggerEnabled_write;
		//Tango::TangoAppender* m_elementLogAppender;
		//Tango::TangoAppender* m_centralLogAppender;

		std::vector<std::string> m_dynAttrList;
		std::vector<Utils_ns::DeviceAttr*> m_device_attr;

		//- yat image Dynamic Attribute
    yat4tango::DynamicAttributeManager* m_dam;

		//- Proxy manager
		Utils_ns::TangoProxyManager* m_proxyManager;

		//- Formula attr manager
		Utils_ns::FormulaManager* m_formulaManager;

		//- Event callback
		EventCallBack* m_eventCallBack;

		//- Proxy monitor task
		ProxyMonitorTask* m_proxyMonitorTask;

		//- Event handler task
		EventHandlerTask* m_eventHandlerTask;
			
		//- Task manager
		Utils_ns::TaskManager* m_taskManager;

		//- Task thread
		TaskThread* m_taskThread;

		//- Attribute randomizer thread
		AttrRandomizerThread* m_attrRandomizerThread;

		//- Flag to stop task thread
		bool m_stopTaskThreadFlag;
		
		//- Database device dev name
		std::string m_db_dev_name;		

		//- Timeout used to update event rate attribute
		float m_eventCounter;
		yat::Timer m_eventRateSamplingTimer;
		
		//- Exception counter
		float m_exceptionCounter;
		yat::Timer m_exceptionRateSamplingTimer;

/*----- PROTECTED REGION END -----*/	//	LMCDevice::Data Members

//	Device property data members
public:
	//	CentralLoggerEnabledDefault:	Enable central logging target
	Tango::DevBoolean	centralLoggerEnabledDefault;
	//	ElementLoggerEnabledDefault:	Enable element logging target
	Tango::DevBoolean	elementLoggerEnabledDefault;
	//	StorageLoggerEnabledDefault:	Enable log storage (e.g. logging to syslog)
	Tango::DevBoolean	storageLoggerEnabledDefault;
	//	LoggingTargetCentralDefault:	Pre-configured logging target CentralLogger DS
	string	loggingTargetCentralDefault;
	//	LoggingTargetElementDefault:	Pre-configured logging target ElementLogger DS
	string	loggingTargetElementDefault;
	//	LoggingTargetStorageDefault:	Pre-configured logging target for syslog
	string	loggingTargetStorageDefault;
	//	SkaLevel:	Indication of importance of the device in the SKA hierarchy 
	//  to support drill-down navigation: 1..6, with 1 highest
	Tango::DevShort	skaLevel;
	//	SyslogFacility:	LOG_USER: A miscellaneous user process
	//  LOG_MAIL: Mail
	//  LOG_DAEMON: A miscellaneous system daemon
	//  LOG_AUTH:  Security (authorization)
	//  LOG_SYSLOG: Syslog
	//  LOG_LPR: Central printer
	//  LOG_NEWS: Network news (e.g. Usenet)
	//  LOG_UUCP: UUCP
	//  LOG_CRON: Cron and At
	//  LOG_AUTHPRIV: Private security (authorization)
	//  LOG_FTP: Ftp server
	//  LOG_LOCAL0,1,2,3,4,5,6,7: Locally defined
	//  
	//  ``auth``: LOG_AUTH
	//  ``authpriv``: LOG_AUTHPRIV
	//  ``cron``: LOG_CRON 
	//  ``daemon``: LOG_DAEMON
	//  ``ftp``: LOG_FTP
	//  ``kern``: LOG_KERN
	//  ``lpr``: LOG_LPR
	//  ``mail``: LOG_MAIL
	//  ``mark``: INTERNAL_MARK
	//  ``news``: LOG_NEWS
	//  ``security``: LOG_AUTH,
	//  ``syslog``: LOG_SYSLOG
	//  ``user``: LOG_USER
	//  ``uucp``: LOG_UUCP
	//  ``local0``: LOG_LOCAL0
	//  ``local1``: LOG_LOCAL1 
	//  ``local2``: LOG_LOCAL2 
	//  ``local3``: LOG_LOCAL3 
	//  ``local4``: LOG_LOCAL4 
	//  ``local5``: LOG_LOCAL5 
	//  ``local6``: LOG_LOCAL6 
	//  ``local7``: LOG_LOCAL7
	string	syslogFacility;
	//	SyslogHost:	Hostname of syslog server used for log storage
	string	syslogHost;
	//	LoggingLevelCentralDefault:	Default logging level to Central logging target
	//  (0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)
	//  
	//  Default: 3
	Tango::DevLong	loggingLevelCentralDefault;
	//	LoggingLevelElementDefault:	Default logging level to Element logging target
	//  (0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)
	//  
	//  Default: 4
	Tango::DevLong	loggingLevelElementDefault;
	//	LoggingLevelStorageDefault:	Default logging level to Syslog logging target
	//  (0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)
	//  
	//  Default: 4
	Tango::DevLong	loggingLevelStorageDefault;
	//	ConfigFile:	String with full path to a XML file with device configuration
	//  (attributes & their properties)
	string	configFile;
	//	EnableConfigFromFile:	Configure device attribute from file
	Tango::DevBoolean	enableConfigFromFile;
	//	EnableDynAttrCleanup:	Enable/disable automatic cleanup of dynamical attributes created, 
	//  e.g. at device destroy all dynamical attributes created from
	//  config file are removed from the device.
	Tango::DevBoolean	enableDynAttrCleanup;
	//	EnableDynAttrRandomize:	Enable/disable randomization of dynamical attributes according
	//  to configured random model & parameters
	Tango::DevBoolean	enableDynAttrRandomize;
	//	DynAttrRandomizePeriod:	Period t (in ms) to be used for randomization of dynamical
	//  attributes (if enabled), e.g. attributes are randomized (and therefore)
	//  updated each t.
	Tango::DevULong	dynAttrRandomizePeriod;
	//	ProxyDevices:	Proxy device list
	vector<string>	proxyDevices;
	//	FormulaVarMaxTimeInterval:	Max time interval (in seconds) for an attribute value present in 
	//  attr formula after which 
	//  the formula is declared as `old` and relative formula 
	//  result attribute quality switched to INVALID
	Tango::DevLong	formulaVarMaxTimeInterval;
	//	EnableProxyMonitoring:	Enable periodic monitoring of registered proxies in device
	//  
	//  If enabled, a monitoring thread will be started and
	//  whenever a proxy is registered a corresponding 
	//  dyn attr is created in device with notation:
	//  
	//  proxyRunStatus_[domain_name]_[family_name]_[member_name]
	//  
	//  holding the monitoring status.
	Tango::DevBoolean	enableProxyMonitoring;
	//	ProxyMonitoringPeriod:	Period (in ms) used to monitor registered proxies.
	Tango::DevLong	proxyMonitoringPeriod;
	//	ProxyStatusAttrPollPeriod:	Polling period for proxy status attributes in ms
	Tango::DevLong	proxyStatusAttrPollPeriod;
	//	ProxyStatusAttrPeriodicEventPeriod:	Periodic event period for proxy status attributes in ms
	Tango::DevLong	proxyStatusAttrPeriodicEventPeriod;
	//	ProxyStatusAttrArchiveEventPeriod:	Archive event period for proxy status attributes in ms
	Tango::DevLong	proxyStatusAttrArchiveEventPeriod;
	//	ProxyTimeout:	Timeout (in s) after which a non responding proxy device is marked
	//  as down (in hard state)
	Tango::DevLong	proxyTimeout;
	//	EventSubscriptions:	List of event subscriptions to be performed for this device in
	//  the following format:
	//  
	//  [0]= full attr name 1
	//  [1]= event type 1
	//  ...
	//  [N]= full attr name N
	//  [N+1]= event type N
	vector<string>	eventSubscriptions;
	//	EventHandlers:	List of event handlers to be registered in device given in the following
	//  format:
	//  
	//  [0]: full attr name
	//  [1]: event type string
	//  [2]: name of event handler command
	//  [3]: execution delay (0=now)
	//  [4]: priority (0=LOW,1=MEDIUM,2=HIGH)
	//  ...
	//  [N]: ...
	//  [N+1]: ...
	//  [N+2]: ...
	//  [N+3]: ...
	//  [N+4]: ...
	//  
	//  Command handler name must exist in device otherwise registration
	//  fails.
	vector<string>	eventHandlers;
	//	MaxQueueableTask:	Maximum number of tasks that can be inserted in the task queue
	Tango::DevLong	maxQueueableTask;
	//	MaxTrackableTasks:	Maximum number of tasks that can be stored in cache list 
	//  (historical info).
	Tango::DevLong	maxTrackableTasks;
	//	TaskHistoryTimeDepth:	Max time interval (in seconds) used to maintain tasks in the task 
	//  list.
	Tango::DevLong	taskHistoryTimeDepth;
	//	DefaultTaskTimeout:	Default task timeout (in seconds) to be used in task manager
	Tango::DevLong	defaultTaskTimeout;
	//	TaskSequenceStatusAttrList:	List of sequence task status progress attribute names.
	vector<string>	taskSequenceStatusAttrList;
	//	TaskStatusAttrList:	List of asynch task status attr.
	//  
	//  NB: These are the attributes containing each task status progress
	//  info. Task sequence status is contained in attribute 
	//  names listed in the TaskSequenceAttrList property.
	vector<string>	taskStatusAttrList;
	//	EnableEventRateMonitoring:	Enable event rate monitoring
	Tango::DevBoolean	enableEventRateMonitoring;
	//	EnableLoggerInitPolling:	Enable/disable periodic logging system initialization. 
	//  This is to allow adding log target devices if they are not present 
	//  (e.g. because down) at device initialization.
	Tango::DevBoolean	enableLoggerInitPolling;
	//	LoggerInitPollPeriod:	Logging initialization polling period in ms.
	Tango::DevLong	loggerInitPollPeriod;
	//	EnableDevProxyInitPolling:	Enable/disable polling of proxy initialization & registration. 
	//  This is to handle down proxy at startup. In this case if the 
	//  initialization is not re-attempted that proxies will never be 
	//  registered in device.
	Tango::DevBoolean	enableDevProxyInitPolling;
	//	DevProxyInitPollPeriod:	
	Tango::DevLong	devProxyInitPollPeriod;
	//	EnableFwdAttrInitPolling:	
	Tango::DevBoolean	enableFwdAttrInitPolling;
	//	FwdAttrInitPollPeriod:	
	Tango::DevLong	fwdAttrInitPollPeriod;
	//	EnableFormulaAttrUpdatePolling:	Enable/disable update of formula attrs present in device.
	//  The update is needed to initialize the formula in case one/more 
	//  proxies  contained in the device were down at the startup.
	//  If initialization is succesful, the formula attr is evaluated to 
	//  update the quality status. If not done, otherwise, the formula attr is
	//  only computed when proxy events are received.
	//  
	//  You can turn off this flag if you don`t have formula attrs in your
	//  device.
	Tango::DevBoolean	enableFormulaAttrUpdatePolling;
	//	FormulaAttrUpdatePollPeriod:	
	Tango::DevLong	formulaAttrUpdatePollPeriod;
	//	EnableStatusAttrUpdatePolling:	
	Tango::DevBoolean	enableStatusAttrUpdatePolling;
	//	StatusAttrUpdatePollPeriod:	
	Tango::DevLong	statusAttrUpdatePollPeriod;
	//	EnableClearTaskPolling:	
	Tango::DevBoolean	enableClearTaskPolling;
	//	ClearTaskPollPeriod:	
	Tango::DevLong	clearTaskPollPeriod;
	//	EnableProxyStatusAttrCreation:	Enable proxy status attr creation
	Tango::DevBoolean	enableProxyStatusAttrCreation;
	//	EnableAutoAdminProxyRegistration:	Enable/disable automatic registration of admin device whenever
	//  a proxy registration is needed.
	Tango::DevBoolean	enableAutoAdminProxyRegistration;
	//	ProcessEventsInQueueThread:	If enabled the events received in the callback are moved to 
	//  the EventHandlerTask queue thread.
	Tango::DevBoolean	processEventsInQueueThread;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevLong	*attr_loggingLevelCentral_read;
	Tango::DevLong	*attr_loggingLevelElement_read;
	Tango::DevLong	*attr_loggingLevelStorage_read;
	Tango::DevLong	*attr_loggingLevelConsole_read;
	Tango::DevString	*attr_buildState_read;
	centralLoggerStatusEnum	*attr_centralLoggerStatus_read;
	elementLoggerStatusEnum	*attr_elementLoggerStatus_read;
	storageLoggerStatusEnum	*attr_storageLoggerStatus_read;
	Tango::DevFloat	*attr_eventRate_read;
	Tango::DevFloat	*attr_exceptionRate_read;
	fwdAttrInitStatusEnum	*attr_fwdAttrInitStatus_read;
	Tango::DevBoolean	*attr_centralLoggerEnabled_read;
	Tango::DevBoolean	*attr_elementLoggerEnabled_read;
	Tango::DevBoolean	*attr_storageLoggerEnabled_read;
	Tango::DevString	*attr_loggingTargetCentral_read;
	Tango::DevString	*attr_loggingTargetElement_read;
	Tango::DevString	*attr_loggingTargetStorage_read;
	Tango::DevBoolean	*attr_attrRandomizationEnabled_read;
	Tango::DevULong	*attr_attrRandomizationPeriod_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LMCDevice(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LMCDevice(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LMCDevice(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~LMCDevice() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LMCDevice::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : LMCDevice::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute loggingLevelCentral related methods
 *	Description: Current  logging level to Central logging target for this device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_loggingLevelCentral(Tango::Attribute &attr);
	virtual void write_loggingLevelCentral(Tango::WAttribute &attr);
	virtual bool is_loggingLevelCentral_allowed(Tango::AttReqType type);
/**
 *	Attribute loggingLevelElement related methods
 *	Description: Current  logging level to Element logging target for this device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_loggingLevelElement(Tango::Attribute &attr);
	virtual void write_loggingLevelElement(Tango::WAttribute &attr);
	virtual bool is_loggingLevelElement_allowed(Tango::AttReqType type);
/**
 *	Attribute loggingLevelStorage related methods
 *	Description: Current  logging level to Syslog for this device
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_loggingLevelStorage(Tango::Attribute &attr);
	virtual void write_loggingLevelStorage(Tango::WAttribute &attr);
	virtual bool is_loggingLevelStorage_allowed(Tango::AttReqType type);
/**
 *	Attribute loggingLevelConsole related methods
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_loggingLevelConsole(Tango::Attribute &attr);
	virtual void write_loggingLevelConsole(Tango::WAttribute &attr);
	virtual bool is_loggingLevelConsole_allowed(Tango::AttReqType type);
/**
 *	Attribute buildState related methods
 *	Description: Build state of this device
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_buildState(Tango::Attribute &attr);
	virtual bool is_buildState_allowed(Tango::AttReqType type);
/**
 *	Attribute centralLoggerStatus related methods
 *	Description: Central logging target status. Possible values are:
 *               
 *               UNKNOWN: Typically set at device startup
 *               DISABLED: When central logging target is disabled (see device properties)
 *               OK: When central logging target is initialized with success
 *               FAILED: When central logging target initialization fails, e.g. logger is offline or proxy name invalid 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_centralLoggerStatus(Tango::Attribute &attr);
	virtual bool is_centralLoggerStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute elementLoggerStatus related methods
 *	Description: Element logging target status. Possible values are:
 *               
 *               UNKNOWN: Typically set at device startup
 *               DISABLED: When element logging target is disabled (see device properties)
 *               OK: When element logging target is initialized with success
 *               FAILED: When element logging target initialization fails, e.g. logger is offline or proxy name invalid 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_elementLoggerStatus(Tango::Attribute &attr);
	virtual bool is_elementLoggerStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute storageLoggerStatus related methods
 *	Description: Storage logging target status. Possible values are:
 *               
 *               UNKNOWN: Typically set at device startup
 *               DISABLED: When storage logging target is disabled (see device properties)
 *               OK: When storage logging target is initialized with success
 *               FAILED: When storage logging target initialization fails, e.g. logger is offline or proxy name invalid 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_storageLoggerStatus(Tango::Attribute &attr);
	virtual bool is_storageLoggerStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute eventRate related methods
 *	Description: Rate in Hz of events received from the device.
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_eventRate(Tango::Attribute &attr);
	virtual bool is_eventRate_allowed(Tango::AttReqType type);
/**
 *	Attribute exceptionRate related methods
 *	Description: Rate of internal exceptions thrown in the device
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_exceptionRate(Tango::Attribute &attr);
	virtual bool is_exceptionRate_allowed(Tango::AttReqType type);
/**
 *	Attribute fwdAttrInitStatus related methods
 *	Description: Initialization status of fwd attributes in device. 
 *               
 *               UNKNOWN: typically at startup
 *               OK: All fwd attributes initialized or no fwd attributes present in device
 *               FAILED: One/more fwd attributes not initialized yet (e.g. root device down)
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_fwdAttrInitStatus(Tango::Attribute &attr);
	virtual bool is_fwdAttrInitStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute centralLoggerEnabled related methods
 *	Description: Enable/disable the central logger in device.
 *               NB: Attribute is not persisted after device restart.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_centralLoggerEnabled(Tango::Attribute &attr);
	virtual void write_centralLoggerEnabled(Tango::WAttribute &attr);
	virtual bool is_centralLoggerEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute elementLoggerEnabled related methods
 *	Description: Enable/disable the central logger in device.
 *               NB: Attribute is not persisted after device restart.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_elementLoggerEnabled(Tango::Attribute &attr);
	virtual void write_elementLoggerEnabled(Tango::WAttribute &attr);
	virtual bool is_elementLoggerEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute storageLoggerEnabled related methods
 *	Description: Enable/disable the storage logger in device.
 *               NB: Attribute is not persisted after device restart.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_storageLoggerEnabled(Tango::Attribute &attr);
	virtual void write_storageLoggerEnabled(Tango::WAttribute &attr);
	virtual bool is_storageLoggerEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute loggingTargetCentral related methods
 *	Description: Current Central logging target
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_loggingTargetCentral(Tango::Attribute &attr);
	virtual void write_loggingTargetCentral(Tango::WAttribute &attr);
	virtual bool is_loggingTargetCentral_allowed(Tango::AttReqType type);
/**
 *	Attribute loggingTargetElement related methods
 *	Description: Current Element logging target
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_loggingTargetElement(Tango::Attribute &attr);
	virtual void write_loggingTargetElement(Tango::WAttribute &attr);
	virtual bool is_loggingTargetElement_allowed(Tango::AttReqType type);
/**
 *	Attribute loggingTargetStorage related methods
 *	Description: Current storage logging target
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_loggingTargetStorage(Tango::Attribute &attr);
	virtual void write_loggingTargetStorage(Tango::WAttribute &attr);
	virtual bool is_loggingTargetStorage_allowed(Tango::AttReqType type);
/**
 *	Attribute attrRandomizationEnabled related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_attrRandomizationEnabled(Tango::Attribute &attr);
	virtual void write_attrRandomizationEnabled(Tango::WAttribute &attr);
	virtual bool is_attrRandomizationEnabled_allowed(Tango::AttReqType type);
/**
 *	Attribute attrRandomizationPeriod related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_attrRandomizationPeriod(Tango::Attribute &attr);
	virtual void write_attrRandomizationPeriod(Tango::WAttribute &attr);
	virtual bool is_attrRandomizationPeriod_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : LMCDevice::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command InitializeLoggers related method
	 *	Description: Initialize loggers
	 *
	 */
	virtual void initialize_loggers();
	virtual bool is_InitializeLoggers_allowed(const CORBA::Any &any);
	/**
	 *	Command InitializeFwdAttrs related method
	 *	Description: Initialize fwd attributes. 
	 *               Fwd attributes are dynamically added at device startup. 
	 *               However when the root device server is down the initialization
	 *               fails. This command is supposed to be run periodically to
	 *               ensure fwd are created if the root device comes online.
	 *
	 */
	virtual void initialize_fwd_attrs();
	virtual bool is_InitializeFwdAttrs_allowed(const CORBA::Any &any);
	/**
	 *	Command RandomizeDynAttrs related method
	 *	Description: Randomize dynamical attribute (if enabled)
	 *
	 */
	virtual void randomize_dyn_attrs();
	virtual bool is_RandomizeDynAttrs_allowed(const CORBA::Any &any);
	/**
	 *	Command InitializeDevProxies related method
	 *	Description: Initialize device proxies. This command is periodically polled.
	 *
	 */
	virtual void initialize_dev_proxies();
	virtual bool is_InitializeDevProxies_allowed(const CORBA::Any &any);
	/**
	 *	Command GetRegisteredProxies related method
	 *	Description: Return list of device proxies registered in device
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarStringArray *get_registered_proxies();
	virtual bool is_GetRegisteredProxies_allowed(const CORBA::Any &any);
	/**
	 *	Command GetRegisteredEvents related method
	 *	Description: Get list of registered events in device
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarStringArray *get_registered_events();
	virtual bool is_GetRegisteredEvents_allowed(const CORBA::Any &any);
	/**
	 *	Command GetRegisteredFormulas related method
	 *	Description: Returns a list of attr formulas currently registered in 
	 *               device and expressed in json format.
	 *
	 *	@returns The list of attr formulas currently registered in device 
	 *           and expressed in json format.
	 */
	virtual Tango::DevVarStringArray *get_registered_formulas();
	virtual bool is_GetRegisteredFormulas_allowed(const CORBA::Any &any);
	/**
	 *	Command GetInitializedFormulas related method
	 *	Description: 
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarStringArray *get_initialized_formulas();
	virtual bool is_GetInitializedFormulas_allowed(const CORBA::Any &any);
	/**
	 *	Command GetNRunningTasks related method
	 *	Description: Get number of running tasks present in list
	 *
	 *	@returns The number of running tasks
	 */
	virtual Tango::DevLong get_nrunning_tasks();
	virtual bool is_GetNRunningTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command GetNQueuedTasks related method
	 *	Description: Get the number of tasks currently present in the queue
	 *               (not in the list)
	 *               
	 *               NB: The list contains a cache of lately performed tasks and
	 *               therefore stores also completed, running, failed tasks.
	 *               The queue contains typically only IDLE tasks.
	 *
	 *	@returns The number of queued tasks
	 */
	virtual Tango::DevLong get_nqueued_tasks();
	virtual bool is_GetNQueuedTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command GetNIdleTasks related method
	 *	Description: Get number of tasks in IDLE state present in list
	 *
	 *	@returns 
	 */
	virtual Tango::DevLong get_nidle_tasks();
	virtual bool is_GetNIdleTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command GetNTasks related method
	 *	Description: Get the number of tasks currently present in the list
	 *               (not in the queue)
	 *               
	 *               NB: The list contains a cache of lately performed tasks and
	 *               therefore stores also completed, running, failed tasks.
	 *               The queue contains typically only IDLE tasks.
	 *
	 *	@returns Number of tasks
	 */
	virtual Tango::DevLong get_ntasks();
	virtual bool is_GetNTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command GetNFailedTasks related method
	 *	Description: Get the number of tasks in FAILED state present in the list
	 *
	 *	@returns 
	 */
	virtual Tango::DevLong get_nfailed_tasks();
	virtual bool is_GetNFailedTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command GetNTotFailedTasks related method
	 *	Description: Get the number of total tasks FAILED (including also 
	 *               EXPIRED and ABORTED)
	 *
	 *	@returns 
	 */
	virtual Tango::DevLong get_ntot_failed_tasks();
	virtual bool is_GetNTotFailedTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command IsTaskQuotaReached related method
	 *	Description: Return true if task quota is reached in device and 
	 *               false otherwise.
	 *               Task quota parameters can be modified in device properties.
	 *
	 *	@returns The task quota flag
	 */
	virtual Tango::DevBoolean is_task_quota_reached();
	virtual bool is_IsTaskQuotaReached_allowed(const CORBA::Any &any);
	/**
	 *	Command FlushTaskQueue related method
	 *	Description: Remove all tasks from the queue
	 *
	 */
	virtual void flush_task_queue();
	virtual bool is_FlushTaskQueue_allowed(const CORBA::Any &any);
	/**
	 *	Command GetQueuedTaskInfo related method
	 *	Description: Return the queued task info
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarStringArray *get_queued_task_info();
	virtual bool is_GetQueuedTaskInfo_allowed(const CORBA::Any &any);
	/**
	 *	Command GetTaskInfo related method
	 *	Description: Return the task info for tasks present in the list
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarStringArray *get_task_info();
	virtual bool is_GetTaskInfo_allowed(const CORBA::Any &any);
	/**
	 *	Command ClearTasks related method
	 *	Description: Clear tasks older than the specified time depth property
	 *
	 */
	virtual void clear_tasks();
	virtual bool is_ClearTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command UpdateFormulaAttrs related method
	 *	Description: Initialize and update attr formula registered in device. 
	 *               This is needed since device proxies specified in attr formula
	 *               may be offline when the formula is initially registered and 
	 *               initialized. This command is periodically executed to ensure
	 *               that when proxies are online the formula is initialized.
	 *               It is also used to trigger switching of formula attr quality
	 *               factor to INVALID when one/more formula vars are old (e.g.
	 *               proxy down or events not received).
	 *
	 */
	virtual void update_formula_attrs();
	virtual bool is_UpdateFormulaAttrs_allowed(const CORBA::Any &any);
	/**
	 *	Command UpdateStatusAttrs related method
	 *	Description: Update status attribute values from task manager info
	 *
	 */
	virtual void update_status_attrs();
	virtual bool is_UpdateStatusAttrs_allowed(const CORBA::Any &any);
	/**
	 *	Command MonitorProxies related method
	 *	Description: Monitor list of registered proxies
	 *
	 */
	virtual void monitor_proxies();
	virtual bool is_MonitorProxies_allowed(const CORBA::Any &any);
	/**
	 *	Command RevokeTask related method
	 *	Description: Find all tasks with matching name and remove
	 *               them from the queue. 
	 *               Set removed tasks (IDLE status) to CANCELED and update
	 *               corresponding task sequence status.
	 *
	 *	@param argin Name of task to be canceled
	 */
	virtual void revoke_task(Tango::DevString argin);
	virtual bool is_RevokeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command RevokeTaskSequence related method
	 *	Description: Find all sequence tasks with matching name and remove
	 *               tasks belonging to the sequence from the queue. 
	 *               Set removed tasks (IDLE status) to CANCELED.
	 *
	 *	@param argin Name of task sequence to be revoked.
	 */
	virtual void revoke_task_sequence(Tango::DevString argin);
	virtual bool is_RevokeTaskSequence_allowed(const CORBA::Any &any);
	/**
	 *	Command GetFormulaData related method
	 *	Description: Find formula with given arg name and return formula var data
	 *               encoded in json string format.
	 *
	 *	@param argin Formula attr name
	 *	@returns Formula data encoded in json string
	 */
	virtual Tango::DevString get_formula_data(Tango::DevString argin);
	virtual bool is_GetFormulaData_allowed(const CORBA::Any &any);
	/**
	 *	Command SendTestLogMsg related method
	 *	Description: Generate a log in the device according to the given level.
	 *               Used for testing purposes.
	 *
	 *	@param argin Long arg
	 *               [0]: Level of log message
	 *               (0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)
	 *               
	 *               String arg
	 *               [0]: log message
	 */
	virtual void send_test_log_msg(const Tango::DevVarLongStringArray *argin);
	virtual bool is_SendTestLogMsg_allowed(const CORBA::Any &any);
	/**
	 *	Command ClearTaskHistory related method
	 *	Description: Removed all tasks present in the list (including RUNNING
	 *               tasks).
	 *
	 */
	virtual void clear_task_history();
	virtual bool is_ClearTaskHistory_allowed(const CORBA::Any &any);
	/**
	 *	Command GetLogAppenderInfo related method
	 *	Description: Return list of all log appenders with log levels
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *get_log_appender_info();
	virtual bool is_GetLogAppenderInfo_allowed(const CORBA::Any &any);

//	Dynamic commands methods
public:
	/**
	 *	Command dummyDynCmd related method
	 *	Description: 
	 *
	 */
	virtual void dummy_dyn_cmd(Tango::Command &command);
	virtual bool is_dummyDynCmd_allowed(const CORBA::Any &any);
	void add_dummyDynCmd_dynamic_command(string cmdname, bool device);
	void remove_dummyDynCmd_dynamic_command(string cmdname);

	//--------------------------------------------------------
	/**
	 *	Method      : LMCDevice::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(LMCDevice::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

	public:

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::HasDynAttrManagerInstance()
	 	*	Description : Check if dyn attr manager is instantiated
	 	*/
		//--------------------------------------------------------
		bool HasDynAttrManagerInstance() {return m_dam;}
		
	protected:
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitLogger()
	 	*	Description : Internal method to initialize loggers for device
	 	*/
		//--------------------------------------------------------
		//virtual int InitLogger(bool setLogLevels=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitLoggers()
	 	*	Description : Internal method to initialize loggers for device
	 	*/
		//--------------------------------------------------------
		virtual int InitLoggers(bool setLogLevels=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitLoggerPars()
	 	*	Description : Internal method to initialize logger parameters (level, target, enabled flag) for device at startup
	 	*/
		//--------------------------------------------------------
		virtual void InitLoggerPars();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitCentralLogger()
	 	*	Description : Internal method to initialize central logger for device
	 	*/
		//--------------------------------------------------------
		virtual void InitCentralLogger(log4tango::Logger* logger,bool setLogLevels=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitElementLogger()
	 	*	Description : Internal method to initialize Element logger for device
	 	*/
		//--------------------------------------------------------
		virtual void InitElementLogger(log4tango::Logger* logger,bool setLogLevels=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitStorageLogger()
	 	*	Description : Internal method to initialize storage logger for device
	 	*/
		//--------------------------------------------------------
		virtual void InitStorageLogger();
	
		
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::EnableCentralLogger()
	 	*	Description : Internal method to enable central logger for device
	 	*/
		//--------------------------------------------------------
		virtual void EnableCentralLogger();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::DisableCentralLogger()
	 	*	Description : Internal method to disable central logger for device
	 	*/
		//--------------------------------------------------------
		virtual void DisableCentralLogger();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::EnableElementLogger()
	 	*	Description : Internal method to enable Element logger for device
	 	*/
		//--------------------------------------------------------
		virtual void EnableElementLogger();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::DisableElementLogger()
	 	*	Description : Internal method to disable Element logger for device
	 	*/
		//--------------------------------------------------------
		virtual void DisableElementLogger();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::EnableStorageLogger()
	 	*	Description : Internal method to enable storage logger for device
	 	*/
		//--------------------------------------------------------
		virtual void EnableStorageLogger();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::DisableStorageLogger()
	 	*	Description : Internal method to disable storage logger for device
	 	*/
		//--------------------------------------------------------
		virtual void DisableStorageLogger();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetAppenderLogLevel()
	 	*	Description : Internal method to set appender log level
	 	*/
		//--------------------------------------------------------
		virtual int SetAppenderLogLevel(std::string appender_name,Tango::DevLong log_level);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::GetAppenderLogLevel()
	 	*	Description : Internal method to set appender log level
	 	*/
		//--------------------------------------------------------
		virtual int GetAppenderLogLevel(Tango::DevLong& log_level,std::string appender_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetMainLoggerLevel()
	 	*	Description : Internal method to set main logger level. This equalize all appenders, so call it before appender set log levels.
	 	*/
		//--------------------------------------------------------
		virtual int SetMainLoggerLevel(log4tango::Logger* logger=0);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RemoveZombieLogAppenders()
	 	*	Description : Loop over all appenders and remove non valid ones
	 	*/
		//--------------------------------------------------------
		virtual void RemoveZombieLogAppenders(log4tango::Logger* logger=0);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitMemorizedAttrs()
	 	*	Description : Initialize all memorized attributes
	 	*/
		//--------------------------------------------------------
		virtual void InitMemorizedAttrs();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitMemorizedAttr()
	 	*	Description : Initialize a memorized attribute. If no memorized value present set attr to value stored in default_prop_name (if given).
	 	*/
		//--------------------------------------------------------
		virtual void InitMemorizedAttr(std::string& attr_name);	
			
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitMemorizedAttr()
	 	*	Description : Initialize a memorized attribute
	 	*/
		//--------------------------------------------------------
		template<typename T> 
		void InitMemorizedAttrFromDbDatum(Tango::DbDatum& db_datum,Tango::WAttribute& wattr,std::string attr_name,bool hasMemorizedValue,std::string attr_prop_name);
			

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitDynAttrFromGeneratorProps()
	 	*	Description : Init dyn attr from generator properties in DB 
	 	*/
		//--------------------------------------------------------
		template<typename T>
		int InitDynAttrFromGeneratorProps(Utils_ns::AttrDataPtr attr_data,Utils_ns::DeviceAttr* device_attr,std::string attr_name);
		
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitDynSpectrumAttrFromGeneratorProps()
	 	*	Description : Init dyn spectrum attr from generator properties in DB 
	 	*/
		//--------------------------------------------------------
		template<typename T>
		int InitDynSpectrumAttrFromGeneratorProps(Utils_ns::AttrDataPtr attr_data_ptr,Utils_ns::DeviceAttr* device_attr,std::string attr_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::dyn_attr_read_cb()
	 	*	Description : Read callback for dynamic attributes
	 	*/
		//--------------------------------------------------------
		void dyn_attr_read_cb(yat4tango::DynamicAttributeReadCallbackData& cbd);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::dyn_attr_write_cb()
	 	*	Description : Write callback for dynamic attributes
	 	*/
		//--------------------------------------------------------
		void dyn_attr_write_cb(yat4tango::DynamicAttributeWriteCallbackData& cbd);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitCmdAttrStateMachine()
	 	*	Description : Initialize cmd & attr state machine
	 	*/
		//--------------------------------------------------------
		virtual int InitCmdAttrStateMachine(){return 0;}

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::AddDynAttrs()
	 	*	Description : Add dynamic attributes in device
	 	*/
		//--------------------------------------------------------
		virtual int AddDynAttrs();
		
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::AddDynAttr()
	 	*	Description : Add a dynamic attribute in device
	 	*/
		//--------------------------------------------------------
		virtual void AddDynAttr(Utils_ns::DeviceAttr* device_attr);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::AddDynFwdAttr()
	 	*	Description : Add a fwd dynamic attribute in device
	 	*/
		//--------------------------------------------------------
		virtual void AddDynFwdAttr(Utils_ns::DeviceAttr* device_attr,bool resetAttr=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::ConfigureAttr()
	 	*	Description : Configure attributes dynamically from a config file
	 	*/
		//--------------------------------------------------------
		virtual void ConfigureAttr(std::string configFile);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitDynAttrValue()
	 	*	Description : Initialize a given dyn attribute value from property set in DB
	 	*/
		//--------------------------------------------------------
		virtual void InitDynAttrValue(std::string& attr_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitDynAttrValues()
	 	*	Description : Initialize all dyn attribute values from property set in DB
	 	*/
		//--------------------------------------------------------
		virtual void InitDynAttrValues();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::CreateDynScalarAttrInfo()
	 	*	Description : Create a dyn attribute info
	 	*/
		//--------------------------------------------------------
		template<typename T>
		int CreateDynAttrInfo(yat4tango::DynamicAttributeInfo& dai,Utils_ns::DeviceAttr* device_attr,Tango::MultiAttrProp<T>* multi_attr_prop);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::CreateAndInitDynAttr()
	 	*	Description : Create and initialize a dyn attribute 
	 	*/
		//--------------------------------------------------------
		template<typename T,typename K>
		void CreateAndInitDynAttr(Utils_ns::DeviceAttr* device_attr);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetScalarDynAttr()
	 	*	Description : Set dynamic attribute value from yat4tango
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetScalarDynAttr(yat4tango::DynamicAttribute* dya,Tango::Attribute* tga);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetSpectrumDynAttr()
	 	*	Description : Set spectrum dynamic attribute value from yat4tango
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetSpectrumDynAttr(yat4tango::DynamicAttribute* dya,Tango::Attribute* tga);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetScalarDynWAttr()
	 	*	Description : Set dynamic writable attribute value from yat4tango
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetScalarDynWAttr(yat4tango::DynamicAttribute* dya,Tango::WAttribute* tga);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetSpectrumDynWAttr()
	 	*	Description : Set spectrum writable dynamic attribute value from yat4tango
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetSpectrumDynWAttr(yat4tango::DynamicAttribute* dya,Tango::WAttribute* tga);



		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitDynAttrValue()
	 	*	Description : Set dynamic attribute value by name
	 	*/
		//--------------------------------------------------------
		template<typename T>
		int SetDynAttrValue(T& attr_value,std::string attr_name,Tango::AttrQuality attr_quality=Tango::ATTR_VALID,bool emit_event=false);
		
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetSMDynAttrValue()
	 	*	Description : Set dynamic attribute value by name after checking attr transition allowance (for scalar attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		int SetSMDynAttrValue(T& attr_value,std::string attr_name,T* attr_value_fallback=0,Tango::AttrQuality attr_quality=Tango::ATTR_VALID,bool emit_event=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetDynAttrValue()
	 	*	Description : Set dynamic attribute value by name (for spectrum attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		int SetDynAttrValue(std::vector<T>& attr_value,std::string attr_name,Tango::AttrQuality attr_quality=Tango::ATTR_VALID,bool emit_event=false);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetDynAttrValueInManager()
	 	*	Description : Set dynamic attribute value by name in manager (for scalar attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetDynAttrValueInManager(T& attr_value,std::string attr_name,Tango::AttrQuality attr_quality=Tango::ATTR_VALID);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetDynAttrValueInManager()
	 	*	Description : Set dynamic attribute value by name in manager (for spectrum attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetDynAttrValueInManager(std::vector<T>& attr_value,std::string attr_name,Tango::AttrQuality attr_quality=Tango::ATTR_VALID);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetDynAttrSafeValueInManager()
	 	*	Description : Set dynamic attribute safe value by name in manager (for scalar attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetDynAttrSafeValueInManager(T& attr_safe_value_set,std::string attr_name,bool changeAttrQuality=false,Tango::AttrQuality attr_quality=Tango::ATTR_VALID);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetDynAttrSafeValueInManager()
	 	*	Description : Set dynamic attribute safe value by name in manager (for spectrum attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetDynAttrSafeValueInManager(std::vector<T>& attr_safe_value_set,std::string attr_name,bool changeAttrQuality=false,Tango::AttrQuality attr_quality=Tango::ATTR_VALID);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetWAttrValue()
	 	*	Description : Set write value in device WAttribute (for scalar attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetWAttrValue(T& attr_value,std::string attr_name,Tango::AttrQuality attr_quality,bool isMemorized=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetWAttrValue()
	 	*	Description : Set write value in device WAttribute (for spectrum attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetWAttrValue(std::vector<T>& attr_value,std::string attr_name,Tango::AttrQuality attr_quality,bool isMemorized=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::PushUserEvent()
	 	*	Description : Push a user event in device (for scalar attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void PushUserEvent(T& attr_value,std::string attr_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::PushUserEvent()
	 	*	Description : Push a user event in device (for spectrum attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void PushUserEvent(std::vector<T>& attr_value,std::string attr_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetScalarDynAttrValueFromDbDatum()
	 	*	Description : Set scalar dyn attr value from property set in DB
	 	*/
		//--------------------------------------------------------
		template<typename T,typename K>
		int SetScalarDynAttrValueFromDbDatum(Tango::DbDatum& db_datum,std::string& attr_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetSpectrumDynAttrValueFromDbDatum()
	 	*	Description : Set spectrum dyn attr value from property set in DB
	 	*/
		//--------------------------------------------------------
		template<typename T,typename K>
		int SetSpectrumDynAttrValueFromDbDatum(Tango::DbDatum& db_datum,std::string& attr_name,long data_size);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetDynAttrValueFromDbDatum()
	 	*	Description : Set dyn attr value from property set in DB
	 	*/
		//--------------------------------------------------------
		virtual void SetDynAttrValueFromDbDatum(Tango::DbDatum& db_datum,std::string& attr_name,long data_type,Tango::AttrDataFormat data_format,long data_size=1);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetScalarDynAttrToSafeValue()
	 	*	Description : Set scalar dyn attr value to stored safe value
	 	*/
		//--------------------------------------------------------	
		template<typename T>
		void SetScalarDynAttrToSafeValue(std::string attr_name,bool changeAttrQuality=false,Tango::AttrQuality attr_quality=Tango::ATTR_VALID,bool emit_event=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetSpectrumDynAttrToSafeValue()
	 	*	Description : Set spectrum dyn attr value to stored safe value
	 	*/
		//--------------------------------------------------------	
		template<typename T>
		void SetSpectrumDynAttrToSafeValue(std::string attr_name,bool changeAttrQuality=false,Tango::AttrQuality attr_quality=Tango::ATTR_VALID,bool emit_event=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetDynAttrToSafeValue()
	 	*	Description : Set dyn attr value to stored safe value
	 	*/
		//--------------------------------------------------------
		virtual int SetDynAttrToSafeValue(std::string attr_name,bool changeAttrQuality=false,Tango::AttrQuality attr_quality=Tango::ATTR_VALID,bool emit_event=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::GetDynAttrValue()
	 	*	Description : Get dynamic attribute value by name (for scalar attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		int GetDynAttrValue(T& attr_value,std::string attr_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::GetDynAttrValue()
	 	*	Description : Get dynamic attribute value by name (for spectrum attrs)
	 	*/
		//--------------------------------------------------------
		template<typename T>
		int GetDynAttrValue(std::vector<T>& attr_value,std::string attr_name);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RandomizeDynAttrValues()
	 	*	Description : Randomize dyn attr values according to generation property set in DB
	 	*/
		//--------------------------------------------------------
		virtual void RandomizeDynAttrValues();


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RandomizeDynAttrValue()
	 	*	Description : Randomize dyn attr value according to generation property set in DB
	 	*/
		//--------------------------------------------------------
		virtual int RandomizeDynAttrValue(std::string& attr_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RandomizeScalarDynAttrUniform()
	 	*	Description : Randomize scalar dyn attr value according to a uniform model
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void RandomizeScalarDynAttrUniform(Tango::DbData& genModelParData,std::string& attr_name,long data_type);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RandomizeSpectrumDynAttrUniform()
	 	*	Description : Randomize spectrum dyn attr value according to a uniform model
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void RandomizeSpectrumDynAttrUniform(Tango::DbData& genModelParData,std::string& attr_name,long data_type,long data_size);

		
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RandomizeDynAttrUniform()
	 	*	Description : Randomize dyn attr value according to a uniform model
	 	*/
		//--------------------------------------------------------
		virtual int RandomizeDynAttrUniform(Tango::DbData& genModelParData,std::string& attr_name,long data_type,Tango::AttrDataFormat data_format,long data_size=1);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RandomizeScalarDynAttrGaussian()
	 	*	Description : Randomize scalar dyn attr value according to a gaussian model
	 	*/
		//--------------------------------------------------------	
		template<typename T>
		void RandomizeScalarDynAttrGaussian(Tango::DbData& genModelParData,std::string& attr_name,long data_type);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RandomizeSpectrumDynAttrGaussian()
	 	*	Description : Randomize spectrum dyn attr value according to a gaussian model
	 	*/
		//--------------------------------------------------------	
		template<typename T>
		void RandomizeSpectrumDynAttrGaussian(Tango::DbData& genModelParData,std::string& attr_name,long data_type,long data_size);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RandomizeDynAttrGaussian()
	 	*	Description : Randomize dyn attr value according to a gaussian model
	 	*/
		//--------------------------------------------------------
		virtual int RandomizeDynAttrGaussian(Tango::DbData& genModelParData,std::string& attr_name,long data_type,Tango::AttrDataFormat data_format,long data_size=1);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RandomizeDynAttrDiscrete()
	 	*	Description : Randomize dyn attr value according to a discrete model
	 	*/
		//--------------------------------------------------------
		virtual int RandomizeDynAttrDiscrete(Tango::DbData& genModelParData,std::string& attr_name,long data_type,Tango::AttrDataFormat data_format);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::IsCmdAllowed()
	 	*	Description : Check if command is allowed with a given attr value
	 	*/
		//--------------------------------------------------------
		template<typename T>
		bool IsCmdAllowed(std::string cmd_name,std::string attr_name,T attr_value,bool check_cmd=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::CheckIfCmdIsAllowed()
	 	*	Description : Check if command is allowed for a given attr name
	 	*/
		//--------------------------------------------------------
		template<typename T> 
		bool CheckIfCmdIsAllowed(std::string cmd_name,std::string attr_name,long data_type);
	
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::CheckIfCmdIsAllowed()
	 	*	Description : Check if command is allowed for a given attr name
	 	*/
		//--------------------------------------------------------
		virtual bool CheckIfCmdIsAllowed(std::string cmd_name,std::string attr_name,bool check_cmd=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::IsCmdAllowed()
	 	*	Description : Check if command is allowed according to registered rules
	 	*/
		//--------------------------------------------------------
		virtual void IsCmdAllowed(std::string fcn_name,bool check_cmd=true);



		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::CheckIfAttrReadIsAllowed()
	 	*	Description : Check if attr read is allowed for a given sm attr name
	 	*/
		//--------------------------------------------------------
		template<typename T> 
		bool CheckIfAttrReadIsAllowed(std::string attr_name,std::string sm_attr_name,long data_type);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::CheckIfAttrReadIsAllowed()
	 	*	Description : Check if attr read is allowed for a given sm attr name
	 	*/
		//--------------------------------------------------------
		virtual bool CheckIfAttrReadIsAllowed(std::string attr_name,std::string sm_attr_name);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::IsAttrReadAllowed()
	 	*	Description : Check if attribute READ operation is allowed according to registered rules
	 	*/
		//--------------------------------------------------------
		virtual void IsAttrReadAllowed(std::string attr_name,bool check=true);
		

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::CheckIfAttrWriteIsAllowed()
	 	*	Description : Check if attr write is allowed for a given sm attr name
	 	*/
		//--------------------------------------------------------
		template<typename T> 
		bool CheckIfAttrWriteIsAllowed(std::string attr_name,std::string sm_attr_name,long data_type);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::CheckIfAttrWriteIsAllowed()
	 	*	Description : Check if attr write is allowed for a given sm attr name
	 	*/
		//--------------------------------------------------------
		virtual bool CheckIfAttrWriteIsAllowed(std::string attr_name,std::string sm_attr_name);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::IsAttrWriteAllowed()
	 	*	Description : Check if attribute WRITE operation is allowed according to registered rules
	 	*/
		//--------------------------------------------------------
		virtual void IsAttrWriteAllowed(std::string attr_name,bool check=true);
		

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::ExecuteAttrWriteActions()
	 	*	Description : Execute attr write registered pre-actions
	 	*/
		//--------------------------------------------------------
		virtual void ExecuteAttrWriteActions(std::string attr_name,bool preaction,bool check=true);
	
		
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::IsAttrAllowed()
	 	*	Description : Check if an attribute transition is allowed with a given attr value
	 	*/
		//--------------------------------------------------------
		template<typename T> 
		bool IsAttrAllowed(std::string attr_name,T attr_value_current,T attr_value_new,bool check=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::IsCmdAttrAllowed()
	 	*	Description : Check if a command and an attribute transition is allowed with a given attr value
	 	*/
		//--------------------------------------------------------
		template<typename T> 
		int IsCmdAttrAllowed(std::string cmd_name,std::string attr_name,T* attr_value_new=0,bool check=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::AddCmdRule()
	 	*	Description : Add a cmd state machine rule with a generic scalar attribute
	 	*/
		//--------------------------------------------------------
		//template<typename T>
		//int AddCmdRule(std::string cmd_name,std::string attr_name,std::vector<T> attr_values,bool check=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::AddCmdRule()
	 	*	Description : Add a cmd state machine rule with a generic scalar attribute
	 	*/
		//--------------------------------------------------------
		//template<typename T>
		//int AddAttrRule(std::string attr_name,T attr_value,std::vector<T> attr_values,bool check=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitDevProxies()
	 	*	Description : Initialize device proxies
	 	*/
		//--------------------------------------------------------
		virtual int InitDevProxies();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::HandleEvent()
	 	*	Description : Handle event received in callback
	 	*/
		//--------------------------------------------------------
		virtual int HandleEvent(Tango::EventData* event_data);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::ExecuteEventCmdHandlers()
	 	*	Description : Execute event cmd handlers in sequence
	 	*/
		//--------------------------------------------------------
		virtual int ExecuteEventCmdHandlers(Utils_ns::EvtSubscriptionDataPtr evt_sub_ptr,Tango::EventData* event_data);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::ProcessEventHandlerResponse()
	 	*	Description : Process response returned by cmd handler
	 	*/
		//--------------------------------------------------------
		virtual int ProcessEventHandlerResponse(std::string cmd_name,const CORBA::Any& handler_response){return 0;}


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::DoEventSubscriptionRegistration()
	 	*	Description : Register device proxies to be used (Note non-virtual, this base class method is always executed by inherited device)
	 	*/
		//--------------------------------------------------------
		int DoEventSubscriptionRegistration();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RegisterEventSubscriptions()
	 	*	Description : Register event subscriptions for device proxies (TO BE OVERRIDDEN IN DERIVED DEVICES)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterEventSubscriptions() {return 0;}


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::DoProxyRegistration()
	 	*	Description : Register device proxies to be used (Note non-virtual, this base class method is always executed by inherited device)
	 	*/
		//--------------------------------------------------------
		int DoProxyRegistration();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RegisterProxies()
	 	*	Description : Register device proxies to be used (TO BE OVERRIDDEN IN DERIVED DEVICES)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterProxies() {return 0;}

	
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::DoEventHandlersRegistration()
	 	*	Description : Register handler commands to be inkoved on event receiption (Note non-virtual, this base class method is always executed by inherited device)
	 	*/
		//--------------------------------------------------------
		int DoEventHandlersRegistration();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RegisterEventHandlers()
	 	*	Description : Register handler commands to be inkoved on event receiption (TO BE OVERRIDDEN IN DERIVED DEVICES)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterEventHandlers() {return 0;}

		
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::EraseDynAttrManager()
	 	*	Description : Cleanup dyn attribute manager of yat4tango (dyn attrs removed)
	 	*/
		//--------------------------------------------------------
		virtual int EraseDynAttrManager();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::EraseDynAttrData()
	 	*	Description : Cleanup dyn attribute allocated data 
	 	*/
		//--------------------------------------------------------
		virtual int EraseDynAttrData();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::EraseScalarDynAttrUserData()
	 	*	Description : Delete scalar dyn attribute allocated data 
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void EraseScalarDynAttrUserData(yat4tango::DynamicAttribute & dyn_attr);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::EraseSpectrumDynAttrUserData()
	 	*	Description : Delete scalar dyn attribute allocated data 
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void EraseSpectrumDynAttrUserData(yat4tango::DynamicAttribute & dyn_attr);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::_REGISTER_PROXY()
	 	*	Description : Register a proxy in device 
	 	*/
		//--------------------------------------------------------
		virtual int _REGISTER_PROXY(std::string proxy_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::_REGISTER_ADMIN_PROXY()
	 	*	Description : Register admin proxy of given proxy name in device 
	 	*/
		//--------------------------------------------------------
		virtual int _REGISTER_ADMIN_PROXY(std::string proxy_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::_UNREGISTER_PROXY()
	 	*	Description : Unregister a proxy in device 
	 	*/
		//--------------------------------------------------------
		virtual int _UNREGISTER_PROXY(std::string proxy_name);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::_REGISTER_EVT_SUBSCRIPTIONS()
	 	*	Description : Register an event subscription in proxy
	 	*/
		//--------------------------------------------------------
		virtual int _REGISTER_EVT_SUBSCRIPTIONS(std::string proxy_name,std::string attr_name,std::initializer_list<Tango::EventType> evt_type_list);
		
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::_REGISTER_EVT_SUBSCRIPTIONS()
	 	*	Description : Register an event subscription in proxy
	 	*/
		//--------------------------------------------------------
		virtual int _REGISTER_EVT_SUBSCRIPTIONS(std::string proxy_name,std::string attr_name,std::vector<Tango::EventType>& evt_types);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::_REGISTER_EVT_SUBSCRIPTIONS()
	 	*	Description : Unregister an event subscription in proxy
	 	*/
		//--------------------------------------------------------
		virtual int _UNREGISTER_EVT_SUBSCRIPTIONS(std::string proxy_name,std::string attr_name,std::initializer_list<Tango::EventType> evt_type_list);
		
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::_UNREGISTER_EVT_SUBSCRIPTIONS()
	 	*	Description : Unregister an event subscription in proxy
	 	*/
		//--------------------------------------------------------
		virtual int _UNREGISTER_EVT_SUBSCRIPTIONS(std::string proxy_name,std::string attr_name,std::vector<Tango::EventType>& evt_types);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::_REGISTER_EVT_HANDLERS()
	 	*	Description : Register an event handler in device
	 	*/
		//--------------------------------------------------------
		virtual int _REGISTER_EVT_HANDLERS(std::string proxy_name,std::string attr_name,Tango::EventType evt_type,std::initializer_list<std::string> evt_handlers,long int executionDelay=0,int priority=Utils_ns::Task::eMEDIUM_PRIORITY);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::ThrowAndRecordException()
	 	*	Description : Record and throw exception
	 	*/
		//--------------------------------------------------------
		virtual void _THROW_RECORDED_TANGO_EXCEPTION(std::string exception_name,std::string exception_msg);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RegisterFormula()
	 	*	Description : Register an attribute formula
	 	*/
		//--------------------------------------------------------
		virtual int RegisterFormula(Utils_ns::DeviceAttr* device_attr,Utils_ns::AttrDataPtr ad);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitializeFormula()
	 	*	Description : Initialize a registered attribute formula
	 	*/
		//--------------------------------------------------------
		virtual int InitializeFormula(std::string attr_name,Utils_ns::FormulaData* formula_data);

		
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::EvaluateAttrFormulasOnEvent()
	 	*	Description : Evaluate all attribute formulas linked to input event received
	 	*/
		//--------------------------------------------------------
		virtual int EvaluateFormulasOnEvent(Utils_ns::EvtSubscriptionDataPtr evt_sub_ptr,Tango::EventData* event_data);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::EvaluateAttrFormulasOnProxyDown()
	 	*	Description : Evaluate all attribute formulas linked to input proxy name (e.g. setting them to fallback values and setting given quality value)
	 	*/
		//--------------------------------------------------------
		virtual int EvaluateFormulasOnProxyDown(std::string& proxy_name,bool changeQualityFactor=false,Tango::AttrQuality attr_quality=Tango::ATTR_VALID);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetDynAttrValueFromFormula()
	 	*	Description : Set dyn attr value from formula
	 	*/
		//--------------------------------------------------------
		virtual int SetDynAttrValueFromFormula(std::string attr_name,Utils_ns::FormulaData* formula_data,bool emit_event=false);
		
	
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetFormulaScalarDynAttrValue()
	 	*	Description : Set scalar dyn attr value from formula
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetFormulaScalarDynAttrValue(std::string attr_name,Utils_ns::FormulaData* formula_data,bool emit_event=false);
	
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetFormulaScalarDynAttrValue()
	 	*	Description : Set scalar dyn attr value from formula
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetFormulaScalarDynAttrValue(std::string attr_name,bool emit_event=false);
	
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetFormulaSpectrumDynAttrValue()
	 	*	Description : Set spectrum dyn attr value from formula
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetFormulaSpectrumDynAttrValue(std::string attr_name,Utils_ns::FormulaData* formula_data,long data_size,bool emit_event=false);
	
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetFormulaSpectrumDynAttrValue(std::string attr_name)
	 	*	Description : Set spectrum dyn attr value from formula
	 	*/
		//--------------------------------------------------------
		template<typename T>
		void SetFormulaSpectrumDynAttrValue(std::string attr_name,long data_size,bool emit_event=false);
	
		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::CreateProxyMonitorDynAttr(std::string attr_namelong poll_period=-1,long periodic_event_period=-1,long archive_event_period=-1)
	 	*	Description : Create a dyn attr in device representing proxy monitoring status
	 	*/
		//--------------------------------------------------------
		int CreateProxyMonitorDynAttr(std::string attr_name,long poll_period=-1,long periodic_event_period=-1,long archive_event_period=-1);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::RemoveDynAttr(std::string attr_name,bool failIfNotExisting=false)
	 	*	Description : Remove a dyn attr from device
	 	*/
		//--------------------------------------------------------
		int RemoveDynAttr(std::string attr_name,bool failIfNotExisting=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::GetDynAttrData(std::string attr_name)
	 	*	Description : Retrieve dyn attr data from device
	 	*/
		//--------------------------------------------------------
		virtual Utils_ns::AttrDataPtr GetDynAttrData(std::string attr_name);
	

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitProxyMonitorTask()
	 	*	Description : Initialize the proxy monitor task
	 	*/
		//--------------------------------------------------------
		int InitProxyMonitorTask();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::ClearProxyMonitorTask()
	 	*	Description : Clear the proxy monitor task
	 	*/
		//--------------------------------------------------------
		int ClearProxyMonitorTask();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitProxyMonitoring()
	 	*	Description : Initialize the proxy monitoring polled command
	 	*/
		//--------------------------------------------------------
		//int InitProxyMonitoring();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitEventHandlerTask()
	 	*	Description : Initialize the event handler task
	 	*/
		//--------------------------------------------------------
		int InitEventHandlerTask();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::ClearEventHandlerTask()
	 	*	Description : Clear the event handler task
	 	*/
		//--------------------------------------------------------
		int ClearEventHandlerTask();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::InitTaskThread()
	 	*	Description : Initialize the task manager & thread
	 	*/
		//--------------------------------------------------------
		int InitTaskThread();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::ProcessProxyRunStatusInfo()
	 	*	Description : Process proxy run status info received from ProxyMonitorTask
	 	*/
		//--------------------------------------------------------
		int ProcessProxyRunStatusInfo(std::string proxy_name,int proxy_run_status);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::HandleProxyStatusInfo()
	 	*	Description : Process proxy run status info (to be overridden in derived devices)
	 	*/
		//--------------------------------------------------------
		virtual int HandleProxyRunStatusInfo(std::string proxy_name,int proxy_run_status){return 0;}

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::UpdateAsynchTaskStatus()
	 	*	Description : Update asynch task status from attr value 
	 	*/
		//--------------------------------------------------------
		int UpdateAsynchTaskStatus(std::string attr_name);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::CreateEventRateDynAttr()
	 	*	Description : CreateEventRateDynAttr
	 	*/
		//--------------------------------------------------------
		int CreateEventRateDynAttr(std::string attr_name,long poll_period,long periodic_event_period,long archive_event_period);


		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::SetCmdPollInfo()
	 	*	Description : Set command polling period
	 	*/
		//--------------------------------------------------------
		void SetCmdPollInfo(std::string cmd_name,bool enable,int poll_period);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::ExecuteFormulaPostActions()
	 	*	Description : Execute attr formula post-actions
	 	*/
		//--------------------------------------------------------
		virtual int ExecuteFormulaPostActions(std::string attr_name,Utils_ns::FormulaData* formula_data,bool check=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCDevice::ConfigureCmdPolling()
	 	*	Description : Configure polling period for commands
	 	*/
		//--------------------------------------------------------
		int ConfigureCmdPolling();

	//Friend class declaration
	friend class EventCallBack;
	friend class ProxyMonitorTask;
	friend class EventHandlerTask;
	friend class TaskThread;
	friend class AttrRandomizerThread;

/*----- PROTECTED REGION END -----*/	//	LMCDevice::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LMCDevice::Additional Classes Definitions) ENABLED START -----*/

//Inline functions
inline int LMCDevice::_REGISTER_PROXY(std::string proxy_name){
	if(!m_proxyManager) return -1;
	if(m_proxyManager->RegisterProxy(proxy_name,proxyTimeout)<0){
		_WARN_LOG("Failed to register proxy "<<proxy_name<<" in device (NB: all event subscriptions registration will fail if you attempt to add them later)!");
		return -1;
	}

	//Add proxy status attr
	//if(enableProxyMonitoring){
	if(enableProxyStatusAttrCreation){	
		//Parse proxy name to get domain, family and device name
		std::string proxy_facility_name= "";
		std::string proxy_domain_name= "";
		std::string proxy_family_name= "";
		std::string proxy_member_name= "";
		if(Utils_ns::TangoUtils::ParseFullProxyName(proxy_facility_name,proxy_domain_name,proxy_family_name,proxy_member_name,proxy_name)<0){
			_WARN_LOG("Failed to parse proxy name "<<proxy_name<<" (NB: unregister proxy previously created)!");	
			if(_UNREGISTER_PROXY(proxy_name)<0){
				_WARN_LOG("Failed to unregister proxy "<<proxy_name<<"!");
			}
			return -1;
		}
		std::string proxy_dyn_attr_name= std::string("proxyRunStatus_") + 
			proxy_domain_name + std::string("_") + 
			proxy_family_name + std::string("_") +
			proxy_member_name;

		//Create dyn attr in device
		_INFO_LOG("Creating proxy status dyn attr "<<proxy_dyn_attr_name<<"...");		
		if(CreateProxyMonitorDynAttr(proxy_dyn_attr_name,proxyStatusAttrPollPeriod,proxyStatusAttrPeriodicEventPeriod,proxyStatusAttrArchiveEventPeriod)<0){
			_WARN_LOG("Failed to create proxy status dyn attr name "<<proxy_dyn_attr_name<<" (NB: unregister proxy previously created)!");	
			/*
			if(_UNREGISTER_PROXY(proxy_name)<0){
				_WARN_LOG("Failed to unregister proxy "<<proxy_name<<"!");
			}
			*/
			return -1;
		}
	}//close if
	
	return 0;

}//close _REGISTER_PROXY

inline int LMCDevice::_UNREGISTER_PROXY(std::string proxy_name){
	if(!m_proxyManager) return -1;
	if(m_proxyManager->UnregisterProxy(proxy_name)<0){
		_WARN_LOG("Failed to unregister proxy "<<proxy_name<<" in device (NB: all event subscriptions registration will fail if you attempt to add them later)!");
		return -1;
	}

	//if(enableProxyMonitoring){
	if(enableProxyStatusAttrCreation){
		//Parse proxy name to get domain, family and device name
		std::string proxy_facility_name= "";
		std::string proxy_domain_name= "";
		std::string proxy_family_name= "";
		std::string proxy_member_name= "";
		if(Utils_ns::TangoUtils::ParseFullProxyName(proxy_facility_name,proxy_domain_name,proxy_family_name,proxy_member_name,proxy_name)<0){
			_WARN_LOG("Failed to parse proxy name "<<proxy_name<<" (NB: unregister proxy previously created)!");	
			if(_UNREGISTER_PROXY(proxy_name)<0){
				_WARN_LOG("Failed to unregister proxy "<<proxy_name<<"!");
			}
			return -1;
		}
		std::string proxy_dyn_attr_name= std::string("proxyRunStatus_") + 
			proxy_domain_name + std::string("_") + 
			proxy_family_name + std::string("_") +
			proxy_member_name;
		
		//Remove proxy status dyn attr from device
		_DEBUG_LOG("Removing proxy status dyn attr "<<proxy_dyn_attr_name<<"...");
		if(RemoveDynAttr(proxy_dyn_attr_name,false)<0){
			_WARN_LOG("Failed to remove dyn attr "<<proxy_dyn_attr_name<<" from device!");
		}
	}//close if
	
	return 0;

}//close _UNREGISTER_PROXY


inline int LMCDevice::_REGISTER_ADMIN_PROXY(std::string proxy_name){

	//Check proxy manager	
	if(!m_proxyManager) return -1;

	//Get Database instance
	Tango::Database* db= 0;
	try{
		db= Tango::Util::instance()->get_database();
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		_WARN_LOG("Tango exception while retrieving Database instance!");
		return -1;
	}
	catch(...){
		_WARN_LOG("Unknown exception while retrieving Database instance!");
		return -1;
	}

	//The  db->get_device_info() command fails with FQDN, so get the standard name
	//Parse proxy name to get domain, family and device name
	std::string proxy_facility_name= "";
	std::string proxy_domain_name= "";
	std::string proxy_family_name= "";
	std::string proxy_member_name= "";
	if(Utils_ns::TangoUtils::ParseFullProxyName(proxy_facility_name,proxy_domain_name,proxy_family_name,proxy_member_name,proxy_name)<0){
		_WARN_LOG("Failed to parse proxy name "<<proxy_name<<"!");	
		return -1;
	}
	
	std::string proxy_name_no_fqdn= proxy_domain_name + std::string("/") + proxy_family_name + std::string("/") + proxy_member_name;
	

	//Find admin device name of given proxy
	Tango::DbDevFullInfo dev_info;
	try{
		dev_info= db->get_device_info(proxy_name_no_fqdn);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		_WARN_LOG("Tango exception while retrieving proxy "<<proxy_name_no_fqdn<<" info from DB!");
		return -1;
	}
	catch(...){
		_WARN_LOG("Unknown exception while retrieving proxy "<<proxy_name_no_fqdn<<" info from DB!");
		return -1;
	}
	
	//Get device server name
	std::string server_name= dev_info.ds_full_name;
	std::string proxy_adm_name("dserver/");
	proxy_adm_name += server_name;

	//Register admin proxy
	_INFO_LOG("Registering proxy admin name "<<proxy_adm_name<<"...");
	return _REGISTER_PROXY(proxy_adm_name);

}//close _REGISTER_ADMIN_PROXY


inline int LMCDevice::_REGISTER_EVT_SUBSCRIPTIONS(std::string proxy_name,std::string attr_name,std::initializer_list<Tango::EventType> evt_type_list){
	if(!m_proxyManager) return -1;
	if(evt_type_list.size()<=0) return -1;
	std::vector<Tango::EventType> evt_types= evt_type_list;	
	if(m_proxyManager->RegisterEvtSubscriptions(proxy_name,attr_name,evt_types)<0){
		_WARN_LOG("Failed to register subscription to event (attr="<<attr_name<<") in proxy "<<proxy_name<<", no subscriptions will be added!");
		return -1;
	}

	//Create event rate monitoring attr
	if(enableEventRateMonitoring){	
		std::string dyn_attr_name= std::string("eventRate_") + attr_name;
		_DEBUG_LOG("Creating event rate monitoring dyn attr "<<dyn_attr_name<<"...");		
		if(CreateEventRateDynAttr(dyn_attr_name,proxyStatusAttrPollPeriod,proxyStatusAttrPeriodicEventPeriod,proxyStatusAttrArchiveEventPeriod)<0){
			_WARN_LOG("Failed to create event rate dyn attr name "<<dyn_attr_name<<"!");	
			//return -1;
		}		
	}//close if

	return 0;
}//close _REGISTER_EVT_SUBSCRIPTIONS


inline int LMCDevice::_REGISTER_EVT_SUBSCRIPTIONS(std::string proxy_name,std::string attr_name,std::vector<Tango::EventType>& evt_types){
	if(!m_proxyManager) return -1;
	if(evt_types.size()<=0) return -1;
	if(m_proxyManager->RegisterEvtSubscriptions(proxy_name,attr_name,evt_types)<0){
		_WARN_LOG("Failed to register subscription to event (attr="<<attr_name<<") in proxy "<<proxy_name<<", no subscriptions will be added!");
		return -1;
	}
	return 0;
}//close _REGISTER_EVT_SUBSCRIPTIONS

inline int LMCDevice::_UNREGISTER_EVT_SUBSCRIPTIONS(std::string proxy_name,std::string attr_name,std::initializer_list<Tango::EventType> evt_type_list){
	if(!m_proxyManager) return -1;
	if(evt_type_list.size()<=0) return -1;
	std::vector<Tango::EventType> evt_types= evt_type_list;	
	if(m_proxyManager->UnregisterEvtSubscriptions(proxy_name,attr_name,evt_types)<0){
		_WARN_LOG("Failed to unregister subscription to event (attr="<<attr_name<<") in proxy "<<proxy_name<<"!");
		return -1;
	}
	return 0;
}//close _UNREGISTER_EVT_SUBSCRIPTIONS

inline int LMCDevice::_UNREGISTER_EVT_SUBSCRIPTIONS(std::string proxy_name,std::string attr_name,std::vector<Tango::EventType>& evt_types){
	if(!m_proxyManager) return -1;
	if(evt_types.size()<=0) return -1;
	if(m_proxyManager->UnregisterEvtSubscriptions(proxy_name,attr_name,evt_types)<0){
		_WARN_LOG("Failed to unregister subscription to event (attr="<<attr_name<<") in proxy "<<proxy_name<<"!");
		return -1;
	}
	return 0;
}//close _UNREGISTER_EVT_SUBSCRIPTIONS


inline int LMCDevice::_REGISTER_EVT_HANDLERS(std::string proxy_name,std::string attr_name,Tango::EventType evt_type,std::initializer_list<std::string> evt_handlers,long int executionDelay,int priority) {
	if(!m_proxyManager) return -1;
	if(evt_handlers.size()<=0) return -1;
	if(m_proxyManager->RegisterEvtHandlers(proxy_name,attr_name,evt_type,evt_handlers,executionDelay,priority)<0){
		_WARN_LOG("Failed to register handlers for event (attr="<<attr_name<<", type="<<evt_type<<") in proxy "<<proxy_name<<", no handlers will be added!");
		return -1;
	}
	return 0;
}//close _REGISTER_EVT_HANDLERS

inline void LMCDevice::_THROW_RECORDED_TANGO_EXCEPTION(std::string exception_name,std::string exception_msg){

	//Record exception
	{
		m_mutex.lock();
		m_exceptionCounter++;
		m_mutex.unlock();
	}

	//Throw exception
	_THROW_TANGO_EXCEPTION(exception_name,exception_msg);

}//close _THROW_RECORDED_TANGO_EXCEPTION()



//	Additional Classes Definitions
#include "LMCDevice.tpp"

/*----- PROTECTED REGION END -----*/	//	LMCDevice::Additional Classes Definitions

}	//	End of namespace

#endif   //	LMCDevice_H
