/*----- PROTECTED REGION ID(DSEmulator.h) ENABLED START -----*/
//=============================================================================
//
// file :        DSEmulator.h
//
// description : Include file for the DSEmulator class
//
// project :     DSEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef DSEmulator_H
#define DSEmulator_H

#include <tango.h>
#include <LMCDevice.h>

#include "DSEmulatorTask.h"

/*----- PROTECTED REGION END -----*/	//	DSEmulator.h

/**
 *  DSEmulator class description:
 *    Emulator of DSManager Tango Device Server
 */

namespace DSEmulator_ns
{
enum _centralLoggerStatusEnum {
} ;
typedef _centralLoggerStatusEnum centralLoggerStatusEnum;

enum _elementLoggerStatusEnum {
} ;
typedef _elementLoggerStatusEnum elementLoggerStatusEnum;

enum _storageLoggerStatusEnum {
} ;
typedef _storageLoggerStatusEnum storageLoggerStatusEnum;

enum _fwdAttrInitStatusEnum {
} ;
typedef _fwdAttrInitStatusEnum fwdAttrInitStatusEnum;

/*----- PROTECTED REGION ID(DSEmulator::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class DSEmulatorTask;
class PointingSchedule;
class TrackingThread;
class PointingData;
typedef std::shared_ptr<PointingData> PointingDataPtr;

/*----- PROTECTED REGION END -----*/	//	DSEmulator::Additional Class Declarations

class DSEmulator : public LMCDevice_ns::LMCDevice
{

/*----- PROTECTED REGION ID(DSEmulator::Data Members) ENABLED START -----*/

//	Add your own data members
protected:
	//- the device task
	DSEmulatorTask* m_task;

	//- Pointing schedule
	PointingSchedule* m_pntSchedule;

	//- Tracking thread
	TrackingThread* m_trackingThread;

	//- Flag to stop tracking thread
	bool m_stopTrackingThreadFlag;
	//std::atomic<bool> m_stopSlewingFlag;

	//- Mutex
	omni_mutex m_mutex;

/*----- PROTECTED REGION END -----*/	//	DSEmulator::Data Members

//	Device property data members
public:
	//	StartupTime:	Startup time in seconds
	Tango::DevLong	startupTime;
	//	EnableStartupFailure:	
	Tango::DevBoolean	enableStartupFailure;
	//	StartupFailureProbability:	
	Tango::DevFloat	startupFailureProbability;
	//	StowTime:	Stowing time
	Tango::DevLong	stowTime;
	//	EnableStowFailure:	
	Tango::DevBoolean	enableStowFailure;
	//	StowFailureProbability:	
	Tango::DevFloat	stowFailureProbability;
	//	IndexingTime:	Time needed to move the indexer
	Tango::DevLong	indexingTime;
	//	EnableIndexingFailure:	
	Tango::DevBoolean	enableIndexingFailure;
	//	IndexingFailureProbability:	
	Tango::DevFloat	indexingFailureProbability;
	//	PointingModelParamsDefault:	Default pointing model parameters
	vector<Tango::DevFloat>	pointingModelParamsDefault;
	//	IndexerPositionDefault:	Default indexer position to be used when a memorized value is not present
	Tango::DevShort	indexerPositionDefault;
	//	SmearPointingCoords:	Smear desired pointing coordinates before setting achieved coordinates.
	//  This is to emulate the dish pointing accuracy.
	Tango::DevBoolean	smearPointingCoords;
	//	PointingResolution:	Pointing accuracy in both Azimuth/Elevation in arcsec
	Tango::DevDouble	pointingResolution;
	//	MaxPointingQueueSize:	Maximum number of pnt coordinates queuable in tracking queue
	Tango::DevShort	maxPointingQueueSize;
	//	UseUTCTime:	Use UTC time in pointing coordinates
	Tango::DevBoolean	useUTCTime;
	//	TrackProgramMaxSize:	Number of pointing coordinates expanded from pointing polynomial
	Tango::DevShort	trackProgramMaxSize;
	//	TrackProgramTimeStep:	Time step to be used when expanding pointing polynomials in a list of coordinates
	Tango::DevFloat	trackProgramTimeStep;
	//	MinAzimuth:	Minimum antenna azimuth angle in degress
	Tango::DevFloat	minAzimuth;
	//	MaxAzimuth:	Maximum antenna azimuth in degrees
	Tango::DevFloat	maxAzimuth;
	//	MinElevation:	Minimum antenna elevation angle in degrees
	Tango::DevFloat	minElevation;
	//	MaxElevation:	Mazimum antenna elevation angle in degrees
	Tango::DevFloat	maxElevation;
	//	SlewRate:	Maximum slew rate of antenna in degrees/s
	Tango::DevFloat	slewRate;
	//	SlewTimeStep:	Time step (in ms) to be used when simulating slewing
	Tango::DevFloat	slewTimeStep;
	//	StowAzimuthPos:	Stow azimuth position in degrees
	Tango::DevFloat	stowAzimuthPos;
	//	StowElevationPos:	Stow elevation position in degrees
	Tango::DevFloat	stowElevationPos;
	//	SetModeTime:	Max time taken to set a mode. Used to emulate long running task.
	Tango::DevLong	setModeTime;
	//	EnableSetModeFailure:	
	Tango::DevBoolean	enableSetModeFailure;
	//	SetModeFailureProbability:	
	Tango::DevFloat	setModeFailureProbability;
	//	ShutdownTime:	Time (in seconds) taken by DS to shutdown dish in case of a 
	//  power cut. By requirerements DS shall wait 30 seconds 
	//  before stowing the dish.
	Tango::DevLong	shutdownTime;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevBoolean	*attr_powerCut_read;
	Tango::DevBoolean	*attr_powerRestored_read;
	Tango::DevString	*attr_stowProgress_read;
	Tango::DevString	*attr_indexingProgress_read;
	Tango::DevDouble	*attr_achievedPointing_read;
	Tango::DevDouble	*attr_desiredPointing_read;
	Tango::DevString	*attr_setStandbyLPModeProgress_read;
	Tango::DevString	*attr_setStandbyFPModeProgress_read;
	Tango::DevString	*attr_setPointModeProgress_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	DSEmulator(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	DSEmulator(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	DSEmulator(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~DSEmulator() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : DSEmulator::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : DSEmulator::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute powerCut related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_powerCut(Tango::Attribute &attr);
	virtual bool is_powerCut_allowed(Tango::AttReqType type);
/**
 *	Attribute powerRestored related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_powerRestored(Tango::Attribute &attr);
	virtual bool is_powerRestored_allowed(Tango::AttReqType type);
/**
 *	Attribute stowProgress related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 2
 */
	virtual void read_stowProgress(Tango::Attribute &attr);
	virtual bool is_stowProgress_allowed(Tango::AttReqType type);
/**
 *	Attribute indexingProgress related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 2
 */
	virtual void read_indexingProgress(Tango::Attribute &attr);
	virtual bool is_indexingProgress_allowed(Tango::AttReqType type);
/**
 *	Attribute achievedPointing related methods
 *	Description: Actual pointing coordinates
 *               [0]: Timestamp (milliseconds since UNIX epoch, UTC)
 *               [1]: Azimuth
 *               [2]: Elevation
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 3
 */
	virtual void read_achievedPointing(Tango::Attribute &attr);
	virtual bool is_achievedPointing_allowed(Tango::AttReqType type);
/**
 *	Attribute desiredPointing related methods
 *	Description: Desired pointing coordinates
 *               [0]: Timestamp (Milliseconds since UNIX epoch, UTC Time at which Dish should start
 *               applying the polynomial)
 *               [1]: Az (0th order pol coeff)
 *               [2]: El (0th order pol coeff)
 *               [3]: Az (1st order pol coeff)
 *               [4]: El (1st order pol coeff)
 *               [5]: Az (2nd order pol coeff)
 *               [6]: El (2nd order pol coeff)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 7
 */
	virtual void read_desiredPointing(Tango::Attribute &attr);
	virtual void write_desiredPointing(Tango::WAttribute &attr);
	virtual bool is_desiredPointing_allowed(Tango::AttReqType type);
/**
 *	Attribute setStandbyLPModeProgress related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 2
 */
	virtual void read_setStandbyLPModeProgress(Tango::Attribute &attr);
	virtual bool is_setStandbyLPModeProgress_allowed(Tango::AttReqType type);
/**
 *	Attribute setStandbyFPModeProgress related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 2
 */
	virtual void read_setStandbyFPModeProgress(Tango::Attribute &attr);
	virtual bool is_setStandbyFPModeProgress_allowed(Tango::AttReqType type);
/**
 *	Attribute setPointModeProgress related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 2
 */
	virtual void read_setPointModeProgress(Tango::Attribute &attr);
	virtual bool is_setPointModeProgress_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : DSEmulator::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command SetStandbyLPMode related method
	 *	Description: Set STANDBY-LP mode in DS
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_standby_lpmode();
	virtual bool is_SetStandbyLPMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetStandbyFPMode related method
	 *	Description: Activate full power mode in DS
	 *               Corresponds to mode=STANDBY and power=FULL 
	 *               (drives enabled)
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_standby_fpmode();
	virtual bool is_SetStandbyFPMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetPointMode related method
	 *	Description: Activate POINT mode in antenna.
	 *               
	 *               - Brakes are off
	 *               - Able to index & to point
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_point_mode();
	virtual bool is_SetPointMode_allowed(const CORBA::Any &any);
	/**
	 *	Command Stow related method
	 *	Description: Stow the antenna and apply brakes
	 *
	 *	@returns == Long field ==
	 *           [0]: ack code (0=OK, 1=QUEUED, 2=FAILED)
	 *           
	 *           == String field ==
	 *           [0]: Informative message or error/fault description
	 */
	virtual Tango::DevVarLongStringArray *stow();
	virtual bool is_Stow_allowed(const CORBA::Any &any);
	/**
	 *	Command SetMaintenanceMode related method
	 *	Description: Activate maintenance mode
	 *
	 */
	virtual void set_maintenance_mode();
	virtual bool is_SetMaintenanceMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetIndexPosition related method
	 *	Description: Set indexer to given position. 
	 *               
	 *               Command may take at maximum 30 seconds to transition 
	 *               from the two most extreme positions (see requirements)
	 *               
	 *               Only allowed in modes {STOW, STANDBY, POINT} (see requirements)
	 *
	 *	@param argin Indexer position [1-5]
	 *	@returns == Long field ==
	 *           [0]: ack code (0=OK, 1=QUEUED, 2=FAILED)
	 *           
	 *           == String field ==
	 *           [0]: Informative message or error/fault description
	 */
	virtual Tango::DevVarLongStringArray *set_index_position(Tango::DevShort argin);
	virtual bool is_SetIndexPosition_allowed(const CORBA::Any &any);
	/**
	 *	Command SimulatePowerCut related method
	 *	Description: Simulate power cut in Dish
	 *
	 */
	virtual void simulate_power_cut();
	virtual bool is_SimulatePowerCut_allowed(const CORBA::Any &any);
	/**
	 *	Command SimulatePowerRestore related method
	 *	Description: Simulate power restoring in Dish
	 *
	 */
	virtual void simulate_power_restore();
	virtual bool is_SimulatePowerRestore_allowed(const CORBA::Any &any);
	/**
	 *	Command SimulateESTOP related method
	 *	Description: Simulate emergency stop scenario in antenna
	 *
	 */
	virtual void simulate_estop();
	virtual bool is_SimulateESTOP_allowed(const CORBA::Any &any);
	/**
	 *	Command GetTrackProgram related method
	 *	Description: Returns a list of string with track program info
	 *
	 *	@returns List of track program items
	 */
	virtual Tango::DevVarStringArray *get_track_program();
	virtual bool is_GetTrackProgram_allowed(const CORBA::Any &any);
	/**
	 *	Command FlushTrackProgram related method
	 *	Description: Flush track program queue
	 *
	 */
	virtual void flush_track_program();
	virtual bool is_FlushTrackProgram_allowed(const CORBA::Any &any);
	/**
	 *	Command PauseTracking related method
	 *	Description: Disable tracking without removing pointing entries in queue
	 *
	 */
	virtual void pause_tracking();
	virtual bool is_PauseTracking_allowed(const CORBA::Any &any);
	/**
	 *	Command ResumeTracking related method
	 *	Description: Resume/enable tracking using current pointings available in queue
	 *
	 */
	virtual void resume_tracking();
	virtual bool is_ResumeTracking_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetProgressAttrs related method
	 *	Description: Reset all progress attributes to INIT state.
	 *               
	 *               NB: This command serves to solve spurious deadlocks 
	 *               found in task management. In this situation the progress 
	 *               attribute remains stuck to RUNNING state and no other 
	 *               tasks can be scheduled if not reset. Need to fix this bug!
	 *
	 */
	virtual void reset_progress_attrs();
	virtual bool is_ResetProgressAttrs_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetPowerCutAttrs related method
	 *	Description: Reset power cut attributes to false
	 *
	 */
	virtual void reset_power_cut_attrs();
	virtual bool is_ResetPowerCutAttrs_allowed(const CORBA::Any &any);

//	Dynamic commands methods
public:
	/**
	 *	Command dummyDynCmd related method
	 *	Description: 
	 *
	 */
	virtual void dummy_dyn_cmd(Tango::Command &command);
	virtual bool is_dummyDynCmd_allowed(const CORBA::Any &any);
	void add_dummyDynCmd_dynamic_command(string cmdname, bool device);
	void remove_dummyDynCmd_dynamic_command(string cmdname);

	//--------------------------------------------------------
	/**
	 *	Method      : DSEmulator::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(DSEmulator::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
protected:
	//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::InitCmdAttrStateMachine()
	 	*	Description : Initialize cmd & attr state machine
	 	*/
		//--------------------------------------------------------
		virtual int InitCmdAttrStateMachine();

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::RegisterProxies()
	 	*	Description : Register device proxies to be used (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterProxies();

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::RegisterEventSubscriptions()
	 	*	Description : Register event subscriptions for device proxies (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterEventSubscriptions();

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::RegisterEventHandlers()
	 	*	Description : Register handler commands to be inkoved on event receiption (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterEventHandlers();

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::InitTask()
	 	*	Description : Initialize yat4tango task
	 	*/
		//--------------------------------------------------------
		virtual int InitTask();

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::ClearTask()
	 	*	Description : Clearup yat4tango task
	 	*/
		//--------------------------------------------------------
		virtual int ClearTask();

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::Startup()
	 	*	Description : Emulate DS startup 
	 	*/
		//--------------------------------------------------------
		virtual int Startup();

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::SetStowStatus()
	 	*	Description : Set stow task status
	 	*/
		//--------------------------------------------------------
		void SetStowStatus(std::string status,std::string info,bool clear=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::SetIndexingStatus()
	 	*	Description : Set indexing task status
	 	*/
		//--------------------------------------------------------
		void SetIndexingStatus(std::string status,std::string info,bool clear=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::SetStandbyLPStatus()
	 	*	Description : Set STANDBY-LP task status
	 	*/
		//--------------------------------------------------------
		void SetStandbyLPStatus(std::string status,std::string info,bool clear=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::SetStandbyFPStatus()
	 	*	Description : Set STANDBY-FP task status
	 	*/
		//--------------------------------------------------------
		void SetStandbyFPStatus(std::string status,std::string info,bool clear=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::SetPointStatus()
	 	*	Description : Set POINT task status
	 	*/
		//--------------------------------------------------------
		void SetPointStatus(std::string status,std::string info,bool clear=true);

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::InitTrackingThread()
	 	*	Description : Initialize the pnt schedule & tracking thread
	 	*/
		//--------------------------------------------------------
		int InitTrackingThread();

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::DisableTracking()
	 	*	Description : Stop tracking 
	 	*/
		//--------------------------------------------------------
		void DisableTracking();

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::EnableTracking()
	 	*	Description : Enable tracking 
	 	*/
		//--------------------------------------------------------
		void EnableTracking();

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::CorrectPointingDataList()
	 	*	Description : Correct pointing data list
	 	*/
		//--------------------------------------------------------
		int CorrectPointingDataList(std::vector<PointingDataPtr>& pDataList);

		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::CorrectPointingData()
	 	*	Description : Correct pointing data
	 	*/
		//--------------------------------------------------------
		void CorrectPointingData(PointingDataPtr pData,const std::vector<float>& pars);

		
		//--------------------------------------------------------
		/**
	 	*	Method      : DSEmulator::deg2rad()
	 	*	Description : Convert degress to rad
	 	*/
		//--------------------------------------------------------
		double deg2rad (double degrees) {
    	return degrees * 4.0 * atan (1.0) / 180.0;
		}

	friend class DSEmulatorTask;
	friend class DSEmulatorClass;
	friend class TrackingThread;

/*----- PROTECTED REGION END -----*/	//	DSEmulator::Additional Method prototypes
};

/*----- PROTECTED REGION ID(DSEmulator::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	DSEmulator::Additional Classes Definitions

}	//	End of namespace

#endif   //	DSEmulator_H
