/*----- PROTECTED REGION ID(DSEmulatorClass.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        DSEmulatorClass.cpp
//
// description : C++ source for the DSEmulatorClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the DSEmulator once per process.
//
// project :     DSEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <DSEmulatorClass.h>

/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass.cpp

//-------------------------------------------------------------------
/**
 *	Create DSEmulatorClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_DSEmulator_class(const char *name) {
		return DSEmulator_ns::DSEmulatorClass::init(name);
	}
}

namespace DSEmulator_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
DSEmulatorClass *DSEmulatorClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		DSEmulatorClass::DSEmulatorClass(string &s)
 * description : 	constructor for the DSEmulatorClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
DSEmulatorClass::DSEmulatorClass(string &s):LMCDevice_ns::LMCDeviceClass(s)
{
	cout2 << "Entering DSEmulatorClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(DSEmulatorClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::constructor

	cout2 << "Leaving DSEmulatorClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		DSEmulatorClass::~DSEmulatorClass()
 * description : 	destructor for the DSEmulatorClass
 */
//--------------------------------------------------------
DSEmulatorClass::~DSEmulatorClass()
{
	/*----- PROTECTED REGION ID(DSEmulatorClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		DSEmulatorClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
DSEmulatorClass *DSEmulatorClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new DSEmulatorClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		DSEmulatorClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
DSEmulatorClass *DSEmulatorClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		SetStandbyLPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetStandbyLPModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetStandbyLPModeClass::execute(): arrived" << endl;
	return insert((static_cast<DSEmulator *>(device))->set_standby_lpmode());
}

//--------------------------------------------------------
/**
 * method : 		SetStandbyFPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetStandbyFPModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetStandbyFPModeClass::execute(): arrived" << endl;
	return insert((static_cast<DSEmulator *>(device))->set_standby_fpmode());
}

//--------------------------------------------------------
/**
 * method : 		SetPointModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetPointModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetPointModeClass::execute(): arrived" << endl;
	return insert((static_cast<DSEmulator *>(device))->set_point_mode());
}

//--------------------------------------------------------
/**
 * method : 		StowClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StowClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StowClass::execute(): arrived" << endl;
	return insert((static_cast<DSEmulator *>(device))->stow());
}

//--------------------------------------------------------
/**
 * method : 		SetMaintenanceModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetMaintenanceModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetMaintenanceModeClass::execute(): arrived" << endl;
	((static_cast<DSEmulator *>(device))->set_maintenance_mode());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetIndexPositionClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetIndexPositionClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetIndexPositionClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<DSEmulator *>(device))->set_index_position(argin));
}

//--------------------------------------------------------
/**
 * method : 		SimulatePowerCutClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SimulatePowerCutClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SimulatePowerCutClass::execute(): arrived" << endl;
	((static_cast<DSEmulator *>(device))->simulate_power_cut());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SimulatePowerRestoreClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SimulatePowerRestoreClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SimulatePowerRestoreClass::execute(): arrived" << endl;
	((static_cast<DSEmulator *>(device))->simulate_power_restore());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SimulateESTOPClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SimulateESTOPClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SimulateESTOPClass::execute(): arrived" << endl;
	((static_cast<DSEmulator *>(device))->simulate_estop());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetTrackProgramClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetTrackProgramClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GetTrackProgramClass::execute(): arrived" << endl;
	return insert((static_cast<DSEmulator *>(device))->get_track_program());
}

//--------------------------------------------------------
/**
 * method : 		FlushTrackProgramClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *FlushTrackProgramClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "FlushTrackProgramClass::execute(): arrived" << endl;
	((static_cast<DSEmulator *>(device))->flush_track_program());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PauseTrackingClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PauseTrackingClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "PauseTrackingClass::execute(): arrived" << endl;
	((static_cast<DSEmulator *>(device))->pause_tracking());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResumeTrackingClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResumeTrackingClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResumeTrackingClass::execute(): arrived" << endl;
	((static_cast<DSEmulator *>(device))->resume_tracking());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetProgressAttrsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetProgressAttrsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetProgressAttrsClass::execute(): arrived" << endl;
	((static_cast<DSEmulator *>(device))->reset_progress_attrs());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetPowerCutAttrsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetPowerCutAttrsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetPowerCutAttrsClass::execute(): arrived" << endl;
	((static_cast<DSEmulator *>(device))->reset_power_cut_attrs());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		dummyDynCmdClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *dummyDynCmdClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "dummyDynCmdClass::execute(): arrived" << endl;
	((static_cast<DSEmulator *>(device))->dummy_dyn_cmd(*this));
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : DSEmulatorClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum DSEmulatorClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : DSEmulatorClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum DSEmulatorClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : DSEmulatorClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum DSEmulatorClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : DSEmulatorClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void DSEmulatorClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "StartupTime";
	prop_desc = "Startup time in seconds";
	prop_def  = "3";
	vect_data.clear();
	vect_data.push_back("3");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "EnableStartupFailure";
	prop_desc = "";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StartupFailureProbability";
	prop_desc = "";
	prop_def  = "0.2";
	vect_data.clear();
	vect_data.push_back("0.2");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StowTime";
	prop_desc = "Stowing time";
	prop_def  = "20";
	vect_data.clear();
	vect_data.push_back("20");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "EnableStowFailure";
	prop_desc = "";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StowFailureProbability";
	prop_desc = "";
	prop_def  = "0.1";
	vect_data.clear();
	vect_data.push_back("0.1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "IndexingTime";
	prop_desc = "Time needed to move the indexer";
	prop_def  = "30";
	vect_data.clear();
	vect_data.push_back("30");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "EnableIndexingFailure";
	prop_desc = "";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "IndexingFailureProbability";
	prop_desc = "";
	prop_def  = "0.1";
	vect_data.clear();
	vect_data.push_back("0.1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "PointingModelParamsDefault";
	prop_desc = "Default pointing model parameters";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "IndexerPositionDefault";
	prop_desc = "Default indexer position to be used when a memorized value is not present";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SmearPointingCoords";
	prop_desc = "Smear desired pointing coordinates before setting achieved coordinates.\nThis is to emulate the dish pointing accuracy.";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "PointingResolution";
	prop_desc = "Pointing accuracy in both Azimuth/Elevation in arcsec";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MaxPointingQueueSize";
	prop_desc = "Maximum number of pnt coordinates queuable in tracking queue";
	prop_def  = "200";
	vect_data.clear();
	vect_data.push_back("200");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "UseUTCTime";
	prop_desc = "Use UTC time in pointing coordinates";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "TrackProgramMaxSize";
	prop_desc = "Number of pointing coordinates expanded from pointing polynomial";
	prop_def  = "50";
	vect_data.clear();
	vect_data.push_back("50");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "TrackProgramTimeStep";
	prop_desc = "Time step to be used when expanding pointing polynomials in a list of coordinates";
	prop_def  = "100";
	vect_data.clear();
	vect_data.push_back("100");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MinAzimuth";
	prop_desc = "Minimum antenna azimuth angle in degress";
	prop_def  = "-270";
	vect_data.clear();
	vect_data.push_back("-270");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MaxAzimuth";
	prop_desc = "Maximum antenna azimuth in degrees";
	prop_def  = "270";
	vect_data.clear();
	vect_data.push_back("270");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MinElevation";
	prop_desc = "Minimum antenna elevation angle in degrees";
	prop_def  = "15";
	vect_data.clear();
	vect_data.push_back("15");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MaxElevation";
	prop_desc = "Mazimum antenna elevation angle in degrees";
	prop_def  = "85";
	vect_data.clear();
	vect_data.push_back("85");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SlewRate";
	prop_desc = "Maximum slew rate of antenna in degrees/s";
	prop_def  = "10";
	vect_data.clear();
	vect_data.push_back("10");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SlewTimeStep";
	prop_desc = "Time step (in ms) to be used when simulating slewing";
	prop_def  = "100";
	vect_data.clear();
	vect_data.push_back("100");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StowAzimuthPos";
	prop_desc = "Stow azimuth position in degrees";
	prop_def  = "180";
	vect_data.clear();
	vect_data.push_back("180");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StowElevationPos";
	prop_desc = "Stow elevation position in degrees";
	prop_def  = "85";
	vect_data.clear();
	vect_data.push_back("85");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SetModeTime";
	prop_desc = "Max time taken to set a mode. Used to emulate long running task.";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "EnableSetModeFailure";
	prop_desc = "";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SetModeFailureProbability";
	prop_desc = "";
	prop_def  = "0.2";
	vect_data.clear();
	vect_data.push_back("0.2");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ShutdownTime";
	prop_desc = "Time (in seconds) taken by DS to shutdown dish in case of a \npower cut. By requirerements DS shall wait 30 seconds \nbefore stowing the dish.";
	prop_def  = "30";
	vect_data.clear();
	vect_data.push_back("30");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : DSEmulatorClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void DSEmulatorClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("DSEmulator");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Emulator of DSManager Tango Device Server");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : DSEmulatorClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void DSEmulatorClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(DSEmulatorClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new DSEmulator(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		DSEmulator *dev = static_cast<DSEmulator *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();
		dev->add_dynamic_commands();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(DSEmulatorClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	//## Initialize task
	//## NB: This is done here and not inside init_device because dynamic attributes need to be registered first in device (done in add_dynamic_attributes)
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++) {

		//	Add dynamic attributes if any
		DSEmulator *dev = static_cast<DSEmulator*>(device_list[device_list.size()-i]);

		//## Execute DS startup task
		if(dev->Startup()<0){
			__ERROR_LOG(dev,"Failed to startup DS!");
			continue;
		}
	}//end loop devices
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : DSEmulatorClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void DSEmulatorClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(DSEmulatorClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::attribute_factory_before
	//	Call atribute_factory for inherited class
	LMCDevice_ns::LMCDeviceClass::attribute_factory(att_list);

	//	Attribute : loggingLevelCentral - Check if not concrete in inherited class
	Tango::Attr *loggingLevelCentralAttr = get_attr_object_by_name(att_list, "loggingLevelCentral");
	if (loggingLevelCentralAttr == NULL)
	{
	}

	//	Attribute : loggingLevelElement - Check if not concrete in inherited class
	Tango::Attr *loggingLevelElementAttr = get_attr_object_by_name(att_list, "loggingLevelElement");
	if (loggingLevelElementAttr == NULL)
	{
	}

	//	Attribute : loggingLevelStorage - Check if not concrete in inherited class
	Tango::Attr *loggingLevelStorageAttr = get_attr_object_by_name(att_list, "loggingLevelStorage");
	if (loggingLevelStorageAttr == NULL)
	{
	}

	//	Attribute : loggingLevelConsole - Check if not concrete in inherited class
	Tango::Attr *loggingLevelConsoleAttr = get_attr_object_by_name(att_list, "loggingLevelConsole");
	if (loggingLevelConsoleAttr == NULL)
	{
	}

	//	Attribute : buildState - Check if not concrete in inherited class
	Tango::Attr *buildStateAttr = get_attr_object_by_name(att_list, "buildState");
	if (buildStateAttr == NULL)
	{
	}

	//	Attribute : centralLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *centralLoggerStatusAttr = get_attr_object_by_name(att_list, "centralLoggerStatus");
	if (centralLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : elementLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *elementLoggerStatusAttr = get_attr_object_by_name(att_list, "elementLoggerStatus");
	if (elementLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : storageLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *storageLoggerStatusAttr = get_attr_object_by_name(att_list, "storageLoggerStatus");
	if (storageLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : eventRate - Check if not concrete in inherited class
	Tango::Attr *eventRateAttr = get_attr_object_by_name(att_list, "eventRate");
	if (eventRateAttr == NULL)
	{
	}

	//	Attribute : exceptionRate - Check if not concrete in inherited class
	Tango::Attr *exceptionRateAttr = get_attr_object_by_name(att_list, "exceptionRate");
	if (exceptionRateAttr == NULL)
	{
	}

	//	Attribute : fwdAttrInitStatus - Check if not concrete in inherited class
	Tango::Attr *fwdAttrInitStatusAttr = get_attr_object_by_name(att_list, "fwdAttrInitStatus");
	if (fwdAttrInitStatusAttr == NULL)
	{
	}

	//	Attribute : centralLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *centralLoggerEnabledAttr = get_attr_object_by_name(att_list, "centralLoggerEnabled");
	if (centralLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : elementLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *elementLoggerEnabledAttr = get_attr_object_by_name(att_list, "elementLoggerEnabled");
	if (elementLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : storageLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *storageLoggerEnabledAttr = get_attr_object_by_name(att_list, "storageLoggerEnabled");
	if (storageLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : loggingTargetCentral - Check if not concrete in inherited class
	Tango::Attr *loggingTargetCentralAttr = get_attr_object_by_name(att_list, "loggingTargetCentral");
	if (loggingTargetCentralAttr == NULL)
	{
	}

	//	Attribute : loggingTargetElement - Check if not concrete in inherited class
	Tango::Attr *loggingTargetElementAttr = get_attr_object_by_name(att_list, "loggingTargetElement");
	if (loggingTargetElementAttr == NULL)
	{
	}

	//	Attribute : loggingTargetStorage - Check if not concrete in inherited class
	Tango::Attr *loggingTargetStorageAttr = get_attr_object_by_name(att_list, "loggingTargetStorage");
	if (loggingTargetStorageAttr == NULL)
	{
	}

	//	Attribute : powerCut
	powerCutAttrib	*powercut = new powerCutAttrib();
	Tango::UserDefaultAttrProp	powercut_prop;
	//	description	not set for powerCut
	//	label	not set for powerCut
	//	unit	not set for powerCut
	//	standard_unit	not set for powerCut
	//	display_unit	not set for powerCut
	//	format	not set for powerCut
	//	max_value	not set for powerCut
	//	min_value	not set for powerCut
	//	max_alarm	not set for powerCut
	//	min_alarm	not set for powerCut
	//	max_warning	not set for powerCut
	//	min_warning	not set for powerCut
	//	delta_t	not set for powerCut
	//	delta_val	not set for powerCut
	powercut_prop.set_event_period("60000");
	
	powercut->set_default_properties(powercut_prop);
	powercut->set_polling_period(1000);
	powercut->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	powercut->set_change_event(true, false);
	att_list.push_back(powercut);

	//	Attribute : powerRestored
	powerRestoredAttrib	*powerrestored = new powerRestoredAttrib();
	Tango::UserDefaultAttrProp	powerrestored_prop;
	//	description	not set for powerRestored
	//	label	not set for powerRestored
	//	unit	not set for powerRestored
	//	standard_unit	not set for powerRestored
	//	display_unit	not set for powerRestored
	//	format	not set for powerRestored
	//	max_value	not set for powerRestored
	//	min_value	not set for powerRestored
	//	max_alarm	not set for powerRestored
	//	min_alarm	not set for powerRestored
	//	max_warning	not set for powerRestored
	//	min_warning	not set for powerRestored
	//	delta_t	not set for powerRestored
	//	delta_val	not set for powerRestored
	powerrestored_prop.set_event_period("60000");
	
	powerrestored->set_default_properties(powerrestored_prop);
	powerrestored->set_polling_period(1000);
	powerrestored->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	powerrestored->set_change_event(true, false);
	att_list.push_back(powerrestored);

	//	Attribute : attrRandomizationEnabled - Check if not concrete in inherited class
	Tango::Attr *attrRandomizationEnabledAttr = get_attr_object_by_name(att_list, "attrRandomizationEnabled");
	if (attrRandomizationEnabledAttr == NULL)
	{
	}

	//	Attribute : attrRandomizationPeriod - Check if not concrete in inherited class
	Tango::Attr *attrRandomizationPeriodAttr = get_attr_object_by_name(att_list, "attrRandomizationPeriod");
	if (attrRandomizationPeriodAttr == NULL)
	{
	}

	//	Attribute : stowProgress
	stowProgressAttrib	*stowprogress = new stowProgressAttrib();
	Tango::UserDefaultAttrProp	stowprogress_prop;
	//	description	not set for stowProgress
	//	label	not set for stowProgress
	//	unit	not set for stowProgress
	//	standard_unit	not set for stowProgress
	//	display_unit	not set for stowProgress
	//	format	not set for stowProgress
	//	max_value	not set for stowProgress
	//	min_value	not set for stowProgress
	//	max_alarm	not set for stowProgress
	//	min_alarm	not set for stowProgress
	//	max_warning	not set for stowProgress
	//	min_warning	not set for stowProgress
	//	delta_t	not set for stowProgress
	//	delta_val	not set for stowProgress
	stowprogress_prop.set_event_period("3000");
	
	stowprogress->set_default_properties(stowprogress_prop);
	stowprogress->set_polling_period(3000);
	stowprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	stowprogress->set_change_event(true, false);
	att_list.push_back(stowprogress);

	//	Attribute : indexingProgress
	indexingProgressAttrib	*indexingprogress = new indexingProgressAttrib();
	Tango::UserDefaultAttrProp	indexingprogress_prop;
	//	description	not set for indexingProgress
	//	label	not set for indexingProgress
	//	unit	not set for indexingProgress
	//	standard_unit	not set for indexingProgress
	//	display_unit	not set for indexingProgress
	//	format	not set for indexingProgress
	//	max_value	not set for indexingProgress
	//	min_value	not set for indexingProgress
	//	max_alarm	not set for indexingProgress
	//	min_alarm	not set for indexingProgress
	//	max_warning	not set for indexingProgress
	//	min_warning	not set for indexingProgress
	//	delta_t	not set for indexingProgress
	//	delta_val	not set for indexingProgress
	indexingprogress_prop.set_event_period("3000");
	
	indexingprogress->set_default_properties(indexingprogress_prop);
	indexingprogress->set_polling_period(3000);
	indexingprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	indexingprogress->set_change_event(true, false);
	att_list.push_back(indexingprogress);

	//	Attribute : achievedPointing
	achievedPointingAttrib	*achievedpointing = new achievedPointingAttrib();
	Tango::UserDefaultAttrProp	achievedpointing_prop;
	achievedpointing_prop.set_description("Actual pointing coordinates\n[0]: Timestamp (milliseconds since UNIX epoch, UTC)\n[1]: Azimuth\n[2]: Elevation");
	//	label	not set for achievedPointing
	//	unit	not set for achievedPointing
	//	standard_unit	not set for achievedPointing
	//	display_unit	not set for achievedPointing
	//	format	not set for achievedPointing
	//	max_value	not set for achievedPointing
	//	min_value	not set for achievedPointing
	//	max_alarm	not set for achievedPointing
	//	min_alarm	not set for achievedPointing
	//	max_warning	not set for achievedPointing
	//	min_warning	not set for achievedPointing
	//	delta_t	not set for achievedPointing
	//	delta_val	not set for achievedPointing
	achievedpointing_prop.set_event_rel_change("1");
	achievedpointing_prop.set_archive_event_rel_change("1");
	
	achievedpointing->set_default_properties(achievedpointing_prop);
	achievedpointing->set_polling_period(100);
	achievedpointing->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	achievedpointing->set_change_event(true, false);
	att_list.push_back(achievedpointing);

	//	Attribute : desiredPointing
	desiredPointingAttrib	*desiredpointing = new desiredPointingAttrib();
	Tango::UserDefaultAttrProp	desiredpointing_prop;
	desiredpointing_prop.set_description("Desired pointing coordinates\n[0]: Timestamp (Milliseconds since UNIX epoch, UTC Time at which Dish should start\napplying the polynomial)\n[1]: Az (0th order pol coeff)\n[2]: El (0th order pol coeff)\n[3]: Az (1st order pol coeff)\n[4]: El (1st order pol coeff)\n[5]: Az (2nd order pol coeff)\n[6]: El (2nd order pol coeff)");
	//	label	not set for desiredPointing
	//	unit	not set for desiredPointing
	//	standard_unit	not set for desiredPointing
	//	display_unit	not set for desiredPointing
	//	format	not set for desiredPointing
	//	max_value	not set for desiredPointing
	//	min_value	not set for desiredPointing
	//	max_alarm	not set for desiredPointing
	//	min_alarm	not set for desiredPointing
	//	max_warning	not set for desiredPointing
	//	min_warning	not set for desiredPointing
	//	delta_t	not set for desiredPointing
	//	delta_val	not set for desiredPointing
	desiredpointing_prop.set_event_rel_change("1");
	desiredpointing_prop.set_archive_event_rel_change("1");
	
	desiredpointing->set_default_properties(desiredpointing_prop);
	desiredpointing->set_polling_period(100);
	desiredpointing->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	desiredpointing->set_change_event(true, false);
	att_list.push_back(desiredpointing);

	//	Attribute : setStandbyLPModeProgress
	setStandbyLPModeProgressAttrib	*setstandbylpmodeprogress = new setStandbyLPModeProgressAttrib();
	Tango::UserDefaultAttrProp	setstandbylpmodeprogress_prop;
	//	description	not set for setStandbyLPModeProgress
	//	label	not set for setStandbyLPModeProgress
	//	unit	not set for setStandbyLPModeProgress
	//	standard_unit	not set for setStandbyLPModeProgress
	//	display_unit	not set for setStandbyLPModeProgress
	//	format	not set for setStandbyLPModeProgress
	//	max_value	not set for setStandbyLPModeProgress
	//	min_value	not set for setStandbyLPModeProgress
	//	max_alarm	not set for setStandbyLPModeProgress
	//	min_alarm	not set for setStandbyLPModeProgress
	//	max_warning	not set for setStandbyLPModeProgress
	//	min_warning	not set for setStandbyLPModeProgress
	//	delta_t	not set for setStandbyLPModeProgress
	//	delta_val	not set for setStandbyLPModeProgress
	setstandbylpmodeprogress_prop.set_event_period("3000");
	
	setstandbylpmodeprogress->set_default_properties(setstandbylpmodeprogress_prop);
	setstandbylpmodeprogress->set_polling_period(3000);
	setstandbylpmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setstandbylpmodeprogress->set_change_event(true, false);
	setstandbylpmodeprogress->set_archive_event(true, false);
	att_list.push_back(setstandbylpmodeprogress);

	//	Attribute : setStandbyFPModeProgress
	setStandbyFPModeProgressAttrib	*setstandbyfpmodeprogress = new setStandbyFPModeProgressAttrib();
	Tango::UserDefaultAttrProp	setstandbyfpmodeprogress_prop;
	//	description	not set for setStandbyFPModeProgress
	//	label	not set for setStandbyFPModeProgress
	//	unit	not set for setStandbyFPModeProgress
	//	standard_unit	not set for setStandbyFPModeProgress
	//	display_unit	not set for setStandbyFPModeProgress
	//	format	not set for setStandbyFPModeProgress
	//	max_value	not set for setStandbyFPModeProgress
	//	min_value	not set for setStandbyFPModeProgress
	//	max_alarm	not set for setStandbyFPModeProgress
	//	min_alarm	not set for setStandbyFPModeProgress
	//	max_warning	not set for setStandbyFPModeProgress
	//	min_warning	not set for setStandbyFPModeProgress
	//	delta_t	not set for setStandbyFPModeProgress
	//	delta_val	not set for setStandbyFPModeProgress
	setstandbyfpmodeprogress_prop.set_event_period("3000");
	
	setstandbyfpmodeprogress->set_default_properties(setstandbyfpmodeprogress_prop);
	setstandbyfpmodeprogress->set_polling_period(3000);
	setstandbyfpmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setstandbyfpmodeprogress->set_change_event(true, false);
	setstandbyfpmodeprogress->set_archive_event(true, false);
	att_list.push_back(setstandbyfpmodeprogress);

	//	Attribute : setPointModeProgress
	setPointModeProgressAttrib	*setpointmodeprogress = new setPointModeProgressAttrib();
	Tango::UserDefaultAttrProp	setpointmodeprogress_prop;
	//	description	not set for setPointModeProgress
	//	label	not set for setPointModeProgress
	//	unit	not set for setPointModeProgress
	//	standard_unit	not set for setPointModeProgress
	//	display_unit	not set for setPointModeProgress
	//	format	not set for setPointModeProgress
	//	max_value	not set for setPointModeProgress
	//	min_value	not set for setPointModeProgress
	//	max_alarm	not set for setPointModeProgress
	//	min_alarm	not set for setPointModeProgress
	//	max_warning	not set for setPointModeProgress
	//	min_warning	not set for setPointModeProgress
	//	delta_t	not set for setPointModeProgress
	//	delta_val	not set for setPointModeProgress
	setpointmodeprogress_prop.set_event_period("3000");
	
	setpointmodeprogress->set_default_properties(setpointmodeprogress_prop);
	setpointmodeprogress->set_polling_period(3000);
	setpointmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setpointmodeprogress->set_change_event(true, false);
	setpointmodeprogress->set_archive_event(true, false);
	att_list.push_back(setpointmodeprogress);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(DSEmulatorClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : DSEmulatorClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void DSEmulatorClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(DSEmulatorClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::pipe_factory_before
	/*----- PROTECTED REGION ID(DSEmulatorClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : DSEmulatorClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void DSEmulatorClass::command_factory()
{
	/*----- PROTECTED REGION ID(DSEmulatorClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::command_factory_before
	//	Call command_factory for inherited class
	LMCDevice_ns::LMCDeviceClass::command_factory();




























	//	Command SetStandbyLPMode
	SetStandbyLPModeClass	*pSetStandbyLPModeCmd =
		new SetStandbyLPModeClass("SetStandbyLPMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetStandbyLPModeCmd);

	//	Command SetStandbyFPMode
	SetStandbyFPModeClass	*pSetStandbyFPModeCmd =
		new SetStandbyFPModeClass("SetStandbyFPMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetStandbyFPModeCmd);

	//	Command SetPointMode
	SetPointModeClass	*pSetPointModeCmd =
		new SetPointModeClass("SetPointMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetPointModeCmd);

	//	Command Stow
	StowClass	*pStowCmd =
		new StowClass("Stow",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"== Long field ==\n[0]: ack code (0=OK, 1=QUEUED, 2=FAILED)\n\n== String field ==\n[0]: Informative message or error/fault description",
			Tango::OPERATOR);
	command_list.push_back(pStowCmd);

	//	Command SetMaintenanceMode
	SetMaintenanceModeClass	*pSetMaintenanceModeCmd =
		new SetMaintenanceModeClass("SetMaintenanceMode",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetMaintenanceModeCmd);

	//	Command SetIndexPosition
	SetIndexPositionClass	*pSetIndexPositionCmd =
		new SetIndexPositionClass("SetIndexPosition",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"Indexer position [1-5]",
			"== Long field ==\n[0]: ack code (0=OK, 1=QUEUED, 2=FAILED)\n\n== String field ==\n[0]: Informative message or error/fault description",
			Tango::OPERATOR);
	command_list.push_back(pSetIndexPositionCmd);

	//	Command SimulatePowerCut
	SimulatePowerCutClass	*pSimulatePowerCutCmd =
		new SimulatePowerCutClass("SimulatePowerCut",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSimulatePowerCutCmd);

	//	Command SimulatePowerRestore
	SimulatePowerRestoreClass	*pSimulatePowerRestoreCmd =
		new SimulatePowerRestoreClass("SimulatePowerRestore",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSimulatePowerRestoreCmd);

	//	Command SimulateESTOP
	SimulateESTOPClass	*pSimulateESTOPCmd =
		new SimulateESTOPClass("SimulateESTOP",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSimulateESTOPCmd);

	//	Command GetTrackProgram
	GetTrackProgramClass	*pGetTrackProgramCmd =
		new GetTrackProgramClass("GetTrackProgram",
			Tango::DEV_VOID, Tango::DEVVAR_STRINGARRAY,
			"",
			"List of track program items",
			Tango::EXPERT);
	command_list.push_back(pGetTrackProgramCmd);

	//	Command FlushTrackProgram
	FlushTrackProgramClass	*pFlushTrackProgramCmd =
		new FlushTrackProgramClass("FlushTrackProgram",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pFlushTrackProgramCmd);

	//	Command PauseTracking
	PauseTrackingClass	*pPauseTrackingCmd =
		new PauseTrackingClass("PauseTracking",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pPauseTrackingCmd);

	//	Command ResumeTracking
	ResumeTrackingClass	*pResumeTrackingCmd =
		new ResumeTrackingClass("ResumeTracking",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pResumeTrackingCmd);

	//	Command ResetProgressAttrs
	ResetProgressAttrsClass	*pResetProgressAttrsCmd =
		new ResetProgressAttrsClass("ResetProgressAttrs",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pResetProgressAttrsCmd);


	//	Command ResetPowerCutAttrs
	ResetPowerCutAttrsClass	*pResetPowerCutAttrsCmd =
		new ResetPowerCutAttrsClass("ResetPowerCutAttrs",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pResetPowerCutAttrsCmd);

	/*----- PROTECTED REGION ID(DSEmulatorClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		DSEmulatorClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void DSEmulatorClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(DSEmulatorClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		DSEmulatorClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void DSEmulatorClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		DSEmulator *dev = static_cast<DSEmulator *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(DSEmulatorClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : DSEmulatorClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *DSEmulatorClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(DSEmulatorClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::Additional Methods
} //	namespace
