/*----- PROTECTED REGION ID(DSEmulatorClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        DSEmulatorClass.h
//
// description : Include for the DSEmulator root class.
//               This class is the singleton class for
//                the DSEmulator device class.
//               It contains all properties and methods which the 
//               DSEmulator requires only once e.g. the commands.
//
// project :     DSEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef DSEmulatorClass_H
#define DSEmulatorClass_H

#include <tango.h>
#include <LMCDeviceClass.h>
#include <DSEmulator.h>


/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass.h


namespace DSEmulator_ns
{
/*----- PROTECTED REGION ID(DSEmulatorClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute powerCut class definition
class powerCutAttrib: public Tango::Attr
{
public:
	powerCutAttrib():Attr("powerCut",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~powerCutAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DSEmulator *>(dev))->read_powerCut(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DSEmulator *>(dev))->is_powerCut_allowed(ty);}
};

//	Attribute powerRestored class definition
class powerRestoredAttrib: public Tango::Attr
{
public:
	powerRestoredAttrib():Attr("powerRestored",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~powerRestoredAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DSEmulator *>(dev))->read_powerRestored(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DSEmulator *>(dev))->is_powerRestored_allowed(ty);}
};

//	Attribute stowProgress class definition
class stowProgressAttrib: public Tango::SpectrumAttr
{
public:
	stowProgressAttrib():SpectrumAttr("stowProgress",
			Tango::DEV_STRING, Tango::READ, 2) {};
	~stowProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DSEmulator *>(dev))->read_stowProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DSEmulator *>(dev))->is_stowProgress_allowed(ty);}
};

//	Attribute indexingProgress class definition
class indexingProgressAttrib: public Tango::SpectrumAttr
{
public:
	indexingProgressAttrib():SpectrumAttr("indexingProgress",
			Tango::DEV_STRING, Tango::READ, 2) {};
	~indexingProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DSEmulator *>(dev))->read_indexingProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DSEmulator *>(dev))->is_indexingProgress_allowed(ty);}
};

//	Attribute achievedPointing class definition
class achievedPointingAttrib: public Tango::SpectrumAttr
{
public:
	achievedPointingAttrib():SpectrumAttr("achievedPointing",
			Tango::DEV_DOUBLE, Tango::READ, 3) {};
	~achievedPointingAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DSEmulator *>(dev))->read_achievedPointing(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DSEmulator *>(dev))->is_achievedPointing_allowed(ty);}
};

//	Attribute desiredPointing class definition
class desiredPointingAttrib: public Tango::SpectrumAttr
{
public:
	desiredPointingAttrib():SpectrumAttr("desiredPointing",
			Tango::DEV_DOUBLE, Tango::READ_WRITE, 7) {};
	~desiredPointingAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DSEmulator *>(dev))->read_desiredPointing(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<DSEmulator *>(dev))->write_desiredPointing(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DSEmulator *>(dev))->is_desiredPointing_allowed(ty);}
};

//	Attribute setStandbyLPModeProgress class definition
class setStandbyLPModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setStandbyLPModeProgressAttrib():SpectrumAttr("setStandbyLPModeProgress",
			Tango::DEV_STRING, Tango::READ, 2) {};
	~setStandbyLPModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DSEmulator *>(dev))->read_setStandbyLPModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DSEmulator *>(dev))->is_setStandbyLPModeProgress_allowed(ty);}
};

//	Attribute setStandbyFPModeProgress class definition
class setStandbyFPModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setStandbyFPModeProgressAttrib():SpectrumAttr("setStandbyFPModeProgress",
			Tango::DEV_STRING, Tango::READ, 2) {};
	~setStandbyFPModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DSEmulator *>(dev))->read_setStandbyFPModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DSEmulator *>(dev))->is_setStandbyFPModeProgress_allowed(ty);}
};

//	Attribute setPointModeProgress class definition
class setPointModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setPointModeProgressAttrib():SpectrumAttr("setPointModeProgress",
			Tango::DEV_STRING, Tango::READ, 2) {};
	~setPointModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DSEmulator *>(dev))->read_setPointModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DSEmulator *>(dev))->is_setPointModeProgress_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command SetStandbyLPMode class definition
class SetStandbyLPModeClass : public Tango::Command
{
public:
	SetStandbyLPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetStandbyLPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetStandbyLPModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_SetStandbyLPMode_allowed(any);}
};

//	Command SetStandbyFPMode class definition
class SetStandbyFPModeClass : public Tango::Command
{
public:
	SetStandbyFPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetStandbyFPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetStandbyFPModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_SetStandbyFPMode_allowed(any);}
};

//	Command SetPointMode class definition
class SetPointModeClass : public Tango::Command
{
public:
	SetPointModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetPointModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetPointModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_SetPointMode_allowed(any);}
};

//	Command Stow class definition
class StowClass : public Tango::Command
{
public:
	StowClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StowClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StowClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_Stow_allowed(any);}
};

//	Command SetMaintenanceMode class definition
class SetMaintenanceModeClass : public Tango::Command
{
public:
	SetMaintenanceModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetMaintenanceModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetMaintenanceModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_SetMaintenanceMode_allowed(any);}
};

//	Command SetIndexPosition class definition
class SetIndexPositionClass : public Tango::Command
{
public:
	SetIndexPositionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetIndexPositionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetIndexPositionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_SetIndexPosition_allowed(any);}
};

//	Command SimulatePowerCut class definition
class SimulatePowerCutClass : public Tango::Command
{
public:
	SimulatePowerCutClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SimulatePowerCutClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SimulatePowerCutClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_SimulatePowerCut_allowed(any);}
};

//	Command SimulatePowerRestore class definition
class SimulatePowerRestoreClass : public Tango::Command
{
public:
	SimulatePowerRestoreClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SimulatePowerRestoreClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SimulatePowerRestoreClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_SimulatePowerRestore_allowed(any);}
};

//	Command SimulateESTOP class definition
class SimulateESTOPClass : public Tango::Command
{
public:
	SimulateESTOPClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SimulateESTOPClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SimulateESTOPClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_SimulateESTOP_allowed(any);}
};

//	Command GetTrackProgram class definition
class GetTrackProgramClass : public Tango::Command
{
public:
	GetTrackProgramClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetTrackProgramClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetTrackProgramClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_GetTrackProgram_allowed(any);}
};

//	Command FlushTrackProgram class definition
class FlushTrackProgramClass : public Tango::Command
{
public:
	FlushTrackProgramClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	FlushTrackProgramClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~FlushTrackProgramClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_FlushTrackProgram_allowed(any);}
};

//	Command PauseTracking class definition
class PauseTrackingClass : public Tango::Command
{
public:
	PauseTrackingClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	PauseTrackingClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~PauseTrackingClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_PauseTracking_allowed(any);}
};

//	Command ResumeTracking class definition
class ResumeTrackingClass : public Tango::Command
{
public:
	ResumeTrackingClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResumeTrackingClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResumeTrackingClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_ResumeTracking_allowed(any);}
};

//	Command ResetProgressAttrs class definition
class ResetProgressAttrsClass : public Tango::Command
{
public:
	ResetProgressAttrsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetProgressAttrsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetProgressAttrsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_ResetProgressAttrs_allowed(any);}
};

//	Command ResetPowerCutAttrs class definition
class ResetPowerCutAttrsClass : public Tango::Command
{
public:
	ResetPowerCutAttrsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetPowerCutAttrsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetPowerCutAttrsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_ResetPowerCutAttrs_allowed(any);}
};


//=========================================
//	Define classes for dynamic commands
//=========================================
//	Command dummyDynCmd class definition
class dummyDynCmdClass : public Tango::Command
{
public:
	dummyDynCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	dummyDynCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~dummyDynCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DSEmulator *>(dev))->is_dummyDynCmd_allowed(any);}
};


/**
 *	The DSEmulatorClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  DSEmulatorClass : public LMCDevice_ns::LMCDeviceClass
#else
class DSEmulatorClass : public LMCDevice_ns::LMCDeviceClass
#endif
{
	/*----- PROTECTED REGION ID(DSEmulatorClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	DSEmulatorClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static DSEmulatorClass *init(const char *);
		static DSEmulatorClass *instance();
		~DSEmulatorClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		DSEmulatorClass(string &);
		static DSEmulatorClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	DSEmulator_H
