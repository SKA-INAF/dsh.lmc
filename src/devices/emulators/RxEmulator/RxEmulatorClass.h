/*----- PROTECTED REGION ID(RxEmulatorClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        RxEmulatorClass.h
//
// description : Include for the RxEmulator root class.
//               This class is the singleton class for
//                the RxEmulator device class.
//               It contains all properties and methods which the 
//               RxEmulator requires only once e.g. the commands.
//
// project :     RxEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef RxEmulatorClass_H
#define RxEmulatorClass_H

#include <tango.h>
#include <LMCDeviceClass.h>
#include <RxEmulator.h>


/*----- PROTECTED REGION END -----*/	//	RxEmulatorClass.h


namespace RxEmulator_ns
{
/*----- PROTECTED REGION ID(RxEmulatorClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	RxEmulatorClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute configureBandProgress class definition
class configureBandProgressAttrib: public Tango::SpectrumAttr
{
public:
	configureBandProgressAttrib():SpectrumAttr("configureBandProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~configureBandProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_configureBandProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_configureBandProgress_allowed(ty);}
};

//	Attribute firmware0UpdateProgress class definition
class firmware0UpdateProgressAttrib: public Tango::SpectrumAttr
{
public:
	firmware0UpdateProgressAttrib():SpectrumAttr("firmware0UpdateProgress",
			Tango::DEV_STRING, Tango::READ, 4) {};
	~firmware0UpdateProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_firmware0UpdateProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_firmware0UpdateProgress_allowed(ty);}
};

//	Attribute firmware1UpdateProgress class definition
class firmware1UpdateProgressAttrib: public Tango::SpectrumAttr
{
public:
	firmware1UpdateProgressAttrib():SpectrumAttr("firmware1UpdateProgress",
			Tango::DEV_STRING, Tango::READ, 4) {};
	~firmware1UpdateProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_firmware1UpdateProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_firmware1UpdateProgress_allowed(ty);}
};

//	Attribute firmware2UpdateProgress class definition
class firmware2UpdateProgressAttrib: public Tango::SpectrumAttr
{
public:
	firmware2UpdateProgressAttrib():SpectrumAttr("firmware2UpdateProgress",
			Tango::DEV_STRING, Tango::READ, 4) {};
	~firmware2UpdateProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_firmware2UpdateProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_firmware2UpdateProgress_allowed(ty);}
};

//	Attribute firmware3UpdateProgress class definition
class firmware3UpdateProgressAttrib: public Tango::SpectrumAttr
{
public:
	firmware3UpdateProgressAttrib():SpectrumAttr("firmware3UpdateProgress",
			Tango::DEV_STRING, Tango::READ, 4) {};
	~firmware3UpdateProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<RxEmulator *>(dev))->read_firmware3UpdateProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<RxEmulator *>(dev))->is_firmware3UpdateProgress_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Synchronise class definition
class SynchroniseClass : public Tango::Command
{
public:
	SynchroniseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SynchroniseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SynchroniseClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_Synchronise_allowed(any);}
};

//	Command ConfigureBand class definition
class ConfigureBandClass : public Tango::Command
{
public:
	ConfigureBandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureBandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureBandClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_ConfigureBand_allowed(any);}
};

//	Command ConfigureBand1 class definition
class ConfigureBand1Class : public Tango::Command
{
public:
	ConfigureBand1Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureBand1Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureBand1Class() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_ConfigureBand1_allowed(any);}
};

//	Command ConfigureBand2 class definition
class ConfigureBand2Class : public Tango::Command
{
public:
	ConfigureBand2Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureBand2Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureBand2Class() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_ConfigureBand2_allowed(any);}
};

//	Command ConfigureBand3 class definition
class ConfigureBand3Class : public Tango::Command
{
public:
	ConfigureBand3Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureBand3Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureBand3Class() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_ConfigureBand3_allowed(any);}
};

//	Command ConfigureBand4 class definition
class ConfigureBand4Class : public Tango::Command
{
public:
	ConfigureBand4Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureBand4Class(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureBand4Class() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_ConfigureBand4_allowed(any);}
};

//	Command ConfigureBand5a class definition
class ConfigureBand5aClass : public Tango::Command
{
public:
	ConfigureBand5aClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureBand5aClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureBand5aClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_ConfigureBand5a_allowed(any);}
};

//	Command ConfigureBand5b class definition
class ConfigureBand5bClass : public Tango::Command
{
public:
	ConfigureBand5bClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureBand5bClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureBand5bClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_ConfigureBand5b_allowed(any);}
};

//	Command ConfigureBandAsync class definition
class ConfigureBandAsyncClass : public Tango::Command
{
public:
	ConfigureBandAsyncClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureBandAsyncClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureBandAsyncClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_ConfigureBandAsync_allowed(any);}
};

//	Command CaptureData class definition
class CaptureDataClass : public Tango::Command
{
public:
	CaptureDataClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	CaptureDataClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~CaptureDataClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_CaptureData_allowed(any);}
};

//	Command SetSubElementMode class definition
class SetSubElementModeClass : public Tango::Command
{
public:
	SetSubElementModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetSubElementModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetSubElementModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetSubElementMode_allowed(any);}
};

//	Command SetSubElementModeStr class definition
class SetSubElementModeStrClass : public Tango::Command
{
public:
	SetSubElementModeStrClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetSubElementModeStrClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetSubElementModeStrClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetSubElementModeStr_allowed(any);}
};

//	Command SetStandbyLPMode class definition
class SetStandbyLPModeClass : public Tango::Command
{
public:
	SetStandbyLPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetStandbyLPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetStandbyLPModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetStandbyLPMode_allowed(any);}
};

//	Command SetStandbyFPMode class definition
class SetStandbyFPModeClass : public Tango::Command
{
public:
	SetStandbyFPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetStandbyFPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetStandbyFPModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetStandbyFPMode_allowed(any);}
};

//	Command SetMaintenanceMode class definition
class SetMaintenanceModeClass : public Tango::Command
{
public:
	SetMaintenanceModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetMaintenanceModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetMaintenanceModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetMaintenanceMode_allowed(any);}
};

//	Command EnableEngineeringMode class definition
class EnableEngineeringModeClass : public Tango::Command
{
public:
	EnableEngineeringModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	EnableEngineeringModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~EnableEngineeringModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_EnableEngineeringMode_allowed(any);}
};

//	Command UpdateFirmware class definition
class UpdateFirmwareClass : public Tango::Command
{
public:
	UpdateFirmwareClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	UpdateFirmwareClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~UpdateFirmwareClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_UpdateFirmware_allowed(any);}
};

//	Command SetHighPowerState class definition
class SetHighPowerStateClass : public Tango::Command
{
public:
	SetHighPowerStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetHighPowerStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetHighPowerStateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_SetHighPowerState_allowed(any);}
};

//	Command AdjustPolHAttenuation class definition
class AdjustPolHAttenuationClass : public Tango::Command
{
public:
	AdjustPolHAttenuationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AdjustPolHAttenuationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AdjustPolHAttenuationClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_AdjustPolHAttenuation_allowed(any);}
};

//	Command AdjustPolVAttenuation class definition
class AdjustPolVAttenuationClass : public Tango::Command
{
public:
	AdjustPolVAttenuationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AdjustPolVAttenuationClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AdjustPolVAttenuationClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_AdjustPolVAttenuation_allowed(any);}
};

//	Command Shutdown class definition
class ShutdownClass : public Tango::Command
{
public:
	ShutdownClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ShutdownClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ShutdownClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_Shutdown_allowed(any);}
};


//=========================================
//	Define classes for dynamic commands
//=========================================
//	Command dummyDynCmd class definition
class dummyDynCmdClass : public Tango::Command
{
public:
	dummyDynCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	dummyDynCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~dummyDynCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<RxEmulator *>(dev))->is_dummyDynCmd_allowed(any);}
};


/**
 *	The RxEmulatorClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  RxEmulatorClass : public LMCDevice_ns::LMCDeviceClass
#else
class RxEmulatorClass : public LMCDevice_ns::LMCDeviceClass
#endif
{
	/*----- PROTECTED REGION ID(RxEmulatorClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulatorClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static RxEmulatorClass *init(const char *);
		static RxEmulatorClass *instance();
		~RxEmulatorClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		RxEmulatorClass(string &);
		static RxEmulatorClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	RxEmulator_H
