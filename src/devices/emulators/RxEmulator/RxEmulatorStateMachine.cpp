/*----- PROTECTED REGION ID(RxEmulatorStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        RxEmulatorStateMachine.cpp
//
// description : State machine file for the RxEmulator class
//
// project :     RxEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <RxEmulator.h>

#include <Logger.h>
#include <TangoUtils.h>


/*----- PROTECTED REGION END -----*/	//	RxEmulator::RxEmulatorStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  ON       |  
//  OFF      |  
//  INIT     |  
//  FAULT    |  
//  RUNNING  |  
//  ALARM    |  
//  UNKNOWN  |  
//  MOVING   |  


namespace RxEmulator_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_configureBandProgress_allowed()
 *	Description : Execution allowed for configureBandProgress attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_configureBandProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for configureBandProgress attribute in read access.
	/*----- PROTECTED REGION ID(RxEmulator::configureBandProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::configureBandProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_firmware0UpdateProgress_allowed()
 *	Description : Execution allowed for firmware0UpdateProgress attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_firmware0UpdateProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for firmware0UpdateProgress attribute in read access.
	/*----- PROTECTED REGION ID(RxEmulator::firmware0UpdateProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::firmware0UpdateProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_firmware1UpdateProgress_allowed()
 *	Description : Execution allowed for firmware1UpdateProgress attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_firmware1UpdateProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for firmware1UpdateProgress attribute in read access.
	/*----- PROTECTED REGION ID(RxEmulator::firmware1UpdateProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::firmware1UpdateProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_firmware2UpdateProgress_allowed()
 *	Description : Execution allowed for firmware2UpdateProgress attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_firmware2UpdateProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for firmware2UpdateProgress attribute in read access.
	/*----- PROTECTED REGION ID(RxEmulator::firmware2UpdateProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::firmware2UpdateProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_firmware3UpdateProgress_allowed()
 *	Description : Execution allowed for firmware3UpdateProgress attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_firmware3UpdateProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for firmware3UpdateProgress attribute in read access.
	/*----- PROTECTED REGION ID(RxEmulator::firmware3UpdateProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::firmware3UpdateProgressStateAllowed_READ
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_Synchronise_allowed()
 *	Description : Execution allowed for Synchronise attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_Synchronise_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Synchronise command.
	/*----- PROTECTED REGION ID(RxEmulator::SynchroniseStateAllowed) ENABLED START -----*/
	

	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}


	/*----- PROTECTED REGION END -----*/	//	RxEmulator::SynchroniseStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_ConfigureBand_allowed()
 *	Description : Execution allowed for ConfigureBand attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_ConfigureBand_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand command.
	/*----- PROTECTED REGION ID(RxEmulator::ConfigureBandStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::ConfigureBandStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_ConfigureBand1_allowed()
 *	Description : Execution allowed for ConfigureBand1 attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_ConfigureBand1_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand1 command.
	/*----- PROTECTED REGION ID(RxEmulator::ConfigureBand1StateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}


	/*----- PROTECTED REGION END -----*/	//	RxEmulator::ConfigureBand1StateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_ConfigureBand2_allowed()
 *	Description : Execution allowed for ConfigureBand2 attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_ConfigureBand2_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand2 command.
	/*----- PROTECTED REGION ID(RxEmulator::ConfigureBand2StateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::ConfigureBand2StateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_ConfigureBand3_allowed()
 *	Description : Execution allowed for ConfigureBand3 attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_ConfigureBand3_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand3 command.
	/*----- PROTECTED REGION ID(RxEmulator::ConfigureBand3StateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}


	/*----- PROTECTED REGION END -----*/	//	RxEmulator::ConfigureBand3StateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_ConfigureBand4_allowed()
 *	Description : Execution allowed for ConfigureBand4 attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_ConfigureBand4_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand4 command.
	/*----- PROTECTED REGION ID(RxEmulator::ConfigureBand4StateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}


	/*----- PROTECTED REGION END -----*/	//	RxEmulator::ConfigureBand4StateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_ConfigureBand5a_allowed()
 *	Description : Execution allowed for ConfigureBand5a attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_ConfigureBand5a_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand5a command.
	/*----- PROTECTED REGION ID(RxEmulator::ConfigureBand5aStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}


	/*----- PROTECTED REGION END -----*/	//	RxEmulator::ConfigureBand5aStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_ConfigureBand5b_allowed()
 *	Description : Execution allowed for ConfigureBand5b attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_ConfigureBand5b_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand5b command.
	/*----- PROTECTED REGION ID(RxEmulator::ConfigureBand5bStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}


	/*----- PROTECTED REGION END -----*/	//	RxEmulator::ConfigureBand5bStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_ConfigureBandAsync_allowed()
 *	Description : Execution allowed for ConfigureBandAsync attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_ConfigureBandAsync_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBandAsync command.
	/*----- PROTECTED REGION ID(RxEmulator::ConfigureBandAsyncStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	//=====================================================
	//==         CHECK IF CONFIGURE TASK IS RUNNING
	//=====================================================
	_DEBUG_LOG("Check if a previous ConfigureTask is already running...");
	{
		omni_mutex_lock guard(m_mutex);
		if( strcmp(attr_configureBandProgress_read[0],"RUNNING")==0  || strcmp(attr_configureBandProgress_read[0],"IDLE")==0 ){
			std::stringstream ss;
			ss<<"Another ConfigureBand task is running or waiting for execution in device!";
			_INFO_LOG(ss.str());
			_THROW_TANGO_EXCEPTION("CONFIGURE_FAILED",ss.str());
		}
	}

	/*----- PROTECTED REGION END -----*/	//	RxEmulator::ConfigureBandAsyncStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_CaptureData_allowed()
 *	Description : Execution allowed for CaptureData attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_CaptureData_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for CaptureData command.
	/*----- PROTECTED REGION ID(RxEmulator::CaptureDataStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	RxEmulator::CaptureDataStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_SetSubElementMode_allowed()
 *	Description : Execution allowed for SetSubElementMode attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_SetSubElementMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSubElementMode command.
	/*----- PROTECTED REGION ID(RxEmulator::SetSubElementModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string attr_name= "operatingMode";
	std::vector<std::string> cap_attr_names= {
		"b1CapabilityState",
		"b2CapabilityState",
		"b3CapabilityState",
		"b4CapabilityState",
		"b5CapabilityState",
	};
	std::string cmd_name= "SetSubElementMode";
	//##############################################################################

	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShort)
	Tango::DevShort mode;
	if ((any>>=mode)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_FAILED",ss.str());
	}

	//## Check this is a valid mode enumeration
	std::string mode_str= "";
	if(Utils_ns::TangoUtils::GetEnumAttrLabelValue(mode_str,this,attr_name,mode)<0){
		std::stringstream ss;
		ss<<"Invalid mode enumeration given in argument (check mode enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_FAILED",ss.str());
	}

	//=====================================================
	//==         MODE CHECK
	//=====================================================
	//Retrieve current mode attr value
	Tango::DevShort current_mode;	
	if(GetDynAttrValue(current_mode,attr_name)<0){
		std::stringstream ss;
		ss<<"Failed to get attr "<<attr_name<<" value!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_FAILED",ss.str());
	}

	//Get string label
	std::string current_mode_str= "";
	Utils_ns::TangoUtils::GetEnumAttrLabelValue(current_mode_str,this,attr_name,current_mode);

	//Check if command can be invoked in current mode
	if(!Utils_ns::TangoUtils::IsCmdAllowed(this,cmd_name,attr_name,current_mode,true)){
		std::stringstream ss;
		ss<<"Command cannot be inkoved in current mode ("<<current_mode_str<<")!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_FAILED",ss.str());
	}

	//Check if allowed mode transition
	if(!IsAttrAllowed(attr_name,current_mode_str,mode_str,false)){
		std::stringstream ss;
		ss<<"Requested mode transition ("<<current_mode<<"-->"<<mode<<") is forbidden!";
		_INFO_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_FAILED",ss.str());
	}
	*/

	/*----- PROTECTED REGION END -----*/	//	RxEmulator::SetSubElementModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_SetSubElementModeStr_allowed()
 *	Description : Execution allowed for SetSubElementModeStr attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_SetSubElementModeStr_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSubElementModeStr command.
	/*----- PROTECTED REGION ID(RxEmulator::SetSubElementModeStrStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}


	/*
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string attr_name= "operatingMode";
	std::string cmd_name= "SetSubElementModeStr";
	//############################################################################

	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevString)
	Tango::DevString s;
	if ((any>>=const_cast<const char *&>(s))== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_STR_FAILED",ss.str());
	}
	std::string mode_str= std::string(s);

	//## Check this is a valid mode enumeration
	Tango::DevShort mode;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(mode,this,attr_name,mode_str)<0){
		std::stringstream ss;
		ss<<"Invalid mode enumeration given in argument (check mode enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_STR_FAILED",ss.str());
	}


	//=====================================================
	//==         MODE CHECK
	//=====================================================
	CORBA::Any any_in;
	any_in<<=mode;

	try{
		is_SetSubElementMode_allowed(any_in);
	}
	catch(...){
		throw;
	}
	*/

	/*----- PROTECTED REGION END -----*/	//	RxEmulator::SetSubElementModeStrStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_SetStandbyLPMode_allowed()
 *	Description : Execution allowed for SetStandbyLPMode attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_SetStandbyLPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetStandbyLPMode command.
	/*----- PROTECTED REGION ID(RxEmulator::SetStandbyLPModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*
	//###########################################################################
	//##    HARD-CODED PARAMETERS 
	//##    (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetStandbyLPMode";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> cap_attr_names= {
		"b1CapabilityState",
		"b2CapabilityState",
		"b3CapabilityState",
		"b4CapabilityState",
		"b5CapabilityState",
	};
	std::string activeBand_attr_name= "configuredBand";
	std::string mode_str= "STANDBY-LP"; 
	std::string powerState_str= "LOW-POWER";
	std::string capability_str= "STANDBY"; 
	//=====================================================

	_DEBUG_LOG("Checking if cmd "<<cmd_name<<" is allowed...");

	//Retrieve mode value corresponding to label
	Tango::DevShort mode;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(mode,this,attr_name,mode_str)<0){
		std::stringstream ss;
		ss<<"Invalid mode enumeration given in argument (check mode enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_STANDBY_LP_MODE_FAILED",ss.str());
	}

	//Retrieve powerState value corresponding to label
	Tango::DevShort powerState;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(powerState,this,powerState_attr_name,powerState_str)<0){
		std::stringstream ss;
		ss<<"Invalid powerState enumeration given in argument (check enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_STANDBY_LP_MODE_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	_DEBUG_LOG("Checking if cmd "<<cmd_name<<" is allowed when attr "<< attr_name<<" is equal to "<<mode<<"...");
	try {
		IsCmdAttrAllowed(cmd_name,attr_name,&mode,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER STATE
	//=====================================================
	_DEBUG_LOG("Checking if cmd "<<cmd_name<<" is allowed when attr "<< powerState_attr_name<<" is equal to "<<powerState<<"...");
	try {
		IsCmdAttrAllowed(cmd_name,powerState_attr_name,&powerState,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}
	*/

	/*----- PROTECTED REGION END -----*/	//	RxEmulator::SetStandbyLPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_SetStandbyFPMode_allowed()
 *	Description : Execution allowed for SetStandbyFPMode attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_SetStandbyFPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetStandbyFPMode command.
	/*----- PROTECTED REGION ID(RxEmulator::SetStandbyFPModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*
	//###########################################################################
	//##    HARD-CODED PARAMETERS 
	//##    (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetStandbyFPMode";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> cap_attr_names= {
		"b1CapabilityState",
		"b2CapabilityState",
		"b3CapabilityState",
		"b4CapabilityState",
		"b5CapabilityState",
	};
	std::string activeBand_attr_name= "configuredBand";
	std::string mode_str= "STANDBY-FP"; 
	std::string powerState_str= "FULL-POWER";
	std::string capability_str= "STANDBY"; 
	//=====================================================

	//Retrieve mode value corresponding to label
	Tango::DevShort mode;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(mode,this,attr_name,mode_str)<0){
		std::stringstream ss;
		ss<<"Invalid mode enumeration given in argument (check mode enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_STANDBY_FP_MODE_FAILED",ss.str());
	}

	//Retrieve powerState value corresponding to label
	Tango::DevShort powerState;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(powerState,this,powerState_attr_name,powerState_str)<0){
		std::stringstream ss;
		ss<<"Invalid powerState enumeration given in argument (check enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_STANDBY_FP_MODE_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed(cmd_name,attr_name,&mode,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER STATE
	//=====================================================
	try {
		IsCmdAttrAllowed(cmd_name,powerState_attr_name,&powerState,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}
	*/

	/*----- PROTECTED REGION END -----*/	//	RxEmulator::SetStandbyFPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_SetMaintenanceMode_allowed()
 *	Description : Execution allowed for SetMaintenanceMode attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_SetMaintenanceMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetMaintenanceMode command.
	/*----- PROTECTED REGION ID(RxEmulator::SetMaintenanceModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*
	//###########################################################################
	//##    HARD-CODED PARAMETERS 
	//##    (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetMaintenanceMode";
	std::string attr_name= "operatingMode";
	std::string mode_str= "MAINTENANCE"; 
	//=====================================================

	//Retrieve mode value corresponding to label
	Tango::DevShort mode;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(mode,this,attr_name,mode_str)<0){
		std::stringstream ss;
		ss<<"Invalid mode enumeration given in argument (check mode enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_MAINTENANCE_MODE_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed(cmd_name,attr_name,&mode,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}
	*/

	/*----- PROTECTED REGION END -----*/	//	RxEmulator::SetMaintenanceModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_EnableEngineeringMode_allowed()
 *	Description : Execution allowed for EnableEngineeringMode attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_EnableEngineeringMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for EnableEngineeringMode command.
	/*----- PROTECTED REGION ID(RxEmulator::EnableEngineeringModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	RxEmulator::EnableEngineeringModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_UpdateFirmware_allowed()
 *	Description : Execution allowed for UpdateFirmware attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_UpdateFirmware_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for UpdateFirmware command.
	/*----- PROTECTED REGION ID(RxEmulator::UpdateFirmwareStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::UpdateFirmwareStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_SetHighPowerState_allowed()
 *	Description : Execution allowed for SetHighPowerState attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_SetHighPowerState_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetHighPowerState command.
	/*----- PROTECTED REGION ID(RxEmulator::SetHighPowerStateStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::SetHighPowerStateStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_AdjustPolHAttenuation_allowed()
 *	Description : Execution allowed for AdjustPolHAttenuation attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_AdjustPolHAttenuation_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for AdjustPolHAttenuation command.
	/*----- PROTECTED REGION ID(RxEmulator::AdjustPolHAttenuationStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	RxEmulator::AdjustPolHAttenuationStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_AdjustPolVAttenuation_allowed()
 *	Description : Execution allowed for AdjustPolVAttenuation attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_AdjustPolVAttenuation_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for AdjustPolVAttenuation command.
	/*----- PROTECTED REGION ID(RxEmulator::AdjustPolVAttenuationStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	RxEmulator::AdjustPolVAttenuationStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_Shutdown_allowed()
 *	Description : Execution allowed for Shutdown attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_Shutdown_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Shutdown command.
	/*----- PROTECTED REGION ID(RxEmulator::ShutdownStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::ShutdownStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : RxEmulator::is_dummyDynCmd_allowed()
 *	Description : Execution allowed for dummyDynCmd attribute
 */
//--------------------------------------------------------
bool RxEmulator::is_dummyDynCmd_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for dummyDynCmd command.
	/*----- PROTECTED REGION ID(RxEmulator::dummyDynCmdStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	RxEmulator::dummyDynCmdStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(RxEmulator::RxEmulatorStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	RxEmulator::RxEmulatorStateAllowed.AdditionalMethods

}	//	End of namespace
