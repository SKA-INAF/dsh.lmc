/*----- PROTECTED REGION ID(SPFEmulatorClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        SPFEmulatorClass.cpp
//
// description : C++ source for the SPFEmulatorClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the SPFEmulator once per process.
//
// project :     SPFEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <SPFEmulatorClass.h>

#include <Logger.h>
#include <TangoUtils.h>

/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass.cpp

//-------------------------------------------------------------------
/**
 *	Create SPFEmulatorClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_SPFEmulator_class(const char *name) {
		return SPFEmulator_ns::SPFEmulatorClass::init(name);
	}
}

namespace SPFEmulator_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
SPFEmulatorClass *SPFEmulatorClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::SPFEmulatorClass(string &s)
 * description : 	constructor for the SPFEmulatorClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
SPFEmulatorClass::SPFEmulatorClass(string &s):LMCDevice_ns::LMCDeviceClass(s)
{
	cout2 << "Entering SPFEmulatorClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(SPFEmulatorClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::constructor

	cout2 << "Leaving SPFEmulatorClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::~SPFEmulatorClass()
 * description : 	destructor for the SPFEmulatorClass
 */
//--------------------------------------------------------
SPFEmulatorClass::~SPFEmulatorClass()
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
SPFEmulatorClass *SPFEmulatorClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new SPFEmulatorClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
SPFEmulatorClass *SPFEmulatorClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		SetLNAHPowerStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetLNAHPowerStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetLNAHPowerStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_lnahpower_state(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetLNAVPowerStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetLNAVPowerStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetLNAVPowerStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_lnavpower_state(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetAmp2HPowerStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetAmp2HPowerStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetAmp2HPowerStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_amp2_hpower_state(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetAmp2VPowerStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetAmp2VPowerStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetAmp2VPowerStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_amp2_vpower_state(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRFE1TempSetPointClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRFE1TempSetPointClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetRFE1TempSetPointClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_rfe1_temp_set_point(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRFE2TempCntrStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRFE2TempCntrStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetRFE2TempCntrStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_rfe2_temp_cntr_state(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetCryoMotorStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetCryoMotorStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetCryoMotorStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_cryo_motor_state(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetCryoMotorSpeedClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetCryoMotorSpeedClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetCryoMotorSpeedClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_cryo_motor_speed(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetVaValveStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetVaValveStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetVaValveStateClass::execute(): arrived" << endl;
	Tango::DevBoolean argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_va_valve_state(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSubElementModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSubElementModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSubElementModeClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_sub_element_mode(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetFeedModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetFeedModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetFeedModeClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_feed_mode(argin));
}

//--------------------------------------------------------
/**
 * method : 		SendFeedCommandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SendFeedCommandClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SendFeedCommandClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->send_feed_command(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetVacuumModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetVacuumModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetVacuumModeClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_vacuum_mode(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SendVacuumCommandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SendVacuumCommandClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SendVacuumCommandClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->send_vacuum_command(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetHeliumModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetHeliumModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetHeliumModeClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_helium_mode(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SendHeliumCommandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SendHeliumCommandClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SendHeliumCommandClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->send_helium_command(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetMCStartStateClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetMCStartStateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetMCStartStateClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_mcstart_state(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetStandbyLPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetStandbyLPModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetStandbyLPModeClass::execute(): arrived" << endl;
	return insert((static_cast<SPFEmulator *>(device))->set_standby_lpmode());
}

//--------------------------------------------------------
/**
 * method : 		SetOperateModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetOperateModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetOperateModeClass::execute(): arrived" << endl;
	return insert((static_cast<SPFEmulator *>(device))->set_operate_mode());
}

//--------------------------------------------------------
/**
 * method : 		SetMaintenanceModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetMaintenanceModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetMaintenanceModeClass::execute(): arrived" << endl;
	return insert((static_cast<SPFEmulator *>(device))->set_maintenance_mode());
}

//--------------------------------------------------------
/**
 * method : 		SetSubElementModeStrClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSubElementModeStrClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSubElementModeStrClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<SPFEmulator *>(device))->set_sub_element_mode_str(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		HaltClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *HaltClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "HaltClass::execute(): arrived" << endl;
	((static_cast<SPFEmulator *>(device))->halt());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ShutdownClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ShutdownClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ShutdownClass::execute(): arrived" << endl;
	((static_cast<SPFEmulator *>(device))->shutdown());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		RestartClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *RestartClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "RestartClass::execute(): arrived" << endl;
	((static_cast<SPFEmulator *>(device))->restart());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetFeedOperateModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetFeedOperateModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetFeedOperateModeClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_feed_operate_mode(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetFeedStandbyLPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetFeedStandbyLPModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetFeedStandbyLPModeClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_feed_standby_lpmode(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetFeedMaintenanceModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetFeedMaintenanceModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetFeedMaintenanceModeClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_feed_maintenance_mode(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetFeedClearErrorsAndRestartModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetFeedClearErrorsAndRestartModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetFeedClearErrorsAndRestartModeClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_feed_clear_errors_and_restart_mode(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetFeedRegenerationModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetFeedRegenerationModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetFeedRegenerationModeClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<SPFEmulator *>(device))->set_feed_regeneration_mode(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetCalSourceTempSetPointsToDefaultClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetCalSourceTempSetPointsToDefaultClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetCalSourceTempSetPointsToDefaultClass::execute(): arrived" << endl;
	((static_cast<SPFEmulator *>(device))->set_cal_source_temp_set_points_to_default());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetTempSetPointsToDefaultClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetTempSetPointsToDefaultClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetTempSetPointsToDefaultClass::execute(): arrived" << endl;
	((static_cast<SPFEmulator *>(device))->set_temp_set_points_to_default());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		dummyDynCmdClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *dummyDynCmdClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "dummyDynCmdClass::execute(): arrived" << endl;
	((static_cast<SPFEmulator *>(device))->dummy_dyn_cmd(*this));
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum SPFEmulatorClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum SPFEmulatorClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum SPFEmulatorClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void SPFEmulatorClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "StartupTime";
	prop_desc = "Average time for starting up SPF in seconds";
	prop_def  = "10";
	vect_data.clear();
	vect_data.push_back("10");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "GoOperationalTime";
	prop_desc = "Average time taken for going operational";
	prop_def  = "2";
	vect_data.clear();
	vect_data.push_back("2");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "EnableStartupFailure";
	prop_desc = "Enable/disable simulation of startup failures";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StartupFailureProbability";
	prop_desc = "Startup failure probability in range (0,1)";
	prop_def  = "0.1";
	vect_data.clear();
	vect_data.push_back("0.1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "EnableOperationalFailure";
	prop_desc = "Enable/disable simulation of failures during go operational step";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "OperationalFailureProbability";
	prop_desc = "Failure probability in range (0,1) for go operational task";
	prop_def  = "0.1";
	vect_data.clear();
	vect_data.push_back("0.1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "EnableAutoStartup";
	prop_desc = "if enabled automatically execute startup task";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "GoStandbyLPTime";
	prop_desc = "Average time taken for going to STANDBY-LP";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "GoMaintenanceTime";
	prop_desc = "Average time taken for going to MIANTENANCE";
	prop_def  = "10";
	vect_data.clear();
	vect_data.push_back("10");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "EnableStandbyLPFailure";
	prop_desc = "Enable/disable simulation of failures during go standbyLP step";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StandbyLPFailureProbability";
	prop_desc = "Failure probability in range (0,1) for go standbyLP task";
	prop_def  = "0.1";
	vect_data.clear();
	vect_data.push_back("0.1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "EnableMaintenanceFailure";
	prop_desc = "Enable/disable simulation of failures during go maintenance step";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MaintenanceFailureProbability";
	prop_desc = "Failure probability in range (0,1) for go standbyLP task";
	prop_def  = "0.1";
	vect_data.clear();
	vect_data.push_back("0.1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Rfe1TempSetPointDefault";
	prop_desc = "Default Rfe1 (Lna H/V) temperature setpoint";
	prop_def  = "4";
	vect_data.clear();
	vect_data.push_back("4");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "CalSourceTempSetPointDefault";
	prop_desc = "Default calibration source temp setpoint";
	prop_def  = "4";
	vect_data.clear();
	vect_data.push_back("4");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Rfe2TempSetPointDefault";
	prop_desc = "Default Rfe2 temp setpoint";
	prop_def  = "4";
	vect_data.clear();
	vect_data.push_back("4");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ExpectedOnlineDefault";
	prop_desc = "Default expected online flag";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void SPFEmulatorClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("SPFEmulator");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Device server to emulate SPF-LMC interface");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void SPFEmulatorClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++) {
		SPFEmulator *dev = static_cast<SPFEmulator *>(device_list[device_list.size()-i]);

		//## Remove attributes from dam and device (if enabled)
  	if(dev->EraseDynAttrManager()<0){
			__ERROR_LOG(dev,"Failed to cleanup dyn attr manager...");
			continue;
		}		
	}//end loop devices
	*/


	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new SPFEmulator(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		SPFEmulator *dev = static_cast<SPFEmulator *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();
		dev->add_dynamic_commands();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(SPFEmulatorClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code

	//## Initialize task
	//## NB: This is done here and not inside init_device because dynamic attributes need to be registered first in device (done in add_dynamic_attributes)
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++) {

		//	Add dynamic attributes if any
		SPFEmulator *dev = static_cast<SPFEmulator *>(device_list[device_list.size()-i]);

		//## Execute SPF startup task
		if(dev->Startup()<0){
			__ERROR_LOG(dev,"Failed to startup SPF!");
			continue;
		}

		//## Set state to ON
		dev->set_state(Tango::ON);
		dev->set_status("SPF is running");

	}//end loop devices

	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void SPFEmulatorClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::attribute_factory_before
	//	Call atribute_factory for inherited class
	LMCDevice_ns::LMCDeviceClass::attribute_factory(att_list);

	//	Attribute : loggingLevelCentral - Check if not concrete in inherited class
	Tango::Attr *loggingLevelCentralAttr = get_attr_object_by_name(att_list, "loggingLevelCentral");
	if (loggingLevelCentralAttr == NULL)
	{
	}

	//	Attribute : loggingLevelElement - Check if not concrete in inherited class
	Tango::Attr *loggingLevelElementAttr = get_attr_object_by_name(att_list, "loggingLevelElement");
	if (loggingLevelElementAttr == NULL)
	{
	}

	//	Attribute : loggingLevelStorage - Check if not concrete in inherited class
	Tango::Attr *loggingLevelStorageAttr = get_attr_object_by_name(att_list, "loggingLevelStorage");
	if (loggingLevelStorageAttr == NULL)
	{
	}

	//	Attribute : loggingLevelConsole - Check if not concrete in inherited class
	Tango::Attr *loggingLevelConsoleAttr = get_attr_object_by_name(att_list, "loggingLevelConsole");
	if (loggingLevelConsoleAttr == NULL)
	{
	}

	//	Attribute : buildState - Check if not concrete in inherited class
	Tango::Attr *buildStateAttr = get_attr_object_by_name(att_list, "buildState");
	if (buildStateAttr == NULL)
	{
	}

	//	Attribute : centralLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *centralLoggerStatusAttr = get_attr_object_by_name(att_list, "centralLoggerStatus");
	if (centralLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : elementLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *elementLoggerStatusAttr = get_attr_object_by_name(att_list, "elementLoggerStatus");
	if (elementLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : storageLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *storageLoggerStatusAttr = get_attr_object_by_name(att_list, "storageLoggerStatus");
	if (storageLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : eventRate - Check if not concrete in inherited class
	Tango::Attr *eventRateAttr = get_attr_object_by_name(att_list, "eventRate");
	if (eventRateAttr == NULL)
	{
	}

	//	Attribute : exceptionRate - Check if not concrete in inherited class
	Tango::Attr *exceptionRateAttr = get_attr_object_by_name(att_list, "exceptionRate");
	if (exceptionRateAttr == NULL)
	{
	}

	//	Attribute : fwdAttrInitStatus - Check if not concrete in inherited class
	Tango::Attr *fwdAttrInitStatusAttr = get_attr_object_by_name(att_list, "fwdAttrInitStatus");
	if (fwdAttrInitStatusAttr == NULL)
	{
	}

	//	Attribute : centralLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *centralLoggerEnabledAttr = get_attr_object_by_name(att_list, "centralLoggerEnabled");
	if (centralLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : elementLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *elementLoggerEnabledAttr = get_attr_object_by_name(att_list, "elementLoggerEnabled");
	if (elementLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : storageLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *storageLoggerEnabledAttr = get_attr_object_by_name(att_list, "storageLoggerEnabled");
	if (storageLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : loggingTargetCentral - Check if not concrete in inherited class
	Tango::Attr *loggingTargetCentralAttr = get_attr_object_by_name(att_list, "loggingTargetCentral");
	if (loggingTargetCentralAttr == NULL)
	{
	}

	//	Attribute : loggingTargetElement - Check if not concrete in inherited class
	Tango::Attr *loggingTargetElementAttr = get_attr_object_by_name(att_list, "loggingTargetElement");
	if (loggingTargetElementAttr == NULL)
	{
	}

	//	Attribute : loggingTargetStorage - Check if not concrete in inherited class
	Tango::Attr *loggingTargetStorageAttr = get_attr_object_by_name(att_list, "loggingTargetStorage");
	if (loggingTargetStorageAttr == NULL)
	{
	}

	//	Attribute : attrRandomizationEnabled - Check if not concrete in inherited class
	Tango::Attr *attrRandomizationEnabledAttr = get_attr_object_by_name(att_list, "attrRandomizationEnabled");
	if (attrRandomizationEnabledAttr == NULL)
	{
	}

	//	Attribute : attrRandomizationPeriod - Check if not concrete in inherited class
	Tango::Attr *attrRandomizationPeriodAttr = get_attr_object_by_name(att_list, "attrRandomizationPeriod");
	if (attrRandomizationPeriodAttr == NULL)
	{
	}

	//	Attribute : setB1FeedOperateModeProgress
	setB1FeedOperateModeProgressAttrib	*setb1feedoperatemodeprogress = new setB1FeedOperateModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb1feedoperatemodeprogress_prop;
	//	description	not set for setB1FeedOperateModeProgress
	//	label	not set for setB1FeedOperateModeProgress
	//	unit	not set for setB1FeedOperateModeProgress
	//	standard_unit	not set for setB1FeedOperateModeProgress
	//	display_unit	not set for setB1FeedOperateModeProgress
	//	format	not set for setB1FeedOperateModeProgress
	//	max_value	not set for setB1FeedOperateModeProgress
	//	min_value	not set for setB1FeedOperateModeProgress
	//	max_alarm	not set for setB1FeedOperateModeProgress
	//	min_alarm	not set for setB1FeedOperateModeProgress
	//	max_warning	not set for setB1FeedOperateModeProgress
	//	min_warning	not set for setB1FeedOperateModeProgress
	//	delta_t	not set for setB1FeedOperateModeProgress
	//	delta_val	not set for setB1FeedOperateModeProgress
	setb1feedoperatemodeprogress_prop.set_event_period("6000");
	setb1feedoperatemodeprogress_prop.set_archive_event_period("3600000");
	
	setb1feedoperatemodeprogress->set_default_properties(setb1feedoperatemodeprogress_prop);
	setb1feedoperatemodeprogress->set_polling_period(3000);
	setb1feedoperatemodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb1feedoperatemodeprogress->set_change_event(true, false);
	setb1feedoperatemodeprogress->set_archive_event(true, false);
	att_list.push_back(setb1feedoperatemodeprogress);

	//	Attribute : setB1FeedRegenerationModeProgress
	setB1FeedRegenerationModeProgressAttrib	*setb1feedregenerationmodeprogress = new setB1FeedRegenerationModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb1feedregenerationmodeprogress_prop;
	//	description	not set for setB1FeedRegenerationModeProgress
	//	label	not set for setB1FeedRegenerationModeProgress
	//	unit	not set for setB1FeedRegenerationModeProgress
	//	standard_unit	not set for setB1FeedRegenerationModeProgress
	//	display_unit	not set for setB1FeedRegenerationModeProgress
	//	format	not set for setB1FeedRegenerationModeProgress
	//	max_value	not set for setB1FeedRegenerationModeProgress
	//	min_value	not set for setB1FeedRegenerationModeProgress
	//	max_alarm	not set for setB1FeedRegenerationModeProgress
	//	min_alarm	not set for setB1FeedRegenerationModeProgress
	//	max_warning	not set for setB1FeedRegenerationModeProgress
	//	min_warning	not set for setB1FeedRegenerationModeProgress
	//	delta_t	not set for setB1FeedRegenerationModeProgress
	//	delta_val	not set for setB1FeedRegenerationModeProgress
	setb1feedregenerationmodeprogress_prop.set_event_period("6000");
	setb1feedregenerationmodeprogress_prop.set_archive_event_period("3600000");
	
	setb1feedregenerationmodeprogress->set_default_properties(setb1feedregenerationmodeprogress_prop);
	setb1feedregenerationmodeprogress->set_polling_period(3000);
	setb1feedregenerationmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb1feedregenerationmodeprogress->set_change_event(true, false);
	setb1feedregenerationmodeprogress->set_archive_event(true, false);
	att_list.push_back(setb1feedregenerationmodeprogress);

	//	Attribute : setB2FeedOperateModeProgress
	setB2FeedOperateModeProgressAttrib	*setb2feedoperatemodeprogress = new setB2FeedOperateModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb2feedoperatemodeprogress_prop;
	//	description	not set for setB2FeedOperateModeProgress
	//	label	not set for setB2FeedOperateModeProgress
	//	unit	not set for setB2FeedOperateModeProgress
	//	standard_unit	not set for setB2FeedOperateModeProgress
	//	display_unit	not set for setB2FeedOperateModeProgress
	//	format	not set for setB2FeedOperateModeProgress
	//	max_value	not set for setB2FeedOperateModeProgress
	//	min_value	not set for setB2FeedOperateModeProgress
	//	max_alarm	not set for setB2FeedOperateModeProgress
	//	min_alarm	not set for setB2FeedOperateModeProgress
	//	max_warning	not set for setB2FeedOperateModeProgress
	//	min_warning	not set for setB2FeedOperateModeProgress
	//	delta_t	not set for setB2FeedOperateModeProgress
	//	delta_val	not set for setB2FeedOperateModeProgress
	setb2feedoperatemodeprogress_prop.set_event_period("6000");
	setb2feedoperatemodeprogress_prop.set_archive_event_period("3600000");
	
	setb2feedoperatemodeprogress->set_default_properties(setb2feedoperatemodeprogress_prop);
	setb2feedoperatemodeprogress->set_polling_period(3000);
	setb2feedoperatemodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb2feedoperatemodeprogress->set_change_event(true, false);
	setb2feedoperatemodeprogress->set_archive_event(true, false);
	att_list.push_back(setb2feedoperatemodeprogress);

	//	Attribute : setB2FeedRegenerationModeProgress
	setB2FeedRegenerationModeProgressAttrib	*setb2feedregenerationmodeprogress = new setB2FeedRegenerationModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb2feedregenerationmodeprogress_prop;
	//	description	not set for setB2FeedRegenerationModeProgress
	//	label	not set for setB2FeedRegenerationModeProgress
	//	unit	not set for setB2FeedRegenerationModeProgress
	//	standard_unit	not set for setB2FeedRegenerationModeProgress
	//	display_unit	not set for setB2FeedRegenerationModeProgress
	//	format	not set for setB2FeedRegenerationModeProgress
	//	max_value	not set for setB2FeedRegenerationModeProgress
	//	min_value	not set for setB2FeedRegenerationModeProgress
	//	max_alarm	not set for setB2FeedRegenerationModeProgress
	//	min_alarm	not set for setB2FeedRegenerationModeProgress
	//	max_warning	not set for setB2FeedRegenerationModeProgress
	//	min_warning	not set for setB2FeedRegenerationModeProgress
	//	delta_t	not set for setB2FeedRegenerationModeProgress
	//	delta_val	not set for setB2FeedRegenerationModeProgress
	setb2feedregenerationmodeprogress_prop.set_event_period("6000");
	setb2feedregenerationmodeprogress_prop.set_archive_event_period("3600000");
	
	setb2feedregenerationmodeprogress->set_default_properties(setb2feedregenerationmodeprogress_prop);
	setb2feedregenerationmodeprogress->set_polling_period(3000);
	setb2feedregenerationmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb2feedregenerationmodeprogress->set_change_event(true, false);
	setb2feedregenerationmodeprogress->set_archive_event(true, false);
	att_list.push_back(setb2feedregenerationmodeprogress);

	//	Attribute : setB3FeedOperateModeProgress
	setB3FeedOperateModeProgressAttrib	*setb3feedoperatemodeprogress = new setB3FeedOperateModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb3feedoperatemodeprogress_prop;
	//	description	not set for setB3FeedOperateModeProgress
	//	label	not set for setB3FeedOperateModeProgress
	//	unit	not set for setB3FeedOperateModeProgress
	//	standard_unit	not set for setB3FeedOperateModeProgress
	//	display_unit	not set for setB3FeedOperateModeProgress
	//	format	not set for setB3FeedOperateModeProgress
	//	max_value	not set for setB3FeedOperateModeProgress
	//	min_value	not set for setB3FeedOperateModeProgress
	//	max_alarm	not set for setB3FeedOperateModeProgress
	//	min_alarm	not set for setB3FeedOperateModeProgress
	//	max_warning	not set for setB3FeedOperateModeProgress
	//	min_warning	not set for setB3FeedOperateModeProgress
	//	delta_t	not set for setB3FeedOperateModeProgress
	//	delta_val	not set for setB3FeedOperateModeProgress
	setb3feedoperatemodeprogress_prop.set_event_period("6000");
	setb3feedoperatemodeprogress_prop.set_archive_event_period("3600000");
	
	setb3feedoperatemodeprogress->set_default_properties(setb3feedoperatemodeprogress_prop);
	setb3feedoperatemodeprogress->set_polling_period(3000);
	setb3feedoperatemodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb3feedoperatemodeprogress->set_change_event(true, false);
	setb3feedoperatemodeprogress->set_archive_event(true, false);
	att_list.push_back(setb3feedoperatemodeprogress);

	//	Attribute : setB3FeedRegenerationModeProgress
	setB3FeedRegenerationModeProgressAttrib	*setb3feedregenerationmodeprogress = new setB3FeedRegenerationModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb3feedregenerationmodeprogress_prop;
	//	description	not set for setB3FeedRegenerationModeProgress
	//	label	not set for setB3FeedRegenerationModeProgress
	//	unit	not set for setB3FeedRegenerationModeProgress
	//	standard_unit	not set for setB3FeedRegenerationModeProgress
	//	display_unit	not set for setB3FeedRegenerationModeProgress
	//	format	not set for setB3FeedRegenerationModeProgress
	//	max_value	not set for setB3FeedRegenerationModeProgress
	//	min_value	not set for setB3FeedRegenerationModeProgress
	//	max_alarm	not set for setB3FeedRegenerationModeProgress
	//	min_alarm	not set for setB3FeedRegenerationModeProgress
	//	max_warning	not set for setB3FeedRegenerationModeProgress
	//	min_warning	not set for setB3FeedRegenerationModeProgress
	//	delta_t	not set for setB3FeedRegenerationModeProgress
	//	delta_val	not set for setB3FeedRegenerationModeProgress
	setb3feedregenerationmodeprogress_prop.set_event_period("6000");
	setb3feedregenerationmodeprogress_prop.set_archive_event_period("3600000");
	
	setb3feedregenerationmodeprogress->set_default_properties(setb3feedregenerationmodeprogress_prop);
	setb3feedregenerationmodeprogress->set_polling_period(3000);
	setb3feedregenerationmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb3feedregenerationmodeprogress->set_change_event(true, false);
	setb3feedregenerationmodeprogress->set_archive_event(true, false);
	att_list.push_back(setb3feedregenerationmodeprogress);

	//	Attribute : setB4FeedOperateModeProgress
	setB4FeedOperateModeProgressAttrib	*setb4feedoperatemodeprogress = new setB4FeedOperateModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb4feedoperatemodeprogress_prop;
	//	description	not set for setB4FeedOperateModeProgress
	//	label	not set for setB4FeedOperateModeProgress
	//	unit	not set for setB4FeedOperateModeProgress
	//	standard_unit	not set for setB4FeedOperateModeProgress
	//	display_unit	not set for setB4FeedOperateModeProgress
	//	format	not set for setB4FeedOperateModeProgress
	//	max_value	not set for setB4FeedOperateModeProgress
	//	min_value	not set for setB4FeedOperateModeProgress
	//	max_alarm	not set for setB4FeedOperateModeProgress
	//	min_alarm	not set for setB4FeedOperateModeProgress
	//	max_warning	not set for setB4FeedOperateModeProgress
	//	min_warning	not set for setB4FeedOperateModeProgress
	//	delta_t	not set for setB4FeedOperateModeProgress
	//	delta_val	not set for setB4FeedOperateModeProgress
	setb4feedoperatemodeprogress_prop.set_event_period("6000");
	setb4feedoperatemodeprogress_prop.set_archive_event_period("3600000");
	
	setb4feedoperatemodeprogress->set_default_properties(setb4feedoperatemodeprogress_prop);
	setb4feedoperatemodeprogress->set_polling_period(3000);
	setb4feedoperatemodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb4feedoperatemodeprogress->set_change_event(true, false);
	setb4feedoperatemodeprogress->set_archive_event(true, false);
	att_list.push_back(setb4feedoperatemodeprogress);

	//	Attribute : setB4FeedRegenerationModeProgress
	setB4FeedRegenerationModeProgressAttrib	*setb4feedregenerationmodeprogress = new setB4FeedRegenerationModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb4feedregenerationmodeprogress_prop;
	//	description	not set for setB4FeedRegenerationModeProgress
	//	label	not set for setB4FeedRegenerationModeProgress
	//	unit	not set for setB4FeedRegenerationModeProgress
	//	standard_unit	not set for setB4FeedRegenerationModeProgress
	//	display_unit	not set for setB4FeedRegenerationModeProgress
	//	format	not set for setB4FeedRegenerationModeProgress
	//	max_value	not set for setB4FeedRegenerationModeProgress
	//	min_value	not set for setB4FeedRegenerationModeProgress
	//	max_alarm	not set for setB4FeedRegenerationModeProgress
	//	min_alarm	not set for setB4FeedRegenerationModeProgress
	//	max_warning	not set for setB4FeedRegenerationModeProgress
	//	min_warning	not set for setB4FeedRegenerationModeProgress
	//	delta_t	not set for setB4FeedRegenerationModeProgress
	//	delta_val	not set for setB4FeedRegenerationModeProgress
	setb4feedregenerationmodeprogress_prop.set_event_period("6000");
	setb4feedregenerationmodeprogress_prop.set_archive_event_period("3600000");
	
	setb4feedregenerationmodeprogress->set_default_properties(setb4feedregenerationmodeprogress_prop);
	setb4feedregenerationmodeprogress->set_polling_period(3000);
	setb4feedregenerationmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb4feedregenerationmodeprogress->set_change_event(true, false);
	setb4feedregenerationmodeprogress->set_archive_event(true, false);
	att_list.push_back(setb4feedregenerationmodeprogress);

	//	Attribute : setB5FeedOperateModeProgress
	setB5FeedOperateModeProgressAttrib	*setb5feedoperatemodeprogress = new setB5FeedOperateModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb5feedoperatemodeprogress_prop;
	//	description	not set for setB5FeedOperateModeProgress
	//	label	not set for setB5FeedOperateModeProgress
	//	unit	not set for setB5FeedOperateModeProgress
	//	standard_unit	not set for setB5FeedOperateModeProgress
	//	display_unit	not set for setB5FeedOperateModeProgress
	//	format	not set for setB5FeedOperateModeProgress
	//	max_value	not set for setB5FeedOperateModeProgress
	//	min_value	not set for setB5FeedOperateModeProgress
	//	max_alarm	not set for setB5FeedOperateModeProgress
	//	min_alarm	not set for setB5FeedOperateModeProgress
	//	max_warning	not set for setB5FeedOperateModeProgress
	//	min_warning	not set for setB5FeedOperateModeProgress
	//	delta_t	not set for setB5FeedOperateModeProgress
	//	delta_val	not set for setB5FeedOperateModeProgress
	setb5feedoperatemodeprogress_prop.set_event_period("6000");
	setb5feedoperatemodeprogress_prop.set_archive_event_period("3600000");
	
	setb5feedoperatemodeprogress->set_default_properties(setb5feedoperatemodeprogress_prop);
	setb5feedoperatemodeprogress->set_polling_period(3000);
	setb5feedoperatemodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb5feedoperatemodeprogress->set_change_event(true, false);
	setb5feedoperatemodeprogress->set_archive_event(true, false);
	att_list.push_back(setb5feedoperatemodeprogress);

	//	Attribute : setB5FeedRegenerationModeProgress
	setB5FeedRegenerationModeProgressAttrib	*setb5feedregenerationmodeprogress = new setB5FeedRegenerationModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb5feedregenerationmodeprogress_prop;
	//	description	not set for setB5FeedRegenerationModeProgress
	//	label	not set for setB5FeedRegenerationModeProgress
	//	unit	not set for setB5FeedRegenerationModeProgress
	//	standard_unit	not set for setB5FeedRegenerationModeProgress
	//	display_unit	not set for setB5FeedRegenerationModeProgress
	//	format	not set for setB5FeedRegenerationModeProgress
	//	max_value	not set for setB5FeedRegenerationModeProgress
	//	min_value	not set for setB5FeedRegenerationModeProgress
	//	max_alarm	not set for setB5FeedRegenerationModeProgress
	//	min_alarm	not set for setB5FeedRegenerationModeProgress
	//	max_warning	not set for setB5FeedRegenerationModeProgress
	//	min_warning	not set for setB5FeedRegenerationModeProgress
	//	delta_t	not set for setB5FeedRegenerationModeProgress
	//	delta_val	not set for setB5FeedRegenerationModeProgress
	setb5feedregenerationmodeprogress_prop.set_event_period("6000");
	setb5feedregenerationmodeprogress_prop.set_archive_event_period("3600000");
	
	setb5feedregenerationmodeprogress->set_default_properties(setb5feedregenerationmodeprogress_prop);
	setb5feedregenerationmodeprogress->set_polling_period(3000);
	setb5feedregenerationmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb5feedregenerationmodeprogress->set_change_event(true, false);
	setb5feedregenerationmodeprogress->set_archive_event(true, false);
	att_list.push_back(setb5feedregenerationmodeprogress);

	//	Attribute : setOperateModeProgress
	setOperateModeProgressAttrib	*setoperatemodeprogress = new setOperateModeProgressAttrib();
	Tango::UserDefaultAttrProp	setoperatemodeprogress_prop;
	//	description	not set for setOperateModeProgress
	//	label	not set for setOperateModeProgress
	//	unit	not set for setOperateModeProgress
	//	standard_unit	not set for setOperateModeProgress
	//	display_unit	not set for setOperateModeProgress
	//	format	not set for setOperateModeProgress
	//	max_value	not set for setOperateModeProgress
	//	min_value	not set for setOperateModeProgress
	//	max_alarm	not set for setOperateModeProgress
	//	min_alarm	not set for setOperateModeProgress
	//	max_warning	not set for setOperateModeProgress
	//	min_warning	not set for setOperateModeProgress
	//	delta_t	not set for setOperateModeProgress
	//	delta_val	not set for setOperateModeProgress
	setoperatemodeprogress_prop.set_event_period("6000");
	setoperatemodeprogress_prop.set_archive_event_period("3600000");
	
	setoperatemodeprogress->set_default_properties(setoperatemodeprogress_prop);
	setoperatemodeprogress->set_polling_period(3000);
	setoperatemodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setoperatemodeprogress->set_change_event(true, false);
	setoperatemodeprogress->set_archive_event(true, false);
	att_list.push_back(setoperatemodeprogress);

	//	Attribute : setStandbyLPModeProgress
	setStandbyLPModeProgressAttrib	*setstandbylpmodeprogress = new setStandbyLPModeProgressAttrib();
	Tango::UserDefaultAttrProp	setstandbylpmodeprogress_prop;
	//	description	not set for setStandbyLPModeProgress
	//	label	not set for setStandbyLPModeProgress
	//	unit	not set for setStandbyLPModeProgress
	//	standard_unit	not set for setStandbyLPModeProgress
	//	display_unit	not set for setStandbyLPModeProgress
	//	format	not set for setStandbyLPModeProgress
	//	max_value	not set for setStandbyLPModeProgress
	//	min_value	not set for setStandbyLPModeProgress
	//	max_alarm	not set for setStandbyLPModeProgress
	//	min_alarm	not set for setStandbyLPModeProgress
	//	max_warning	not set for setStandbyLPModeProgress
	//	min_warning	not set for setStandbyLPModeProgress
	//	delta_t	not set for setStandbyLPModeProgress
	//	delta_val	not set for setStandbyLPModeProgress
	setstandbylpmodeprogress_prop.set_event_period("6000");
	setstandbylpmodeprogress_prop.set_archive_event_period("3600000");
	
	setstandbylpmodeprogress->set_default_properties(setstandbylpmodeprogress_prop);
	setstandbylpmodeprogress->set_polling_period(3000);
	setstandbylpmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setstandbylpmodeprogress->set_change_event(true, false);
	setstandbylpmodeprogress->set_archive_event(true, false);
	att_list.push_back(setstandbylpmodeprogress);

	//	Attribute : setMaintenanceModeProgress
	setMaintenanceModeProgressAttrib	*setmaintenancemodeprogress = new setMaintenanceModeProgressAttrib();
	Tango::UserDefaultAttrProp	setmaintenancemodeprogress_prop;
	//	description	not set for setMaintenanceModeProgress
	//	label	not set for setMaintenanceModeProgress
	//	unit	not set for setMaintenanceModeProgress
	//	standard_unit	not set for setMaintenanceModeProgress
	//	display_unit	not set for setMaintenanceModeProgress
	//	format	not set for setMaintenanceModeProgress
	//	max_value	not set for setMaintenanceModeProgress
	//	min_value	not set for setMaintenanceModeProgress
	//	max_alarm	not set for setMaintenanceModeProgress
	//	min_alarm	not set for setMaintenanceModeProgress
	//	max_warning	not set for setMaintenanceModeProgress
	//	min_warning	not set for setMaintenanceModeProgress
	//	delta_t	not set for setMaintenanceModeProgress
	//	delta_val	not set for setMaintenanceModeProgress
	setmaintenancemodeprogress_prop.set_event_period("6000");
	setmaintenancemodeprogress_prop.set_archive_event_period("3600000");
	
	setmaintenancemodeprogress->set_default_properties(setmaintenancemodeprogress_prop);
	setmaintenancemodeprogress->set_polling_period(3000);
	setmaintenancemodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setmaintenancemodeprogress->set_change_event(true, false);
	setmaintenancemodeprogress->set_archive_event(true, false);
	att_list.push_back(setmaintenancemodeprogress);

	//	Attribute : setB1FeedStandbyLPModeProgress
	setB1FeedStandbyLPModeProgressAttrib	*setb1feedstandbylpmodeprogress = new setB1FeedStandbyLPModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb1feedstandbylpmodeprogress_prop;
	//	description	not set for setB1FeedStandbyLPModeProgress
	//	label	not set for setB1FeedStandbyLPModeProgress
	//	unit	not set for setB1FeedStandbyLPModeProgress
	//	standard_unit	not set for setB1FeedStandbyLPModeProgress
	//	display_unit	not set for setB1FeedStandbyLPModeProgress
	//	format	not set for setB1FeedStandbyLPModeProgress
	//	max_value	not set for setB1FeedStandbyLPModeProgress
	//	min_value	not set for setB1FeedStandbyLPModeProgress
	//	max_alarm	not set for setB1FeedStandbyLPModeProgress
	//	min_alarm	not set for setB1FeedStandbyLPModeProgress
	//	max_warning	not set for setB1FeedStandbyLPModeProgress
	//	min_warning	not set for setB1FeedStandbyLPModeProgress
	//	delta_t	not set for setB1FeedStandbyLPModeProgress
	//	delta_val	not set for setB1FeedStandbyLPModeProgress
	setb1feedstandbylpmodeprogress_prop.set_event_period("6000");
	setb1feedstandbylpmodeprogress_prop.set_archive_event_period("3600000");
	
	setb1feedstandbylpmodeprogress->set_default_properties(setb1feedstandbylpmodeprogress_prop);
	setb1feedstandbylpmodeprogress->set_polling_period(3000);
	setb1feedstandbylpmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb1feedstandbylpmodeprogress->set_change_event(true, false);
	setb1feedstandbylpmodeprogress->set_archive_event(true, false);
	att_list.push_back(setb1feedstandbylpmodeprogress);

	//	Attribute : setB2FeedStandbyLPModeProgress
	setB2FeedStandbyLPModeProgressAttrib	*setb2feedstandbylpmodeprogress = new setB2FeedStandbyLPModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb2feedstandbylpmodeprogress_prop;
	//	description	not set for setB2FeedStandbyLPModeProgress
	//	label	not set for setB2FeedStandbyLPModeProgress
	//	unit	not set for setB2FeedStandbyLPModeProgress
	//	standard_unit	not set for setB2FeedStandbyLPModeProgress
	//	display_unit	not set for setB2FeedStandbyLPModeProgress
	//	format	not set for setB2FeedStandbyLPModeProgress
	//	max_value	not set for setB2FeedStandbyLPModeProgress
	//	min_value	not set for setB2FeedStandbyLPModeProgress
	//	max_alarm	not set for setB2FeedStandbyLPModeProgress
	//	min_alarm	not set for setB2FeedStandbyLPModeProgress
	//	max_warning	not set for setB2FeedStandbyLPModeProgress
	//	min_warning	not set for setB2FeedStandbyLPModeProgress
	//	delta_t	not set for setB2FeedStandbyLPModeProgress
	//	delta_val	not set for setB2FeedStandbyLPModeProgress
	setb2feedstandbylpmodeprogress_prop.set_event_period("6000");
	setb2feedstandbylpmodeprogress_prop.set_archive_event_period("3600000");
	
	setb2feedstandbylpmodeprogress->set_default_properties(setb2feedstandbylpmodeprogress_prop);
	setb2feedstandbylpmodeprogress->set_polling_period(3000);
	setb2feedstandbylpmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb2feedstandbylpmodeprogress->set_change_event(true, false);
	setb2feedstandbylpmodeprogress->set_archive_event(true, false);
	att_list.push_back(setb2feedstandbylpmodeprogress);

	//	Attribute : setB3FeedStandbyLPModeProgress
	setB3FeedStandbyLPModeProgressAttrib	*setb3feedstandbylpmodeprogress = new setB3FeedStandbyLPModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb3feedstandbylpmodeprogress_prop;
	//	description	not set for setB3FeedStandbyLPModeProgress
	//	label	not set for setB3FeedStandbyLPModeProgress
	//	unit	not set for setB3FeedStandbyLPModeProgress
	//	standard_unit	not set for setB3FeedStandbyLPModeProgress
	//	display_unit	not set for setB3FeedStandbyLPModeProgress
	//	format	not set for setB3FeedStandbyLPModeProgress
	//	max_value	not set for setB3FeedStandbyLPModeProgress
	//	min_value	not set for setB3FeedStandbyLPModeProgress
	//	max_alarm	not set for setB3FeedStandbyLPModeProgress
	//	min_alarm	not set for setB3FeedStandbyLPModeProgress
	//	max_warning	not set for setB3FeedStandbyLPModeProgress
	//	min_warning	not set for setB3FeedStandbyLPModeProgress
	//	delta_t	not set for setB3FeedStandbyLPModeProgress
	//	delta_val	not set for setB3FeedStandbyLPModeProgress
	setb3feedstandbylpmodeprogress_prop.set_event_period("6000");
	setb3feedstandbylpmodeprogress_prop.set_archive_event_period("3600000");
	
	setb3feedstandbylpmodeprogress->set_default_properties(setb3feedstandbylpmodeprogress_prop);
	setb3feedstandbylpmodeprogress->set_polling_period(3000);
	setb3feedstandbylpmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb3feedstandbylpmodeprogress->set_change_event(true, false);
	setb3feedstandbylpmodeprogress->set_archive_event(true, false);
	att_list.push_back(setb3feedstandbylpmodeprogress);

	//	Attribute : setB4FeedStandbyLPModeProgress
	setB4FeedStandbyLPModeProgressAttrib	*setb4feedstandbylpmodeprogress = new setB4FeedStandbyLPModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb4feedstandbylpmodeprogress_prop;
	//	description	not set for setB4FeedStandbyLPModeProgress
	//	label	not set for setB4FeedStandbyLPModeProgress
	//	unit	not set for setB4FeedStandbyLPModeProgress
	//	standard_unit	not set for setB4FeedStandbyLPModeProgress
	//	display_unit	not set for setB4FeedStandbyLPModeProgress
	//	format	not set for setB4FeedStandbyLPModeProgress
	//	max_value	not set for setB4FeedStandbyLPModeProgress
	//	min_value	not set for setB4FeedStandbyLPModeProgress
	//	max_alarm	not set for setB4FeedStandbyLPModeProgress
	//	min_alarm	not set for setB4FeedStandbyLPModeProgress
	//	max_warning	not set for setB4FeedStandbyLPModeProgress
	//	min_warning	not set for setB4FeedStandbyLPModeProgress
	//	delta_t	not set for setB4FeedStandbyLPModeProgress
	//	delta_val	not set for setB4FeedStandbyLPModeProgress
	setb4feedstandbylpmodeprogress_prop.set_event_period("6000");
	setb4feedstandbylpmodeprogress_prop.set_archive_event_period("3600000");
	
	setb4feedstandbylpmodeprogress->set_default_properties(setb4feedstandbylpmodeprogress_prop);
	setb4feedstandbylpmodeprogress->set_polling_period(3000);
	setb4feedstandbylpmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb4feedstandbylpmodeprogress->set_change_event(true, false);
	setb4feedstandbylpmodeprogress->set_archive_event(true, false);
	att_list.push_back(setb4feedstandbylpmodeprogress);

	//	Attribute : setB5FeedStandbyLPModeProgress
	setB5FeedStandbyLPModeProgressAttrib	*setb5feedstandbylpmodeprogress = new setB5FeedStandbyLPModeProgressAttrib();
	Tango::UserDefaultAttrProp	setb5feedstandbylpmodeprogress_prop;
	//	description	not set for setB5FeedStandbyLPModeProgress
	//	label	not set for setB5FeedStandbyLPModeProgress
	//	unit	not set for setB5FeedStandbyLPModeProgress
	//	standard_unit	not set for setB5FeedStandbyLPModeProgress
	//	display_unit	not set for setB5FeedStandbyLPModeProgress
	//	format	not set for setB5FeedStandbyLPModeProgress
	//	max_value	not set for setB5FeedStandbyLPModeProgress
	//	min_value	not set for setB5FeedStandbyLPModeProgress
	//	max_alarm	not set for setB5FeedStandbyLPModeProgress
	//	min_alarm	not set for setB5FeedStandbyLPModeProgress
	//	max_warning	not set for setB5FeedStandbyLPModeProgress
	//	min_warning	not set for setB5FeedStandbyLPModeProgress
	//	delta_t	not set for setB5FeedStandbyLPModeProgress
	//	delta_val	not set for setB5FeedStandbyLPModeProgress
	setb5feedstandbylpmodeprogress_prop.set_event_period("6000");
	setb5feedstandbylpmodeprogress_prop.set_archive_event_period("3600000");
	
	setb5feedstandbylpmodeprogress->set_default_properties(setb5feedstandbylpmodeprogress_prop);
	setb5feedstandbylpmodeprogress->set_polling_period(3000);
	setb5feedstandbylpmodeprogress->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	setb5feedstandbylpmodeprogress->set_change_event(true, false);
	setb5feedstandbylpmodeprogress->set_archive_event(true, false);
	att_list.push_back(setb5feedstandbylpmodeprogress);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(SPFEmulatorClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void SPFEmulatorClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::pipe_factory_before
	/*----- PROTECTED REGION ID(SPFEmulatorClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void SPFEmulatorClass::command_factory()
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::command_factory_before
	//	Call command_factory for inherited class
	LMCDevice_ns::LMCDeviceClass::command_factory();


	//	Set polling perod for command State
	Tango::Command	&stateCmd = get_cmd_by_name("State");
	stateCmd.set_polling_period(1000);
	





	//	Command SetLNAHPowerState
	SetLNAHPowerStateClass	*pSetLNAHPowerStateCmd =
		new SetLNAHPowerStateClass("SetLNAHPowerState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: bandId\n[1]: 0/1: enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetLNAHPowerStateCmd);

	//	Command SetLNAVPowerState
	SetLNAVPowerStateClass	*pSetLNAVPowerStateCmd =
		new SetLNAVPowerStateClass("SetLNAVPowerState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: bandId\n[1]: 0/1: enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetLNAVPowerStateCmd);

	//	Command SetAmp2HPowerState
	SetAmp2HPowerStateClass	*pSetAmp2HPowerStateCmd =
		new SetAmp2HPowerStateClass("SetAmp2HPowerState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: majorComponentBand\n[1]: enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetAmp2HPowerStateCmd);

	//	Command SetAmp2VPowerState
	SetAmp2VPowerStateClass	*pSetAmp2VPowerStateCmd =
		new SetAmp2VPowerStateClass("SetAmp2VPowerState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: majorComponentBand\n[1]: enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetAmp2VPowerStateCmd);

	//	Command SetRFE1TempSetPoint
	SetRFE1TempSetPointClass	*pSetRFE1TempSetPointCmd =
		new SetRFE1TempSetPointClass("SetRFE1TempSetPoint",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: Major component band {B1,B2,B3,B4,B5}\n[1]: temp set point \n{?disable? | ?sp1? | ?sp2? | ?sp3? | ?sp4? | ?sp5? | ?sp6? | ?warm?}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetRFE1TempSetPointCmd);

	//	Command SetRFE2TempCntrState
	SetRFE2TempCntrStateClass	*pSetRFE2TempCntrStateCmd =
		new SetRFE2TempCntrStateClass("SetRFE2TempCntrState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: Major component band {B1,B2,B3,B4,B5,B6}\n[1]: Enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetRFE2TempCntrStateCmd);

	//	Command SetCryoMotorState
	SetCryoMotorStateClass	*pSetCryoMotorStateCmd =
		new SetCryoMotorStateClass("SetCryoMotorState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: cryoStat {B1,B2,B345}\n[1]: enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetCryoMotorStateCmd);

	//	Command SetCryoMotorSpeed
	SetCryoMotorSpeedClass	*pSetCryoMotorSpeedCmd =
		new SetCryoMotorSpeedClass("SetCryoMotorSpeed",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: cryo stat {B1,B2,B345}\n[1]: Speed in rpm {45,46,...90}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetCryoMotorSpeedCmd);

	//	Command SetVaValveState
	SetVaValveStateClass	*pSetVaValveStateCmd =
		new SetVaValveStateClass("SetVaValveState",
			Tango::DEV_BOOLEAN, Tango::DEV_VOID,
			"Enable/disable",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetVaValveStateCmd);

	//	Command SetSubElementMode
	SetSubElementModeClass	*pSetSubElementModeCmd =
		new SetSubElementModeClass("SetSubElementMode",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"spfMode to be set. Allowed values are:\n{Operate | Standby_LP | Maintenance}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSubElementModeCmd);

	//	Command SetFeedMode
	SetFeedModeClass	*pSetFeedModeCmd =
		new SetFeedModeClass("SetFeedMode",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
			"[0]: Major component band {B1,B2,B3,B4,B5}\n[1]: seFeedMode {0,1,2}\n\n0= STANDBY-LP\n1= OPERATE\n2= MAINTENANCE",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetFeedModeCmd);

	//	Command SendFeedCommand
	SendFeedCommandClass	*pSendFeedCommandCmd =
		new SendFeedCommandClass("SendFeedCommand",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: mcBand\n[1]: feedCommand",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSendFeedCommandCmd);

	//	Command SetVacuumMode
	SetVacuumModeClass	*pSetVacuumModeCmd =
		new SetVacuumModeClass("SetVacuumMode",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"vaMode {STANDBY-LP, MAINTENANCE}",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetVacuumModeCmd);

	//	Command SendVacuumCommand
	SendVacuumCommandClass	*pSendVacuumCommandCmd =
		new SendVacuumCommandClass("SendVacuumCommand",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"vaCommand {RESET, CLEAR-ERRORS}",
			"",
			Tango::EXPERT);
	command_list.push_back(pSendVacuumCommandCmd);

	//	Command SetHeliumMode
	SetHeliumModeClass	*pSetHeliumModeCmd =
		new SetHeliumModeClass("SetHeliumMode",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"heMode\n{STANDBY-LP, MAINTENANCE}",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetHeliumModeCmd);

	//	Command SendHeliumCommand
	SendHeliumCommandClass	*pSendHeliumCommandCmd =
		new SendHeliumCommandClass("SendHeliumCommand",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"heCommand {RESET, CLEAR-ERRORS}",
			"",
			Tango::EXPERT);
	command_list.push_back(pSendHeliumCommandCmd);

	//	Command SetMCStartState
	SetMCStartStateClass	*pSetMCStartStateCmd =
		new SetMCStartStateClass("SetMCStartState",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: majorComponent {B1, B2, B3, B4, B5, He, Va, SPFC}\n[1]: mcStartupState",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetMCStartStateCmd);

	//	Command SetStandbyLPMode
	SetStandbyLPModeClass	*pSetStandbyLPModeCmd =
		new SetStandbyLPModeClass("SetStandbyLPMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetStandbyLPModeCmd);

	//	Command SetOperateMode
	SetOperateModeClass	*pSetOperateModeCmd =
		new SetOperateModeClass("SetOperateMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"== Long field ==\n[0]: return code  {0=OK, 1=QUEUED, 2=FAILED}\n\n== String field ==\n[0]: informative message or description of error/fault",
			Tango::OPERATOR);
	command_list.push_back(pSetOperateModeCmd);

	//	Command SetMaintenanceMode
	SetMaintenanceModeClass	*pSetMaintenanceModeCmd =
		new SetMaintenanceModeClass("SetMaintenanceMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetMaintenanceModeCmd);

















	//	Command SetSubElementModeStr
	SetSubElementModeStrClass	*pSetSubElementModeStrCmd =
		new SetSubElementModeStrClass("SetSubElementModeStr",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"String mode",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSubElementModeStrCmd);






	//	Command Halt
	HaltClass	*pHaltCmd =
		new HaltClass("Halt",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pHaltCmd);

	//	Command Shutdown
	ShutdownClass	*pShutdownCmd =
		new ShutdownClass("Shutdown",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pShutdownCmd);

	//	Command Restart
	RestartClass	*pRestartCmd =
		new RestartClass("Restart",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pRestartCmd);

	//	Command SetFeedOperateMode
	SetFeedOperateModeClass	*pSetFeedOperateModeCmd =
		new SetFeedOperateModeClass("SetFeedOperateMode",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"Band id",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetFeedOperateModeCmd);

	//	Command SetFeedStandbyLPMode
	SetFeedStandbyLPModeClass	*pSetFeedStandbyLPModeCmd =
		new SetFeedStandbyLPModeClass("SetFeedStandbyLPMode",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"Band id",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetFeedStandbyLPModeCmd);

	//	Command SetFeedMaintenanceMode
	SetFeedMaintenanceModeClass	*pSetFeedMaintenanceModeCmd =
		new SetFeedMaintenanceModeClass("SetFeedMaintenanceMode",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"bandId",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetFeedMaintenanceModeCmd);

	//	Command SetFeedClearErrorsAndRestartMode
	SetFeedClearErrorsAndRestartModeClass	*pSetFeedClearErrorsAndRestartModeCmd =
		new SetFeedClearErrorsAndRestartModeClass("SetFeedClearErrorsAndRestartMode",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"bandId",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetFeedClearErrorsAndRestartModeCmd);

	//	Command SetFeedRegenerationMode
	SetFeedRegenerationModeClass	*pSetFeedRegenerationModeCmd =
		new SetFeedRegenerationModeClass("SetFeedRegenerationMode",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"bandId",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetFeedRegenerationModeCmd);




	//	Command SetCalSourceTempSetPointsToDefault
	SetCalSourceTempSetPointsToDefaultClass	*pSetCalSourceTempSetPointsToDefaultCmd =
		new SetCalSourceTempSetPointsToDefaultClass("SetCalSourceTempSetPointsToDefault",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetCalSourceTempSetPointsToDefaultCmd);

	//	Command SetTempSetPointsToDefault
	SetTempSetPointsToDefaultClass	*pSetTempSetPointsToDefaultCmd =
		new SetTempSetPointsToDefaultClass("SetTempSetPointsToDefault",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetTempSetPointsToDefaultCmd);

	/*----- PROTECTED REGION ID(SPFEmulatorClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void SPFEmulatorClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(SPFEmulatorClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		SPFEmulatorClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void SPFEmulatorClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		SPFEmulator *dev = static_cast<SPFEmulator *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(SPFEmulatorClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulatorClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *SPFEmulatorClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(SPFEmulatorClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::Additional Methods
} //	namespace
