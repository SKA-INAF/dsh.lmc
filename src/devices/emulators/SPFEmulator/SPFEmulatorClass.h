/*----- PROTECTED REGION ID(SPFEmulatorClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        SPFEmulatorClass.h
//
// description : Include for the SPFEmulator root class.
//               This class is the singleton class for
//                the SPFEmulator device class.
//               It contains all properties and methods which the 
//               SPFEmulator requires only once e.g. the commands.
//
// project :     SPFEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SPFEmulatorClass_H
#define SPFEmulatorClass_H

#include <tango.h>
#include <LMCDeviceClass.h>
#include <SPFEmulator.h>


/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass.h


namespace SPFEmulator_ns
{
/*----- PROTECTED REGION ID(SPFEmulatorClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute setB1FeedOperateModeProgress class definition
class setB1FeedOperateModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB1FeedOperateModeProgressAttrib():SpectrumAttr("setB1FeedOperateModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB1FeedOperateModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB1FeedOperateModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB1FeedOperateModeProgress_allowed(ty);}
};

//	Attribute setB1FeedRegenerationModeProgress class definition
class setB1FeedRegenerationModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB1FeedRegenerationModeProgressAttrib():SpectrumAttr("setB1FeedRegenerationModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB1FeedRegenerationModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB1FeedRegenerationModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB1FeedRegenerationModeProgress_allowed(ty);}
};

//	Attribute setB2FeedOperateModeProgress class definition
class setB2FeedOperateModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB2FeedOperateModeProgressAttrib():SpectrumAttr("setB2FeedOperateModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB2FeedOperateModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB2FeedOperateModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB2FeedOperateModeProgress_allowed(ty);}
};

//	Attribute setB2FeedRegenerationModeProgress class definition
class setB2FeedRegenerationModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB2FeedRegenerationModeProgressAttrib():SpectrumAttr("setB2FeedRegenerationModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB2FeedRegenerationModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB2FeedRegenerationModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB2FeedRegenerationModeProgress_allowed(ty);}
};

//	Attribute setB3FeedOperateModeProgress class definition
class setB3FeedOperateModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB3FeedOperateModeProgressAttrib():SpectrumAttr("setB3FeedOperateModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB3FeedOperateModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB3FeedOperateModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB3FeedOperateModeProgress_allowed(ty);}
};

//	Attribute setB3FeedRegenerationModeProgress class definition
class setB3FeedRegenerationModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB3FeedRegenerationModeProgressAttrib():SpectrumAttr("setB3FeedRegenerationModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB3FeedRegenerationModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB3FeedRegenerationModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB3FeedRegenerationModeProgress_allowed(ty);}
};

//	Attribute setB4FeedOperateModeProgress class definition
class setB4FeedOperateModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB4FeedOperateModeProgressAttrib():SpectrumAttr("setB4FeedOperateModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB4FeedOperateModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB4FeedOperateModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB4FeedOperateModeProgress_allowed(ty);}
};

//	Attribute setB4FeedRegenerationModeProgress class definition
class setB4FeedRegenerationModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB4FeedRegenerationModeProgressAttrib():SpectrumAttr("setB4FeedRegenerationModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB4FeedRegenerationModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB4FeedRegenerationModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB4FeedRegenerationModeProgress_allowed(ty);}
};

//	Attribute setB5FeedOperateModeProgress class definition
class setB5FeedOperateModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB5FeedOperateModeProgressAttrib():SpectrumAttr("setB5FeedOperateModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB5FeedOperateModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB5FeedOperateModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB5FeedOperateModeProgress_allowed(ty);}
};

//	Attribute setB5FeedRegenerationModeProgress class definition
class setB5FeedRegenerationModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB5FeedRegenerationModeProgressAttrib():SpectrumAttr("setB5FeedRegenerationModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB5FeedRegenerationModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB5FeedRegenerationModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB5FeedRegenerationModeProgress_allowed(ty);}
};

//	Attribute setOperateModeProgress class definition
class setOperateModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setOperateModeProgressAttrib():SpectrumAttr("setOperateModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setOperateModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setOperateModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setOperateModeProgress_allowed(ty);}
};

//	Attribute setStandbyLPModeProgress class definition
class setStandbyLPModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setStandbyLPModeProgressAttrib():SpectrumAttr("setStandbyLPModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setStandbyLPModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setStandbyLPModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setStandbyLPModeProgress_allowed(ty);}
};

//	Attribute setMaintenanceModeProgress class definition
class setMaintenanceModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setMaintenanceModeProgressAttrib():SpectrumAttr("setMaintenanceModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setMaintenanceModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setMaintenanceModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setMaintenanceModeProgress_allowed(ty);}
};

//	Attribute setB1FeedStandbyLPModeProgress class definition
class setB1FeedStandbyLPModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB1FeedStandbyLPModeProgressAttrib():SpectrumAttr("setB1FeedStandbyLPModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB1FeedStandbyLPModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB1FeedStandbyLPModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB1FeedStandbyLPModeProgress_allowed(ty);}
};

//	Attribute setB2FeedStandbyLPModeProgress class definition
class setB2FeedStandbyLPModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB2FeedStandbyLPModeProgressAttrib():SpectrumAttr("setB2FeedStandbyLPModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB2FeedStandbyLPModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB2FeedStandbyLPModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB2FeedStandbyLPModeProgress_allowed(ty);}
};

//	Attribute setB3FeedStandbyLPModeProgress class definition
class setB3FeedStandbyLPModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB3FeedStandbyLPModeProgressAttrib():SpectrumAttr("setB3FeedStandbyLPModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB3FeedStandbyLPModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB3FeedStandbyLPModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB3FeedStandbyLPModeProgress_allowed(ty);}
};

//	Attribute setB4FeedStandbyLPModeProgress class definition
class setB4FeedStandbyLPModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB4FeedStandbyLPModeProgressAttrib():SpectrumAttr("setB4FeedStandbyLPModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB4FeedStandbyLPModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB4FeedStandbyLPModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB4FeedStandbyLPModeProgress_allowed(ty);}
};

//	Attribute setB5FeedStandbyLPModeProgress class definition
class setB5FeedStandbyLPModeProgressAttrib: public Tango::SpectrumAttr
{
public:
	setB5FeedStandbyLPModeProgressAttrib():SpectrumAttr("setB5FeedStandbyLPModeProgress",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~setB5FeedStandbyLPModeProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SPFEmulator *>(dev))->read_setB5FeedStandbyLPModeProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SPFEmulator *>(dev))->is_setB5FeedStandbyLPModeProgress_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command SetLNAHPowerState class definition
class SetLNAHPowerStateClass : public Tango::Command
{
public:
	SetLNAHPowerStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetLNAHPowerStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetLNAHPowerStateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetLNAHPowerState_allowed(any);}
};

//	Command SetLNAVPowerState class definition
class SetLNAVPowerStateClass : public Tango::Command
{
public:
	SetLNAVPowerStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetLNAVPowerStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetLNAVPowerStateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetLNAVPowerState_allowed(any);}
};

//	Command SetAmp2HPowerState class definition
class SetAmp2HPowerStateClass : public Tango::Command
{
public:
	SetAmp2HPowerStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetAmp2HPowerStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetAmp2HPowerStateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetAmp2HPowerState_allowed(any);}
};

//	Command SetAmp2VPowerState class definition
class SetAmp2VPowerStateClass : public Tango::Command
{
public:
	SetAmp2VPowerStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetAmp2VPowerStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetAmp2VPowerStateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetAmp2VPowerState_allowed(any);}
};

//	Command SetRFE1TempSetPoint class definition
class SetRFE1TempSetPointClass : public Tango::Command
{
public:
	SetRFE1TempSetPointClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetRFE1TempSetPointClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetRFE1TempSetPointClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetRFE1TempSetPoint_allowed(any);}
};

//	Command SetRFE2TempCntrState class definition
class SetRFE2TempCntrStateClass : public Tango::Command
{
public:
	SetRFE2TempCntrStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetRFE2TempCntrStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetRFE2TempCntrStateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetRFE2TempCntrState_allowed(any);}
};

//	Command SetCryoMotorState class definition
class SetCryoMotorStateClass : public Tango::Command
{
public:
	SetCryoMotorStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetCryoMotorStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetCryoMotorStateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetCryoMotorState_allowed(any);}
};

//	Command SetCryoMotorSpeed class definition
class SetCryoMotorSpeedClass : public Tango::Command
{
public:
	SetCryoMotorSpeedClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetCryoMotorSpeedClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetCryoMotorSpeedClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetCryoMotorSpeed_allowed(any);}
};

//	Command SetVaValveState class definition
class SetVaValveStateClass : public Tango::Command
{
public:
	SetVaValveStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetVaValveStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetVaValveStateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetVaValveState_allowed(any);}
};

//	Command SetSubElementMode class definition
class SetSubElementModeClass : public Tango::Command
{
public:
	SetSubElementModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetSubElementModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetSubElementModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetSubElementMode_allowed(any);}
};

//	Command SetFeedMode class definition
class SetFeedModeClass : public Tango::Command
{
public:
	SetFeedModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetFeedModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetFeedModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetFeedMode_allowed(any);}
};

//	Command SendFeedCommand class definition
class SendFeedCommandClass : public Tango::Command
{
public:
	SendFeedCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SendFeedCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SendFeedCommandClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SendFeedCommand_allowed(any);}
};

//	Command SetVacuumMode class definition
class SetVacuumModeClass : public Tango::Command
{
public:
	SetVacuumModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetVacuumModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetVacuumModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetVacuumMode_allowed(any);}
};

//	Command SendVacuumCommand class definition
class SendVacuumCommandClass : public Tango::Command
{
public:
	SendVacuumCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SendVacuumCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SendVacuumCommandClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SendVacuumCommand_allowed(any);}
};

//	Command SetHeliumMode class definition
class SetHeliumModeClass : public Tango::Command
{
public:
	SetHeliumModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetHeliumModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetHeliumModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetHeliumMode_allowed(any);}
};

//	Command SendHeliumCommand class definition
class SendHeliumCommandClass : public Tango::Command
{
public:
	SendHeliumCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SendHeliumCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SendHeliumCommandClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SendHeliumCommand_allowed(any);}
};

//	Command SetMCStartState class definition
class SetMCStartStateClass : public Tango::Command
{
public:
	SetMCStartStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetMCStartStateClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetMCStartStateClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetMCStartState_allowed(any);}
};

//	Command SetStandbyLPMode class definition
class SetStandbyLPModeClass : public Tango::Command
{
public:
	SetStandbyLPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetStandbyLPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetStandbyLPModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetStandbyLPMode_allowed(any);}
};

//	Command SetOperateMode class definition
class SetOperateModeClass : public Tango::Command
{
public:
	SetOperateModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetOperateModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetOperateModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetOperateMode_allowed(any);}
};

//	Command SetMaintenanceMode class definition
class SetMaintenanceModeClass : public Tango::Command
{
public:
	SetMaintenanceModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetMaintenanceModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetMaintenanceModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetMaintenanceMode_allowed(any);}
};

//	Command SetSubElementModeStr class definition
class SetSubElementModeStrClass : public Tango::Command
{
public:
	SetSubElementModeStrClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetSubElementModeStrClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetSubElementModeStrClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetSubElementModeStr_allowed(any);}
};

//	Command Halt class definition
class HaltClass : public Tango::Command
{
public:
	HaltClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	HaltClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~HaltClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_Halt_allowed(any);}
};

//	Command Shutdown class definition
class ShutdownClass : public Tango::Command
{
public:
	ShutdownClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ShutdownClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ShutdownClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_Shutdown_allowed(any);}
};

//	Command Restart class definition
class RestartClass : public Tango::Command
{
public:
	RestartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RestartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RestartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_Restart_allowed(any);}
};

//	Command SetFeedOperateMode class definition
class SetFeedOperateModeClass : public Tango::Command
{
public:
	SetFeedOperateModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetFeedOperateModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetFeedOperateModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetFeedOperateMode_allowed(any);}
};

//	Command SetFeedStandbyLPMode class definition
class SetFeedStandbyLPModeClass : public Tango::Command
{
public:
	SetFeedStandbyLPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetFeedStandbyLPModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetFeedStandbyLPModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetFeedStandbyLPMode_allowed(any);}
};

//	Command SetFeedMaintenanceMode class definition
class SetFeedMaintenanceModeClass : public Tango::Command
{
public:
	SetFeedMaintenanceModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetFeedMaintenanceModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetFeedMaintenanceModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetFeedMaintenanceMode_allowed(any);}
};

//	Command SetFeedClearErrorsAndRestartMode class definition
class SetFeedClearErrorsAndRestartModeClass : public Tango::Command
{
public:
	SetFeedClearErrorsAndRestartModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetFeedClearErrorsAndRestartModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetFeedClearErrorsAndRestartModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetFeedClearErrorsAndRestartMode_allowed(any);}
};

//	Command SetFeedRegenerationMode class definition
class SetFeedRegenerationModeClass : public Tango::Command
{
public:
	SetFeedRegenerationModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetFeedRegenerationModeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetFeedRegenerationModeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetFeedRegenerationMode_allowed(any);}
};

//	Command SetCalSourceTempSetPointsToDefault class definition
class SetCalSourceTempSetPointsToDefaultClass : public Tango::Command
{
public:
	SetCalSourceTempSetPointsToDefaultClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetCalSourceTempSetPointsToDefaultClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetCalSourceTempSetPointsToDefaultClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetCalSourceTempSetPointsToDefault_allowed(any);}
};

//	Command SetTempSetPointsToDefault class definition
class SetTempSetPointsToDefaultClass : public Tango::Command
{
public:
	SetTempSetPointsToDefaultClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetTempSetPointsToDefaultClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetTempSetPointsToDefaultClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_SetTempSetPointsToDefault_allowed(any);}
};


//=========================================
//	Define classes for dynamic commands
//=========================================
//	Command dummyDynCmd class definition
class dummyDynCmdClass : public Tango::Command
{
public:
	dummyDynCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	dummyDynCmdClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~dummyDynCmdClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SPFEmulator *>(dev))->is_dummyDynCmd_allowed(any);}
};


/**
 *	The SPFEmulatorClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  SPFEmulatorClass : public LMCDevice_ns::LMCDeviceClass
#else
class SPFEmulatorClass : public LMCDevice_ns::LMCDeviceClass
#endif
{
	/*----- PROTECTED REGION ID(SPFEmulatorClass::Additionnal DServer data members) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulatorClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static SPFEmulatorClass *init(const char *);
		static SPFEmulatorClass *instance();
		~SPFEmulatorClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		SPFEmulatorClass(string &);
		static SPFEmulatorClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	SPFEmulator_H
