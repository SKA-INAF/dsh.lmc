/*----- PROTECTED REGION ID(SPFEmulatorStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        SPFEmulatorStateMachine.cpp
//
// description : State machine file for the SPFEmulator class
//
// project :     SPFEmulator
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <SPFEmulator.h>

#include <TangoUtils.h>

/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SPFEmulatorStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  ON       |  
//  OFF      |  
//  INIT     |  
//  FAULT    |  
//  RUNNING  |  
//  ALARM    |  
//  UNKNOWN  |  
//  STANDBY  |  
//  MOVING   |  


namespace SPFEmulator_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB1FeedOperateModeProgress_allowed()
 *	Description : Execution allowed for setB1FeedOperateModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB1FeedOperateModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB1FeedOperateModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB1FeedOperateModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB1FeedOperateModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB1FeedRegenerationModeProgress_allowed()
 *	Description : Execution allowed for setB1FeedRegenerationModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB1FeedRegenerationModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB1FeedRegenerationModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB1FeedRegenerationModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB1FeedRegenerationModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB2FeedOperateModeProgress_allowed()
 *	Description : Execution allowed for setB2FeedOperateModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB2FeedOperateModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB2FeedOperateModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB2FeedOperateModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB2FeedOperateModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB2FeedRegenerationModeProgress_allowed()
 *	Description : Execution allowed for setB2FeedRegenerationModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB2FeedRegenerationModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB2FeedRegenerationModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB2FeedRegenerationModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB2FeedRegenerationModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB3FeedOperateModeProgress_allowed()
 *	Description : Execution allowed for setB3FeedOperateModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB3FeedOperateModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB3FeedOperateModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB3FeedOperateModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB3FeedOperateModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB3FeedRegenerationModeProgress_allowed()
 *	Description : Execution allowed for setB3FeedRegenerationModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB3FeedRegenerationModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB3FeedRegenerationModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB3FeedRegenerationModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB3FeedRegenerationModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB4FeedOperateModeProgress_allowed()
 *	Description : Execution allowed for setB4FeedOperateModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB4FeedOperateModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB4FeedOperateModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB4FeedOperateModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB4FeedOperateModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB4FeedRegenerationModeProgress_allowed()
 *	Description : Execution allowed for setB4FeedRegenerationModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB4FeedRegenerationModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB4FeedRegenerationModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB4FeedRegenerationModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB4FeedRegenerationModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB5FeedOperateModeProgress_allowed()
 *	Description : Execution allowed for setB5FeedOperateModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB5FeedOperateModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB5FeedOperateModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB5FeedOperateModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB5FeedOperateModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB5FeedRegenerationModeProgress_allowed()
 *	Description : Execution allowed for setB5FeedRegenerationModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB5FeedRegenerationModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB5FeedRegenerationModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB5FeedRegenerationModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB5FeedRegenerationModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setOperateModeProgress_allowed()
 *	Description : Execution allowed for setOperateModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setOperateModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setOperateModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setOperateModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setOperateModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setStandbyLPModeProgress_allowed()
 *	Description : Execution allowed for setStandbyLPModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setStandbyLPModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setStandbyLPModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setStandbyLPModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setStandbyLPModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setMaintenanceModeProgress_allowed()
 *	Description : Execution allowed for setMaintenanceModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setMaintenanceModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setMaintenanceModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setMaintenanceModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setMaintenanceModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB1FeedStandbyLPModeProgress_allowed()
 *	Description : Execution allowed for setB1FeedStandbyLPModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB1FeedStandbyLPModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB1FeedStandbyLPModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB1FeedStandbyLPModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB1FeedStandbyLPModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB2FeedStandbyLPModeProgress_allowed()
 *	Description : Execution allowed for setB2FeedStandbyLPModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB2FeedStandbyLPModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB2FeedStandbyLPModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB2FeedStandbyLPModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB2FeedStandbyLPModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB3FeedStandbyLPModeProgress_allowed()
 *	Description : Execution allowed for setB3FeedStandbyLPModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB3FeedStandbyLPModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB3FeedStandbyLPModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB3FeedStandbyLPModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB3FeedStandbyLPModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB4FeedStandbyLPModeProgress_allowed()
 *	Description : Execution allowed for setB4FeedStandbyLPModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB4FeedStandbyLPModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB4FeedStandbyLPModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB4FeedStandbyLPModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB4FeedStandbyLPModeProgressStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_setB5FeedStandbyLPModeProgress_allowed()
 *	Description : Execution allowed for setB5FeedStandbyLPModeProgress attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_setB5FeedStandbyLPModeProgress_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for setB5FeedStandbyLPModeProgress attribute in read access.
	/*----- PROTECTED REGION ID(SPFEmulator::setB5FeedStandbyLPModeProgressStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::setB5FeedStandbyLPModeProgressStateAllowed_READ
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetLNAHPowerState_allowed()
 *	Description : Execution allowed for SetLNAHPowerState attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetLNAHPowerState_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetLNAHPowerState command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetLNAHPowerStateStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetLNAHPowerState";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> bandAttrNames= {
		"b1LnaHPowerState",	
		"b2LnaHPowerState",
		"b3LnaHPowerState",
		"b4LnaHPowerState",
		"b5LnaHPowerState"
	};
	//=================================================================
	
	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShortArray)
	const Tango::DevVarShortArray* argin;
	if ((any>>=argin)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_LNA_H_POWER_STATE_FAILED",ss.str());
	}

	int nargs= argin->length();
	if(nargs<2){
		std::stringstream ss;
		ss<<"Invalid number of arguments (2 required)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_LNA_H_POWER_STATE_FAILED",ss.str());
	}	
	
	int nBands= (int)bandAttrNames.size();
	Tango::DevShort bandId= (*argin)[0];
	Tango::DevShort enableFlag= (*argin)[1];
	
	//## Check given args	
	//--> bandId
	if(bandId<1 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid bandId argument given ("<<bandId<<"), valid values are in range [1,"<<nBands<<"]";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_LNA_H_POWER_STATE_FAILED",ss.str());
	}
	
	//--> flag
	if(enableFlag!=0 && enableFlag!=1) {
		std::stringstream ss;
		ss<<"Invalid enable flag argument given ("<<bandId<<"), valid values are {0,1}";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_LNA_H_POWER_STATE_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,powerState_attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetLNAHPowerStateStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetLNAVPowerState_allowed()
 *	Description : Execution allowed for SetLNAVPowerState attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetLNAVPowerState_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetLNAVPowerState command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetLNAVPowerStateStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetLNAVPowerState";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> bandAttrNames= {
		"b1LnaVPowerState",	
		"b2LnaVPowerState",
		"b3LnaVPowerState",
		"b4LnaVPowerState",
		"b5LnaVPowerState"
	};
	//=================================================================
	
	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShortArray)
	const Tango::DevVarShortArray* argin;
	if ((any>>=argin)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_LNA_V_POWER_STATE_FAILED",ss.str());
	}

	int nargs= argin->length();
	if(nargs<2){
		std::stringstream ss;
		ss<<"Invalid number of arguments (2 required)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_LNA_V_POWER_STATE_FAILED",ss.str());
	}	
	
	int nBands= (int)bandAttrNames.size();
	Tango::DevShort bandId= (*argin)[0];
	Tango::DevShort enableFlag= (*argin)[1];
	
	//## Check given args	
	//--> BandId
	if(bandId<1 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid bandId argument given ("<<bandId<<"), valid values are in range [1,"<<nBands<<"]";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_LNA_V_POWER_STATE_FAILED",ss.str());
	}

	//--> Flag
	if(enableFlag!=0 && enableFlag!=1) {
		std::stringstream ss;
		ss<<"Invalid enable flag argument given ("<<bandId<<"), valid values are {0,1}";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_LNA_V_POWER_STATE_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,powerState_attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetLNAVPowerStateStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetAmp2HPowerState_allowed()
 *	Description : Execution allowed for SetAmp2HPowerState attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetAmp2HPowerState_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetAmp2HPowerState command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetAmp2HPowerStateStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetAmp2HPowerState";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> bandAttrNames= {
		"b1Amp2HPowerState",	
		"b2Amp2HPowerState",
		"b3Amp2HPowerState",
		"b4Amp2HPowerState",
		"b5Amp2HPowerState"
	};
	//=================================================================
	
	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShortArray)
	const Tango::DevVarShortArray* argin;
	if ((any>>=argin)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_AMP2_H_POWER_FAILED",ss.str());
	}

	int nargs= argin->length();
	if(nargs<2){
		std::stringstream ss;
		ss<<"Invalid number of arguments (2 required)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_AMP2_H_POWER_FAILED",ss.str());
	}	
	
	int nBands= (int)bandAttrNames.size();
	Tango::DevShort bandId= (*argin)[0];
	Tango::DevShort enableFlag= (*argin)[1];
	bool flag= false;
	
	//Check given args	
	if(bandId<1 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid bandId argument given ("<<bandId<<"), valid values are in range [1,"<<nBands<<"]";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_AMP2_H_POWER_FAILED",ss.str());
	}
	if(enableFlag==0) flag= false;
	else if(enableFlag==1) flag= true;
	else{
		std::stringstream ss;
		ss<<"Invalid enable flag argument given ("<<bandId<<"), valid values are {0,1}";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_AMP2_H_POWER_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,powerState_attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetAmp2HPowerStateStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetAmp2VPowerState_allowed()
 *	Description : Execution allowed for SetAmp2VPowerState attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetAmp2VPowerState_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetAmp2VPowerState command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetAmp2VPowerStateStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetAmp2VPowerState";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> bandAttrNames= {
		"b1Amp2VPowerState",	
		"b2Amp2VPowerState",
		"b3Amp2VPowerState",
		"b4Amp2VPowerState",
		"b5Amp2VPowerState"
	};
	//=================================================================
	
	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShortArray)
	const Tango::DevVarShortArray* argin;
	if ((any>>=argin)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_AMP2_V_POWER_FAILED",ss.str());
	}

	int nargs= argin->length();
	if(nargs<2){
		std::stringstream ss;
		ss<<"Invalid number of arguments (2 required)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_AMP2_V_POWER_FAILED",ss.str());
	}	
	
	int nBands= (int)bandAttrNames.size();
	Tango::DevShort bandId= (*argin)[0];
	Tango::DevShort enableFlag= (*argin)[1];
	
	//## Check given args	
	//--> bandId
	if(bandId<1 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid bandId argument given ("<<bandId<<"), valid values are in range [1,"<<nBands<<"]";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_AMP2_V_POWER_FAILED",ss.str());
	}

	//--> flag
	if(enableFlag!=0 && enableFlag!=1) {
		std::stringstream ss;
		ss<<"Invalid enable flag argument given ("<<bandId<<"), valid values are {0,1}";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_AMP2_V_POWER_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,powerState_attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetAmp2VPowerStateStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetRFE1TempSetPoint_allowed()
 *	Description : Execution allowed for SetRFE1TempSetPoint attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetRFE1TempSetPoint_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetRFE1TempSetPoint command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetRFE1TempSetPointStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetRFE1TempSetPoint";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> bandAttrNames= {
		"b1Rfe1TempSetPoint",	
		"b2Rfe1TempSetPoint",
		"b3Rfe1TempSetPoint",
		"b4Rfe1TempSetPoint",
		"b5Rfe1TempSetPoint"
	};
	//=================================================================
	
	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShortArray)
	const Tango::DevVarShortArray* argin;
	if ((any>>=argin)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_RFE1_TEMP_SETPOINT_FAILED",ss.str());
	}

	int nargs= argin->length();
	if(nargs<2){
		std::stringstream ss;
		ss<<"Invalid number of arguments (2 required)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_RFE1_TEMP_SETPOINT_FAILED",ss.str());
	}	
	
	int nBands= (int)bandAttrNames.size();
	Tango::DevShort bandId= (*argin)[0];
	Tango::DevShort setpoint= (*argin)[1];
	
	//Check given args	
	if(bandId<1 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid bandId argument given ("<<bandId<<"), valid values are in range [1,"<<nBands<<"]";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_RFE1_TEMP_SETPOINT_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,powerState_attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetRFE1TempSetPointStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetRFE2TempCntrState_allowed()
 *	Description : Execution allowed for SetRFE2TempCntrState attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetRFE2TempCntrState_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetRFE2TempCntrState command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetRFE2TempCntrStateStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetRFE2TempCntrState";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> bandAttrNames= {
		"b1Rfe2TempCtrlState",	
		"b2Rfe2TempCtrlState",
		"b3Rfe2TempCtrlState",
		"b4Rfe2TempCtrlState",
		"b5Rfe2TempCtrlState"
	};
	//=================================================================
	
	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShortArray)
	const Tango::DevVarShortArray* argin;
	if ((any>>=argin)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_RFE2_TEMP_CNTR_FAILED",ss.str());
	}

	int nargs= argin->length();
	if(nargs<2){
		std::stringstream ss;
		ss<<"Invalid number of arguments (2 required)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_RFE2_TEMP_CNTR_FAILED",ss.str());
	}	
	
	int nBands= (int)bandAttrNames.size();
	Tango::DevShort bandId= (*argin)[0];
	Tango::DevShort enableFlag= (*argin)[1];
	bool flag= false;
	
	//Check given args	
	if(bandId<1 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid bandId argument given ("<<bandId<<"), valid values are in range [1,"<<nBands<<"]";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_RFE2_TEMP_CNTR_FAILED",ss.str());
	}
	if(enableFlag==0) flag= false;
	else if(enableFlag==1) flag= true;
	else{
		std::stringstream ss;
		ss<<"Invalid enable flag argument given ("<<bandId<<"), valid values are {0,1}";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_RFE2_TEMP_CNTR_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,powerState_attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetRFE2TempCntrStateStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetCryoMotorState_allowed()
 *	Description : Execution allowed for SetCryoMotorState attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetCryoMotorState_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetCryoMotorState command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetCryoMotorStateStateAllowed) ENABLED START -----*/

	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetCryoMotorState";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> bandAttrNames= {
		"b1CryoMotorState",	
		"b2CryoMotorState",
		"b345CryoMotorState",
		"b345CryoMotorState",
		"b345CryoMotorState"
	};
	std::vector<std::string> cryoStepperMotorSpeedAttrNames= {
		"b1CryoMotorSpeed",	
		"b2CryoMotorSpeed",
		"b345CryoMotorSpeed",
		"b345CryoMotorSpeed",
		"b345CryoMotorSpeed"
	};
	//=================================================================
	
	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShortArray)
	const Tango::DevVarShortArray* argin;
	if ((any>>=argin)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_CRYO_MOTOR_STATE_FAILED",ss.str());
	}

	int nargs= argin->length();
	if(nargs<2){
		std::stringstream ss;
		ss<<"Invalid number of arguments (2 required)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_CRYO_MOTOR_STATE_FAILED",ss.str());
	}	
	
	int nBands= (int)bandAttrNames.size();
	Tango::DevShort bandId= (*argin)[0];
	Tango::DevShort enableFlag= (*argin)[1];
	bool flag= false;
	
	//Check given args	
	if(bandId<1 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid bandId argument given ("<<bandId<<"), valid values are in range [1,"<<nBands<<"]";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_CRYO_MOTOR_STATE_FAILED",ss.str());
	}

	//Throw exception for band 1 as cryocooler is not present!
	if(bandId==1){
		std::stringstream ss;
		ss<<"Cryocooler not present for band "<<bandId<<"!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("CMD_NOT_IMPLEMENTED",ss.str());
	}

	//Check flags
	if(enableFlag==0) flag= false;
	else if(enableFlag==1) flag= true;
	else{
		std::stringstream ss;
		ss<<"Invalid enable flag argument given ("<<bandId<<"), valid values are {0,1}";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_CRYO_MOTOR_STATE_FAILED",ss.str());
	}	

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,powerState_attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetCryoMotorStateStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetCryoMotorSpeed_allowed()
 *	Description : Execution allowed for SetCryoMotorSpeed attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetCryoMotorSpeed_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetCryoMotorSpeed command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetCryoMotorSpeedStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetCryoMotorSpeed";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> bandAttrNames= {
		"b1CryoMotorSpeed",	
		"b2CryoMotorSpeed",
		"b345CryoMotorSpeed",
		"b345CryoMotorSpeed",
		"b345CryoMotorSpeed"
	};
	std::vector<std::string> motorStateAttrNames= {
		"b1CryoMotorState",	
		"b2CryoMotorState",
		"b345CryoMotorState",
		"b345CryoMotorState",
		"b345CryoMotorState"
	};
	std::vector<std::string> motorStateAttrPropNames= {"min_value","max_value"};
	//=================================================================
	
	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShortArray)
	const Tango::DevVarShortArray* argin;
	if ((any>>=argin)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_CRYO_MOTOR_SPEED_FAILED",ss.str());
	}

	int nargs= argin->length();
	if(nargs<2){
		std::stringstream ss;
		ss<<"Invalid number of arguments (2 required)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_CRYO_MOTOR_SPEED_FAILED",ss.str());
	}	
	
	int nBands= (int)bandAttrNames.size();
	Tango::DevShort bandId= (*argin)[0];
	Tango::DevShort motorSpeed= (*argin)[1];
	
	//Check given args	
	if(bandId<1 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid bandId argument given ("<<bandId<<"), valid values are in range [1,"<<nBands<<"]";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_CRYO_MOTOR_SPEED_FAILED",ss.str());
	}

	//Throw exception for band 1 as cryocooler is not present!
	if(bandId==1){
		std::stringstream ss;
		ss<<"Cryocooler not present for band "<<bandId<<"!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("CMD_NOT_IMPLEMENTED",ss.str());
	}

	//Check if motor is enabled, otherwise throw error
	Tango::DevBoolean isMotorEnabled;
	if( GetDynAttrValue<Tango::DevBoolean>(isMotorEnabled,motorStateAttrNames[bandId-1])<0 ){
		std::stringstream ss;
		ss<<"Failed to get attr "<<motorStateAttrNames[bandId-1]<<" value to ensure motor state is enabled";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_CRYO_MOTOR_SPEED_FAILED",ss.str());
	}	
	if(!isMotorEnabled){
		std::stringstream ss;
		ss<<"Cannot set motor speed (motor is disabled)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_CRYO_MOTOR_SPEED_FAILED",ss.str());
	}	

	//Check valid range	
	Tango::DbData db_data;
	int status= Utils_ns::TangoUtils::GetAttrProps(this,db_data,bandAttrNames[bandId-1],motorStateAttrPropNames);
	if(status<0){
		_WARN_LOG(bandAttrNames[bandId-1]<<" attr has not min/max value set, no check will be done on input value given!");
	}
	else{
		try {
			Tango::DevShort minValue, maxValue;
			db_data[0]>>minValue;
			db_data[1]>>maxValue;
						
			if(motorSpeed<minValue || motorSpeed>maxValue){
				std::stringstream ss;
				ss<<"Invalid motorSpeed argument given ("<<motorSpeed<<"), outside range (valid range ["<<minValue<<","<<maxValue<<"]";
				_ERROR_LOG(ss.str());
				_THROW_TANGO_EXCEPTION("SET_CRYO_MOTOR_SPEED_FAILED",ss.str());
			}
		}//close try
		catch(Tango::DevFailed& e){
			throw;
		}
	}//close else

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,powerState_attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetCryoMotorSpeedStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetVaValveState_allowed()
 *	Description : Execution allowed for SetVaValveState attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetVaValveState_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetVaValveState command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetVaValveStateStateAllowed) ENABLED START -----*/
	
	/*
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetVaValveState";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	//=================================================================
	
	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER
	//=====================================================
	try {
		IsCmdAttrAllowed<Tango::DevEnum>(cmd_name,powerState_attr_name,nullptr,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}
	*/

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetVaValveStateStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetSubElementMode_allowed()
 *	Description : Execution allowed for SetSubElementMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetSubElementMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSubElementMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetSubElementModeStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetSubElementMode";
	std::string attr_name= "operatingMode";
	std::vector<std::string> cap_attr_names= {
		"b1CapabilityState",
		"b2CapabilityState",
		"b3CapabilityState",
		"b4CapabilityState",
		"b5CapabilityState",
	};
	//################################################################

	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShort)
	Tango::DevShort mode;
	if ((any>>=mode)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_FAILED",ss.str());
	}

	//## Check this is a valid mode enumeration
	std::string mode_str= "";
	if(Utils_ns::TangoUtils::GetEnumAttrLabelValue(mode_str,this,attr_name,mode)<0){
		std::stringstream ss;
		ss<<"Invalid mode enumeration given in argument (check mode enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_FAILED",ss.str());
	}

	//=====================================================
	//==         MODE CHECK
	//=====================================================
	//Retrieve current mode attr value
	Tango::DevShort current_mode;	
	if(GetDynAttrValue(current_mode,attr_name)<0){
		std::stringstream ss;
		ss<<"Failed to get attr "<<attr_name<<" value!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_FAILED",ss.str());
	}

	//Get string label
	std::string current_mode_str= "";
	Utils_ns::TangoUtils::GetEnumAttrLabelValue(current_mode_str,this,attr_name,current_mode);

	//Check if command can be invoked in current mode
	if(!Utils_ns::TangoUtils::IsCmdAllowed(this,cmd_name,attr_name,current_mode,true)){
		std::stringstream ss;
		ss<<"Command cannot be inkoved in current mode ("<<current_mode_str<<")!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_FAILED",ss.str());
	}

	//Check if allowed mode transition
	if(!IsAttrAllowed(attr_name,current_mode_str,mode_str,false)){
		std::stringstream ss;
		ss<<"Requested mode transition ("<<current_mode<<"-->"<<mode<<") is forbidden!";
		_INFO_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_SUB_ELEMENT_MODE_FAILED",ss.str());
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetSubElementModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetFeedMode_allowed()
 *	Description : Execution allowed for SetFeedMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetFeedMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetFeedMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetFeedModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetFeedModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SendFeedCommand_allowed()
 *	Description : Execution allowed for SendFeedCommand attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SendFeedCommand_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SendFeedCommand command.
	/*----- PROTECTED REGION ID(SPFEmulator::SendFeedCommandStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SendFeedCommandStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetVacuumMode_allowed()
 *	Description : Execution allowed for SetVacuumMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetVacuumMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetVacuumMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetVacuumModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetVacuumModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SendVacuumCommand_allowed()
 *	Description : Execution allowed for SendVacuumCommand attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SendVacuumCommand_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SendVacuumCommand command.
	/*----- PROTECTED REGION ID(SPFEmulator::SendVacuumCommandStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SendVacuumCommandStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetHeliumMode_allowed()
 *	Description : Execution allowed for SetHeliumMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetHeliumMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetHeliumMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetHeliumModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetHeliumModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SendHeliumCommand_allowed()
 *	Description : Execution allowed for SendHeliumCommand attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SendHeliumCommand_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SendHeliumCommand command.
	/*----- PROTECTED REGION ID(SPFEmulator::SendHeliumCommandStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SendHeliumCommandStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetMCStartState_allowed()
 *	Description : Execution allowed for SetMCStartState attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetMCStartState_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetMCStartState command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetMCStartStateStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetMCStartStateStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetStandbyLPMode_allowed()
 *	Description : Execution allowed for SetStandbyLPMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetStandbyLPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetStandbyLPMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetStandbyLPModeStateAllowed) ENABLED START -----*/
	
	/*
	//###########################################################################
	//##    HARD-CODED PARAMETERS 
	//##    (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetStandbyLPMode";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> cap_attr_names= {
		"b1CapabilityState",
		"b2CapabilityState",
		"b3CapabilityState",
		"b4CapabilityState",
		"b5CapabilityState",
	};
	std::string activeBand_attr_name= "activeBandId";
	std::string mode_str= "STANDBY-LP"; 
	std::string powerState_str= "LOW-POWER";
	std::string capability_str= "STANDBY"; 
	//=====================================================

	//Retrieve mode value corresponding to label
	Tango::DevShort mode;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(mode,this,attr_name,mode_str)<0){
		std::stringstream ss;
		ss<<"Invalid mode enumeration given in argument (check mode enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_STANDBY_LP_MODE_FAILED",ss.str());
	}

	//Retrieve powerState value corresponding to label
	Tango::DevShort powerState;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(powerState,this,powerState_attr_name,powerState_str)<0){
		std::stringstream ss;
		ss<<"Invalid powerState enumeration given in argument (check enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_STANDBY_LP_MODE_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	_DEBUG_LOG("Checking if cmd "<<cmd_name<<" is allowed when attr "<< attr_name<<" is equal to "<<mode<<"...");
	try {
		IsCmdAttrAllowed(cmd_name,attr_name,&mode,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}

	//=====================================================
	//==         CHECK POWER STATE
	//=====================================================
	_DEBUG_LOG("Checking if cmd "<<cmd_name<<" is allowed when attr "<< powerState_attr_name<<" is equal to "<<powerState<<"...");
	try {
		IsCmdAttrAllowed(cmd_name,powerState_attr_name,&powerState,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}
	*/

	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	//=====================================================
	//==         CHECK IF TASK IS ALREADY RUNNING
	//=====================================================
	_DEBUG_LOG("Check if a previous set STANDBY-LP mode task is already running...");
	{
		omni_mutex_lock guard(m_mutex);
		if( strcmp(attr_setStandbyLPModeProgress_read[0],"RUNNING")==0  || strcmp(attr_setStandbyLPModeProgress_read[0],"IDLE")==0 ){
			std::stringstream ss;
			ss<<"Another set OPERATE mode task is running or waiting for execution in device!";
			_INFO_LOG(ss.str());
			_THROW_TANGO_EXCEPTION("SET_STANDBY_LP_MODE_FAILED",ss.str());
		}
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetStandbyLPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetOperateMode_allowed()
 *	Description : Execution allowed for SetOperateMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetOperateMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetOperateMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetOperateModeStateAllowed) ENABLED START -----*/
	
	/*
	//###########################################################################
	//##    HARD-CODED PARAMETERS 
	//##    (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetOperateMode";
	std::string attr_name= "operatingMode";
	std::string powerState_attr_name= "powerState";
	std::vector<std::string> cap_attr_names= {
		"b1CapabilityState",
		"b2CapabilityState",
		"b3CapabilityState",
		"b4CapabilityState",
		"b5CapabilityState",
	};
	std::string activeBand_attr_name= "activeBandId";
	std::string mode_str= "OPERATE"; 
	std::string powerState_str= "FULL-POWER";
	std::string capability_str= "OPERATE-FULL"; 
	//=====================================================

	//Retrieve mode value corresponding to label
	Tango::DevShort mode;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(mode,this,attr_name,mode_str)<0){
		std::stringstream ss;
		ss<<"Invalid mode enumeration given in argument (check mode enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_OPERATE_MODE_FAILED",ss.str());
	}

	//Retrieve powerState value corresponding to label
	Tango::DevShort powerState;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(powerState,this,powerState_attr_name,powerState_str)<0){
		std::stringstream ss;
		ss<<"Invalid powerState enumeration given in argument (check enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_OPERATE_MODE_FAILED",ss.str());
	}
	*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	//=====================================================
	//==         CHECK IF TASK IS ALREADY RUNNING
	//=====================================================
	_DEBUG_LOG("Check if a previous set OPERATE mode task is already running...");
	{
		omni_mutex_lock guard(m_mutex);
		if( strcmp(attr_setOperateModeProgress_read[0],"RUNNING")==0  || strcmp(attr_setOperateModeProgress_read[0],"IDLE")==0 ){
			std::stringstream ss;
			ss<<"Another set OPERATE mode task is running or waiting for execution in device!";
			_INFO_LOG(ss.str());
			_THROW_TANGO_EXCEPTION("SET_OPERATE_MODE_FAILED",ss.str());
		}
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetOperateModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetMaintenanceMode_allowed()
 *	Description : Execution allowed for SetMaintenanceMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetMaintenanceMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetMaintenanceMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetMaintenanceModeStateAllowed) ENABLED START -----*/
	
	/*
	//###########################################################################
	//##    HARD-CODED PARAMETERS 
	//##    (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	std::string cmd_name= "SetMaintenanceMode";
	std::string attr_name= "operatingMode";
	std::string mode_str= "MAINTENANCE"; 
	//=====================================================

	//Retrieve mode value corresponding to label
	Tango::DevShort mode;
	if(Utils_ns::TangoUtils::GetEnumAttrValue(mode,this,attr_name,mode_str)<0){
		std::stringstream ss;
		ss<<"Invalid mode enumeration given in argument (check mode enum values)!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_MAINTENANCE_MODE_FAILED",ss.str());
	}

	//=====================================================
	//==         CHECK MODE
	//=====================================================
	try {
		IsCmdAttrAllowed(cmd_name,attr_name,&mode,true);
	}
	catch(Tango::DevFailed& e){
		throw;
	}
	*/

	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	//=====================================================
	//==         CHECK IF TASK IS ALREADY RUNNING
	//=====================================================
	_DEBUG_LOG("Check if a previous set MAINTENANCE mode task is already running...");
	{
		omni_mutex_lock guard(m_mutex);
		if( strcmp(attr_setMaintenanceModeProgress_read[0],"RUNNING")==0  || strcmp(attr_setMaintenanceModeProgress_read[0],"IDLE")==0 ){
			std::stringstream ss;
			ss<<"Another set MAINTENANCE mode task is running or waiting for execution in device!";
			_INFO_LOG(ss.str());
			_THROW_TANGO_EXCEPTION("SET_MAINTENANCE_MODE_FAILED",ss.str());
		}
	}
	

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetMaintenanceModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetSubElementModeStr_allowed()
 *	Description : Execution allowed for SetSubElementModeStr attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetSubElementModeStr_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSubElementModeStr command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetSubElementModeStrStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetSubElementModeStrStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_Halt_allowed()
 *	Description : Execution allowed for Halt attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_Halt_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Halt command.
	/*----- PROTECTED REGION ID(SPFEmulator::HaltStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::HaltStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_Shutdown_allowed()
 *	Description : Execution allowed for Shutdown attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_Shutdown_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Shutdown command.
	/*----- PROTECTED REGION ID(SPFEmulator::ShutdownStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::ShutdownStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_Restart_allowed()
 *	Description : Execution allowed for Restart attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_Restart_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Restart command.
	/*----- PROTECTED REGION ID(SPFEmulator::RestartStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::RestartStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetFeedOperateMode_allowed()
 *	Description : Execution allowed for SetFeedOperateMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetFeedOperateMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetFeedOperateMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetFeedOperateModeStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	int nBands= 5;
	//###########################################################################

	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShort)
	Tango::DevShort bandId;
	if ((any>>=bandId)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_FEED_OPERATE_MODE_FAILED",ss.str());	
	}
	
	if(bandId<=0 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid argument given (bandId="<<bandId<<"), valid values are in range ["<<1<<","<<nBands<<"]!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_FEED_OPERATE_MODE_FAILED",ss.str());	
	}

	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	//=====================================================
	//==         CHECK IF TASK IS ALREADY RUNNING
	//=====================================================
	_DEBUG_LOG("Check if a set feed OPERATE task is already running...");
	{
		omni_mutex_lock guard(m_mutex);
		
		std::string taskStatus= "";
		if(bandId==1) taskStatus= std::string(attr_setB1FeedOperateModeProgress_read[0]);
		else if(bandId==2) taskStatus= std::string(attr_setB2FeedOperateModeProgress_read[0]);
		else if(bandId==3) taskStatus= std::string(attr_setB3FeedOperateModeProgress_read[0]);
		else if(bandId==4) taskStatus= std::string(attr_setB4FeedOperateModeProgress_read[0]);
		else if(bandId==5) taskStatus= std::string(attr_setB5FeedOperateModeProgress_read[0]);

		if( taskStatus=="RUNNING"  || taskStatus=="IDLE" ){
			std::stringstream ss;
			ss<<"Another set feed OPERATE task for band "<<bandId<<" is running or waiting for execution in device!";
			_INFO_LOG(ss.str());
			_THROW_TANGO_EXCEPTION("SET_FEED_OPERATE_MODE_FAILED",ss.str());	
		}
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetFeedOperateModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetFeedStandbyLPMode_allowed()
 *	Description : Execution allowed for SetFeedStandbyLPMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetFeedStandbyLPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetFeedStandbyLPMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetFeedStandbyLPModeStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	int nBands= 5;
	//###########################################################################

	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShort)
	Tango::DevShort bandId;
	if ((any>>=bandId)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_FEED_STANDBY_LP_MODE_FAILED",ss.str());	
	}
	
	if(bandId<=0 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid argument given (bandId="<<bandId<<"), valid values are in range ["<<1<<","<<nBands<<"]!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_FEED_STANDBY_LP_MODE_FAILED",ss.str());		
	}

	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	//=====================================================
	//==         CHECK IF TASK IS ALREADY RUNNING
	//=====================================================
	_DEBUG_LOG("Check if a set feed STANDBY-LP task is already running...");
	{
		omni_mutex_lock guard(m_mutex);
		
		std::string taskStatus= "";
		if(bandId==1) taskStatus= std::string(attr_setB1FeedStandbyLPModeProgress_read[0]);
		else if(bandId==2) taskStatus= std::string(attr_setB2FeedStandbyLPModeProgress_read[0]);
		else if(bandId==3) taskStatus= std::string(attr_setB3FeedStandbyLPModeProgress_read[0]);
		else if(bandId==4) taskStatus= std::string(attr_setB4FeedStandbyLPModeProgress_read[0]);
		else if(bandId==5) taskStatus= std::string(attr_setB5FeedStandbyLPModeProgress_read[0]);

		if( taskStatus=="RUNNING"  || taskStatus=="IDLE" ){
			std::stringstream ss;
			ss<<"Another set feed STANDBY-LP task for band "<<bandId<<" is running or waiting for execution in device!";
			_INFO_LOG(ss.str());
			_THROW_TANGO_EXCEPTION("SET_FEED_STANDBY_LP_MODE_FAILED",ss.str());	
		}
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetFeedStandbyLPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetFeedMaintenanceMode_allowed()
 *	Description : Execution allowed for SetFeedMaintenanceMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetFeedMaintenanceMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetFeedMaintenanceMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetFeedMaintenanceModeStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	int nBands= 5;
	//###########################################################################

	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShort)
	Tango::DevShort bandId;
	if ((any>>=bandId)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_FEED_MAINTENANCE_MODE_FAILED",ss.str());	
	}
	
	if(bandId<=0 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid argument given (bandId="<<bandId<<"), valid values are in range ["<<1<<","<<nBands<<"]!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_FEED_MAINTENANCE_MODE_FAILED",ss.str());		
	}

	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetFeedMaintenanceModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetFeedClearErrorsAndRestartMode_allowed()
 *	Description : Execution allowed for SetFeedClearErrorsAndRestartMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetFeedClearErrorsAndRestartMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetFeedClearErrorsAndRestartMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetFeedClearErrorsAndRestartModeStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	int nBands= 5;
	//###########################################################################

	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShort)
	Tango::DevShort bandId;
	if ((any>>=bandId)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_FEED_CLEAR_ERRORS_AND_RESTART_MODE_FAILED",ss.str());	
	}
	
	if(bandId<=0 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid argument given (bandId="<<bandId<<"), valid values are in range ["<<1<<","<<nBands<<"]!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_FEED_CLEAR_ERRORS_AND_RESTART_MODE_FAILED",ss.str());	
	}

	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}


	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetFeedClearErrorsAndRestartModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetFeedRegenerationMode_allowed()
 *	Description : Execution allowed for SetFeedRegenerationMode attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetFeedRegenerationMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetFeedRegenerationMode command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetFeedRegenerationModeStateAllowed) ENABLED START -----*/
	
	//###########################################################################
	//##    HARD-CODED PARAMETERS (TO BE CHANGED IF ICD CHANGE OR USE ALIASES?)
	//###########################################################################
	int nBands= 5;
	//###########################################################################

	//=====================================================
	//==         ARGIN CHECK
	//=====================================================
	//## Extract argin (DevShort)
	Tango::DevShort bandId;
	if ((any>>=bandId)== false) {
		std::stringstream ss;
		ss<<"Failed to extract cmd input args!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_FEED_REGENERATION_MODE_FAILED",ss.str());	
	}
	
	if(bandId<=0 || bandId>nBands){
		std::stringstream ss;
		ss<<"Invalid argument given (bandId="<<bandId<<"), valid values are in range ["<<1<<","<<nBands<<"]!";
		_ERROR_LOG(ss.str());
		_THROW_TANGO_EXCEPTION("SET_FEED_REGENERATION_MODE_FAILED",ss.str());		
	}

	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	//=====================================================
	//==         CHECK IF TASK IS ALREADY RUNNING
	//=====================================================
	_DEBUG_LOG("Check if a set feed REGENERATION task is already running...");
	{
		omni_mutex_lock guard(m_mutex);
		
		std::string taskStatus= "";
		if(bandId==1) taskStatus= std::string(attr_setB1FeedRegenerationModeProgress_read[0]);
		else if(bandId==2) taskStatus= std::string(attr_setB2FeedRegenerationModeProgress_read[0]);
		else if(bandId==3) taskStatus= std::string(attr_setB3FeedRegenerationModeProgress_read[0]);
		else if(bandId==4) taskStatus= std::string(attr_setB4FeedRegenerationModeProgress_read[0]);
		else if(bandId==5) taskStatus= std::string(attr_setB5FeedRegenerationModeProgress_read[0]);

		if( taskStatus=="RUNNING"  || taskStatus=="IDLE" ){
			std::stringstream ss;
			ss<<"Another set feed REGENERATION task for band "<<bandId<<" is running or waiting for execution in device!";
			_INFO_LOG(ss.str());
			_THROW_TANGO_EXCEPTION("SET_FEED_REGENERATION_MODE_FAILED",ss.str());	
		}
	}

	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetFeedRegenerationModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetCalSourceTempSetPointsToDefault_allowed()
 *	Description : Execution allowed for SetCalSourceTempSetPointsToDefault attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetCalSourceTempSetPointsToDefault_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetCalSourceTempSetPointsToDefault command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetCalSourceTempSetPointsToDefaultStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetCalSourceTempSetPointsToDefaultStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_SetTempSetPointsToDefault_allowed()
 *	Description : Execution allowed for SetTempSetPointsToDefault attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_SetTempSetPointsToDefault_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetTempSetPointsToDefault command.
	/*----- PROTECTED REGION ID(SPFEmulator::SetTempSetPointsToDefaultStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SetTempSetPointsToDefaultStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : SPFEmulator::is_dummyDynCmd_allowed()
 *	Description : Execution allowed for dummyDynCmd attribute
 */
//--------------------------------------------------------
bool SPFEmulator::is_dummyDynCmd_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for dummyDynCmd command.
	/*----- PROTECTED REGION ID(SPFEmulator::dummyDynCmdStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SPFEmulator::dummyDynCmdStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(SPFEmulator::SPFEmulatorStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	SPFEmulator::SPFEmulatorStateAllowed.AdditionalMethods

}	//	End of namespace
