/*----- PROTECTED REGION ID(ElementLogger.h) ENABLED START -----*/
//=============================================================================
//
// file :        ElementLogger.h
//
// description : Include file for the ElementLogger class
//
// project :     ElementLogger
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef ElementLogger_H
#define ElementLogger_H

#include <tango.h>
#include <LMCDevice.h>


/*----- PROTECTED REGION END -----*/	//	ElementLogger.h

/**
 *  ElementLogger class description:
 *    ElementLogger
 */

namespace ElementLogger_ns
{
enum _centralLoggerStatusEnum {
} ;
typedef _centralLoggerStatusEnum centralLoggerStatusEnum;

enum _elementLoggerStatusEnum {
} ;
typedef _elementLoggerStatusEnum elementLoggerStatusEnum;

enum _storageLoggerStatusEnum {
} ;
typedef _storageLoggerStatusEnum storageLoggerStatusEnum;

enum _fwdAttrInitStatusEnum {
} ;
typedef _fwdAttrInitStatusEnum fwdAttrInitStatusEnum;

/*----- PROTECTED REGION ID(ElementLogger::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	ElementLogger::Additional Class Declarations

class ElementLogger : public LMCDevice_ns::LMCDevice
{

/*----- PROTECTED REGION ID(ElementLogger::Data Members) ENABLED START -----*/

//	Add your own data members
	protected:
		Tango::DevBoolean	attr_enableLogForward_write;

	private:
		std::vector<std::string> m_log_source_devices;
		Tango::Group* m_managedLogDeviceGroup;

		std::vector<std::string> m_se_log_source_devices;
		std::map<std::string,Tango::DeviceProxy*> m_managedSELogAdminDeviceMap;

/*----- PROTECTED REGION END -----*/	//	ElementLogger::Data Members

//	Device property data members
public:
	//	EnableLogForwardDefault:	Enable forwarding of received logs from selected sources
	Tango::DevBoolean	enableLogForwardDefault;
	//	LogForwardSources:	List of devices used in log forwarding. 
	//  Logs from these selected devices are forwarded (if forwarding
	//  is enabled).
	vector<string>	logForwardSources;
	//	ManagedLogDevicesDefault:	Default list of devices to be added in log source group
	vector<string>	managedLogDevicesDefault;
	//	ManagedSELogDevicesDefault:	Default list of Sub-Element devices to be added in log 
	//  source group
	vector<string>	managedSELogDevicesDefault;
	//	RxControllerAddress:	
	string	rxControllerAddress;
	//	SpfControllerAddress:	
	string	spfControllerAddress;
	//	SELogLevelDefault:	Default SE logging level
	//  {0=OFF, 1=FATAL, 2=ERROR, 3=WARN, 4=INFO, 5=DEBUG}
	Tango::DevLong	sELogLevelDefault;

	bool	mandatoryNotDefined;

//	Attribute data members
public:

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	ElementLogger(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	ElementLogger(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	ElementLogger(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~ElementLogger() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : ElementLogger::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : ElementLogger::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);



	//--------------------------------------------------------
	/**
	 *	Method      : ElementLogger::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command log related method
	 *	Description: Command to handle logs received from devices
	 *
	 *	@param argin Logging info received from emitter devices
	 */
	virtual void log(const Tango::DevVarStringArray *argin);
	virtual bool is_log_allowed(const CORBA::Any &any);
	/**
	 *	Command TestLog related method
	 *	Description: Generate a log in the device according to the given level.
	 *               Used for testing purposes.
	 *
	 *	@param argin Long arg
	 *               [0]: Level of log message
	 *               (0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)
	 *               
	 *               String arg
	 *               [0]: log message
	 */
	virtual void test_log(const Tango::DevVarLongStringArray *argin);
	virtual bool is_TestLog_allowed(const CORBA::Any &any);
	/**
	 *	Command AddLogSource related method
	 *	Description: Add a device log source to the list of managed devices
	 *
	 *	@param argin Device name
	 */
	virtual void add_log_source(Tango::DevString argin);
	virtual bool is_AddLogSource_allowed(const CORBA::Any &any);
	/**
	 *	Command RemoveLogSource related method
	 *	Description: Remove a device log source from the list of managed devices
	 *
	 *	@param argin Device name
	 */
	virtual void remove_log_source(Tango::DevString argin);
	virtual bool is_RemoveLogSource_allowed(const CORBA::Any &any);
	/**
	 *	Command InitializeLogSources related method
	 *	Description: Initialize log source group
	 *
	 */
	virtual void initialize_log_sources();
	virtual bool is_InitializeLogSources_allowed(const CORBA::Any &any);
	/**
	 *	Command InitializeSELogSources related method
	 *	Description: Initialize Sub-Element log sources
	 *
	 */
	virtual void initialize_selog_sources();
	virtual bool is_InitializeSELogSources_allowed(const CORBA::Any &any);
	/**
	 *	Command AddSELogSource related method
	 *	Description: Add a device to SubElement log source group
	 *
	 *	@param argin Device name
	 */
	virtual void add_selog_source(Tango::DevString argin);
	virtual bool is_AddSELogSource_allowed(const CORBA::Any &any);
	/**
	 *	Command RemoveSELogSource related method
	 *	Description: Remove a device from SubElement log source group
	 *
	 *	@param argin Device name
	 */
	virtual void remove_selog_source(Tango::DevString argin);
	virtual bool is_RemoveSELogSource_allowed(const CORBA::Any &any);
	/**
	 *	Command SetLoggingLevelCentral related method
	 *	Description: Update logging level to Central logger for specific devices.
	 *               Typically used by TM/CentralLogger to configure 
	 *               remote logging.
	 *
	 *	@param argin Long arg
	 *               [0]: log level in Tango format
	 *               
	 *               String arg
	 *               [0]: device 1
	 *               [1]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void set_logging_level_central(const Tango::DevVarLongStringArray *argin);
	virtual bool is_SetLoggingLevelCentral_allowed(const CORBA::Any &any);
	/**
	 *	Command SetLoggingLevelElement related method
	 *	Description: Update logging level to Element logger for specific devices.
	 *               Typically used by TM/Central logger or ElementLogger 
	 *               to configure Element level logging.
	 *
	 *	@param argin Long arg
	 *               [0]: log level in Tango format
	 *               
	 *               String arg
	 *               [0]: device 1
	 *               [1]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void set_logging_level_element(const Tango::DevVarLongStringArray *argin);
	virtual bool is_SetLoggingLevelElement_allowed(const CORBA::Any &any);
	/**
	 *	Command SetLoggingLevelStorage related method
	 *	Description: Update logging level to Syslog for specific devices.
	 *               Typically used by TM/Central logger or ElementLogger 
	 *               to configure logging level for storage.
	 *
	 *	@param argin Long arg
	 *               [0]: log level in Tango format
	 *               
	 *               String arg
	 *               [0]: device 1
	 *               [1]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void set_logging_level_storage(const Tango::DevVarLongStringArray *argin);
	virtual bool is_SetLoggingLevelStorage_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFLoggingLevel related method
	 *	Description: Set SPF logging level. This command changes the logging
	 *               level of SPFController Tango device only and NOT of the 
	 *               internal SPF devices.
	 *
	 *	@param argin Log level in Tango format
	 */
	virtual void set_spflogging_level(Tango::DevLong argin);
	virtual bool is_SetSPFLoggingLevel_allowed(const CORBA::Any &any);
	/**
	 *	Command SetRxLoggingLevel related method
	 *	Description: Set the logging level of Rx controller.
	 *
	 *	@param argin Log level in Tango format
	 */
	virtual void set_rx_logging_level(Tango::DevLong argin);
	virtual bool is_SetRxLoggingLevel_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFLoggingTarget related method
	 *	Description: Set SPF device logging target
	 *               NB: All existing device log targets will be removed.
	 *
	 *	@param argin Device to be set as log target in SPF
	 */
	virtual void set_spflogging_target(Tango::DevString argin);
	virtual bool is_SetSPFLoggingTarget_allowed(const CORBA::Any &any);
	/**
	 *	Command SetRxLoggingTarget related method
	 *	Description: Set device log target for SPFRx. 
	 *               NB: All existing targets previously set will be removed.
	 *
	 *	@param argin Device name to be set as log target for SPFRx
	 */
	virtual void set_rx_logging_target(Tango::DevString argin);
	virtual bool is_SetRxLoggingTarget_allowed(const CORBA::Any &any);
	/**
	 *	Command EnableCentralLogger related method
	 *	Description: Enable central logger in all or in sub-set of managed LMC
	 *               devices.
	 *
	 *	@param argin List of managed LMC device over which the command will be applied.
	 *               If empty, applied to all devices.
	 *               
	 *               [0]: device 1
	 *               [1]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void enable_central_logger(const Tango::DevVarStringArray *argin);
	virtual bool is_EnableCentralLogger_allowed(const CORBA::Any &any);
	/**
	 *	Command DisableCentralLogger related method
	 *	Description: Disable central logger in all or in sub-set of managed LMC
	 *               devices.
	 *
	 *	@param argin List of managed LMC device over which the command will be applied.
	 *               If empty, applied to all devices.
	 *               
	 *               [0]: device 1
	 *               [1]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void disable_central_logger(const Tango::DevVarStringArray *argin);
	virtual bool is_DisableCentralLogger_allowed(const CORBA::Any &any);
	/**
	 *	Command EnableElementLogger related method
	 *	Description: Enable Element logger in all or in sub-set of managed LMC
	 *               devices.
	 *
	 *	@param argin List of managed LMC device over which the command will be applied.
	 *               If empty, applied to all devices.
	 *               
	 *               [0]: device 1
	 *               [1]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void enable_element_logger(const Tango::DevVarStringArray *argin);
	virtual bool is_EnableElementLogger_allowed(const CORBA::Any &any);
	/**
	 *	Command DisableElementLogger related method
	 *	Description: Disable Element logger in all or in sub-set of managed LMC
	 *               devices.
	 *
	 *	@param argin List of managed LMC device over which the command will be applied.
	 *               If empty, applied to all devices.
	 *               
	 *               [0]: device 1
	 *               [1]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void disable_element_logger(const Tango::DevVarStringArray *argin);
	virtual bool is_DisableElementLogger_allowed(const CORBA::Any &any);
	/**
	 *	Command EnableStorageLogger related method
	 *	Description: Enable storage logger in all or in sub-set of managed LMC
	 *               devices.
	 *
	 *	@param argin List of managed LMC device over which the command will be applied.
	 *               If empty, applied to all devices.
	 *               
	 *               [0]: device 1
	 *               [1]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void enable_storage_logger(const Tango::DevVarStringArray *argin);
	virtual bool is_EnableStorageLogger_allowed(const CORBA::Any &any);
	/**
	 *	Command DisableStorageLogger related method
	 *	Description: Disable storage logger in all or in sub-set of managed LMC
	 *               devices.
	 *
	 *	@param argin List of managed LMC device over which the command will be applied.
	 *               If empty, applied to all devices.
	 *               
	 *               [0]: device 1
	 *               [1]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void disable_storage_logger(const Tango::DevVarStringArray *argin);
	virtual bool is_DisableStorageLogger_allowed(const CORBA::Any &any);
	/**
	 *	Command SetLoggingTargetCentral related method
	 *	Description: Set central log target for all or a subset of LMC devices.
	 *
	 *	@param argin [0]: log target
	 *               [1]: device 1
	 *               [2]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void set_logging_target_central(const Tango::DevVarStringArray *argin);
	virtual bool is_SetLoggingTargetCentral_allowed(const CORBA::Any &any);
	/**
	 *	Command SetLoggingTargetElement related method
	 *	Description: Set Element log target for all or a subset of LMC devices.
	 *
	 *	@param argin [0]: log target
	 *               [1]: device 1
	 *               [2]: device 2
	 *               ...
	 *               [N-1]: device N-1
	 */
	virtual void set_logging_target_element(const Tango::DevVarStringArray *argin);
	virtual bool is_SetLoggingTargetElement_allowed(const CORBA::Any &any);
	/**
	 *	Command SetLoggingTargetStorage related method
	 *	Description: Set storage log target for all or a subset of LMC devices.
	 *
	 *	@param argin 
	 */
	virtual void set_logging_target_storage(const Tango::DevVarStringArray *argin);
	virtual bool is_SetLoggingTargetStorage_allowed(const CORBA::Any &any);

//	Dynamic commands methods
public:
	/**
	 *	Command dummyDynCmd related method
	 *	Description: 
	 *
	 */
	virtual void dummy_dyn_cmd(Tango::Command &command);
	virtual bool is_dummyDynCmd_allowed(const CORBA::Any &any);
	void add_dummyDynCmd_dynamic_command(string cmdname, bool device);
	void remove_dummyDynCmd_dynamic_command(string cmdname);

	//--------------------------------------------------------
	/**
	 *	Method      : ElementLogger::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(ElementLogger::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	protected:
		//virtual void write_loggingLevelElement(Tango::WAttribute &attr);
		
		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::InitCmdAttrStateMachine()
	 	*	Description : Initialize cmd & attr state machine
	 	*/
		//--------------------------------------------------------
		virtual int InitCmdAttrStateMachine();

		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::RegisterProxies()
	 	*	Description : Register device proxies to be used (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterProxies();

		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::RegisterEventSubscriptions()
	 	*	Description : Register event subscriptions for device proxies (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterEventSubscriptions();

		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::RegisterEventHandlers()
	 	*	Description : Register handler commands to be inkoved on event receiption (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterEventHandlers();

		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::InitLogSources()
	 	*	Description : Initialize log source group from default property
	 	*/
		//--------------------------------------------------------
		int InitLogSources();

		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::InitSELogSources()
	 	*	Description : Initialize SE log source group from default property
	 	*/
		//--------------------------------------------------------
		int InitSELogSources();


		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::AddLogSourceToGroup()
	 	*	Description : Add a device to log source group
	 	*/
		//--------------------------------------------------------
		int AddLogSourceToGroup(std::string dev_name);	

		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::AddLogSourceToGroup()
	 	*	Description : Add a device to log source group
	 	*/
		//--------------------------------------------------------
		int RemoveLogSourceFromGroup(std::string dev_name);	

		
		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::AddSELogSourceToGroup()
	 	*	Description : Add a device to SE log source group
	 	*/
		//--------------------------------------------------------
		int AddSELogSourceToGroup(std::string dev_name);	

		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::RemoveSELogSourceFromGroup()
	 	*	Description : Remove a device from SE log source group
	 	*/
		//--------------------------------------------------------
		int RemoveSELogSourceFromGroup(std::string dev_name);	

		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::SetSELoggingLevel()
	 	*	Description : Set SubElement logging level
	 	*/
		//--------------------------------------------------------
		void SetSELoggingLevel(std::string dev_name,Tango::DevLong log_level);

		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::SetSELoggingTarget()
	 	*	Description : Set SubElement logging target
	 	*/
		//--------------------------------------------------------
		void SetSELoggingTarget(std::string dev_name,std::string log_target);

		//--------------------------------------------------------
		/**
	 	*	Method      : ElementLogger::IsForwardedLogSource()
	 	*	Description : Check if log source is among forwarded log devices
	 	*/
		//--------------------------------------------------------
		bool IsForwardedLogSource(std::string log_source);


	friend class ElementLoggerClass;

/*----- PROTECTED REGION END -----*/	//	ElementLogger::Additional Method prototypes
};

/*----- PROTECTED REGION ID(ElementLogger::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	ElementLogger::Additional Classes Definitions

}	//	End of namespace

#endif   //	ElementLogger_H
