/*----- PROTECTED REGION ID(ElementLoggerClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        ElementLoggerClass.cpp
//
// description : C++ source for the ElementLoggerClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the ElementLogger once per process.
//
// project :     ElementLogger
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <ElementLoggerClass.h>

/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass.cpp

//-------------------------------------------------------------------
/**
 *	Create ElementLoggerClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_ElementLogger_class(const char *name) {
		return ElementLogger_ns::ElementLoggerClass::init(name);
	}
}

namespace ElementLogger_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
ElementLoggerClass *ElementLoggerClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		ElementLoggerClass::ElementLoggerClass(string &s)
 * description : 	constructor for the ElementLoggerClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
ElementLoggerClass::ElementLoggerClass(string &s):LMCDevice_ns::LMCDeviceClass(s)
{
	cout2 << "Entering ElementLoggerClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(ElementLoggerClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::constructor

	cout2 << "Leaving ElementLoggerClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		ElementLoggerClass::~ElementLoggerClass()
 * description : 	destructor for the ElementLoggerClass
 */
//--------------------------------------------------------
ElementLoggerClass::~ElementLoggerClass()
{
	/*----- PROTECTED REGION ID(ElementLoggerClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		ElementLoggerClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
ElementLoggerClass *ElementLoggerClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new ElementLoggerClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		ElementLoggerClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
ElementLoggerClass *ElementLoggerClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		logClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *logClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "logClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->log(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		TestLogClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *TestLogClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "TestLogClass::execute(): arrived" << endl;
	const Tango::DevVarLongStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->test_log(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		AddLogSourceClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AddLogSourceClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "AddLogSourceClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->add_log_source(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		RemoveLogSourceClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *RemoveLogSourceClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "RemoveLogSourceClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->remove_log_source(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		InitializeLogSourcesClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *InitializeLogSourcesClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "InitializeLogSourcesClass::execute(): arrived" << endl;
	((static_cast<ElementLogger *>(device))->initialize_log_sources());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		InitializeSELogSourcesClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *InitializeSELogSourcesClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "InitializeSELogSourcesClass::execute(): arrived" << endl;
	((static_cast<ElementLogger *>(device))->initialize_selog_sources());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		AddSELogSourceClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AddSELogSourceClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "AddSELogSourceClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->add_selog_source(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		RemoveSELogSourceClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *RemoveSELogSourceClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "RemoveSELogSourceClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->remove_selog_source(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetLoggingLevelCentralClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetLoggingLevelCentralClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetLoggingLevelCentralClass::execute(): arrived" << endl;
	const Tango::DevVarLongStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->set_logging_level_central(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetLoggingLevelElementClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetLoggingLevelElementClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetLoggingLevelElementClass::execute(): arrived" << endl;
	const Tango::DevVarLongStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->set_logging_level_element(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetLoggingLevelStorageClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetLoggingLevelStorageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetLoggingLevelStorageClass::execute(): arrived" << endl;
	const Tango::DevVarLongStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->set_logging_level_storage(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFLoggingLevelClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFLoggingLevelClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFLoggingLevelClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->set_spflogging_level(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRxLoggingLevelClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRxLoggingLevelClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetRxLoggingLevelClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->set_rx_logging_level(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFLoggingTargetClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFLoggingTargetClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFLoggingTargetClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->set_spflogging_target(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRxLoggingTargetClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRxLoggingTargetClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetRxLoggingTargetClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->set_rx_logging_target(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		EnableCentralLoggerClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *EnableCentralLoggerClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "EnableCentralLoggerClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->enable_central_logger(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DisableCentralLoggerClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DisableCentralLoggerClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DisableCentralLoggerClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->disable_central_logger(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		EnableElementLoggerClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *EnableElementLoggerClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "EnableElementLoggerClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->enable_element_logger(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DisableElementLoggerClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DisableElementLoggerClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DisableElementLoggerClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->disable_element_logger(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		EnableStorageLoggerClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *EnableStorageLoggerClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "EnableStorageLoggerClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->enable_storage_logger(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DisableStorageLoggerClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DisableStorageLoggerClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DisableStorageLoggerClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->disable_storage_logger(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetLoggingTargetCentralClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetLoggingTargetCentralClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetLoggingTargetCentralClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->set_logging_target_central(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetLoggingTargetElementClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetLoggingTargetElementClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetLoggingTargetElementClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->set_logging_target_element(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetLoggingTargetStorageClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetLoggingTargetStorageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetLoggingTargetStorageClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<ElementLogger *>(device))->set_logging_target_storage(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		dummyDynCmdClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *dummyDynCmdClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "dummyDynCmdClass::execute(): arrived" << endl;
	((static_cast<ElementLogger *>(device))->dummy_dyn_cmd(*this));
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : ElementLoggerClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum ElementLoggerClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : ElementLoggerClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum ElementLoggerClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : ElementLoggerClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum ElementLoggerClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : ElementLoggerClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void ElementLoggerClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "EnableLogForwardDefault";
	prop_desc = "Enable forwarding of received logs from selected sources";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "LogForwardSources";
	prop_desc = "List of devices used in log forwarding. \nLogs from these selected devices are forwarded (if forwarding\nis enabled).";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ManagedLogDevicesDefault";
	prop_desc = "Default list of devices to be added in log source group";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ManagedSELogDevicesDefault";
	prop_desc = "Default list of Sub-Element devices to be added in log \nsource group";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RxControllerAddress";
	prop_desc = "";
	prop_def  = "rx_controller";
	vect_data.clear();
	vect_data.push_back("rx_controller");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SpfControllerAddress";
	prop_desc = "";
	prop_def  = "spf_controller";
	vect_data.clear();
	vect_data.push_back("spf_controller");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SELogLevelDefault";
	prop_desc = "Default SE logging level\n{0=OFF, 1=FATAL, 2=ERROR, 3=WARN, 4=INFO, 5=DEBUG}";
	prop_def  = "4";
	vect_data.clear();
	vect_data.push_back("4");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : ElementLoggerClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void ElementLoggerClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("ElementLogger");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("ElementLogger");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : ElementLoggerClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void ElementLoggerClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(ElementLoggerClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new ElementLogger(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		ElementLogger *dev = static_cast<ElementLogger *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();
		dev->add_dynamic_commands();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(ElementLoggerClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	//## Initialize task
	//## NB: This is done here and not inside init_device because dynamic attributes need to be registered first in device (done in add_dynamic_attributes)
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++) {

		//	Add dynamic attributes if any
		ElementLogger *dev = static_cast<ElementLogger *>(device_list[device_list.size()-i]);

		//## Add managed devices to log source group
		dev->m_managedLogDeviceGroup= 0;
		if(dev->InitLogSources()<0){
			__WARN_LOG(dev,"Failed to initialize managed log source group, will retry later...");
		}

	
		//## Add SE log devices 
		dev->m_managedSELogAdminDeviceMap.clear();
		if(dev->InitSELogSources()<0){
			__WARN_LOG(dev,"Failed to initialize managed SE log source group, retry later...");
		}

		//## Set state to ON
		dev->set_state(Tango::ON);
		dev->set_status("ElementLogger is running");

	}//end loop devices
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ElementLoggerClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void ElementLoggerClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(ElementLoggerClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::attribute_factory_before
	//	Call atribute_factory for inherited class
	LMCDevice_ns::LMCDeviceClass::attribute_factory(att_list);

	//	Attribute : loggingLevelCentral - Check if not concrete in inherited class
	Tango::Attr *loggingLevelCentralAttr = get_attr_object_by_name(att_list, "loggingLevelCentral");
	if (loggingLevelCentralAttr == NULL)
	{
	}

	//	Attribute : loggingLevelElement - Check if not concrete in inherited class
	Tango::Attr *loggingLevelElementAttr = get_attr_object_by_name(att_list, "loggingLevelElement");
	if (loggingLevelElementAttr == NULL)
	{
	}

	//	Attribute : loggingLevelStorage - Check if not concrete in inherited class
	Tango::Attr *loggingLevelStorageAttr = get_attr_object_by_name(att_list, "loggingLevelStorage");
	if (loggingLevelStorageAttr == NULL)
	{
	}

	//	Attribute : loggingLevelConsole - Check if not concrete in inherited class
	Tango::Attr *loggingLevelConsoleAttr = get_attr_object_by_name(att_list, "loggingLevelConsole");
	if (loggingLevelConsoleAttr == NULL)
	{
	}

	//	Attribute : buildState - Check if not concrete in inherited class
	Tango::Attr *buildStateAttr = get_attr_object_by_name(att_list, "buildState");
	if (buildStateAttr == NULL)
	{
	}

	//	Attribute : centralLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *centralLoggerStatusAttr = get_attr_object_by_name(att_list, "centralLoggerStatus");
	if (centralLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : elementLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *elementLoggerStatusAttr = get_attr_object_by_name(att_list, "elementLoggerStatus");
	if (elementLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : storageLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *storageLoggerStatusAttr = get_attr_object_by_name(att_list, "storageLoggerStatus");
	if (storageLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : eventRate - Check if not concrete in inherited class
	Tango::Attr *eventRateAttr = get_attr_object_by_name(att_list, "eventRate");
	if (eventRateAttr == NULL)
	{
	}

	//	Attribute : exceptionRate - Check if not concrete in inherited class
	Tango::Attr *exceptionRateAttr = get_attr_object_by_name(att_list, "exceptionRate");
	if (exceptionRateAttr == NULL)
	{
	}

	//	Attribute : fwdAttrInitStatus - Check if not concrete in inherited class
	Tango::Attr *fwdAttrInitStatusAttr = get_attr_object_by_name(att_list, "fwdAttrInitStatus");
	if (fwdAttrInitStatusAttr == NULL)
	{
	}

	//	Attribute : centralLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *centralLoggerEnabledAttr = get_attr_object_by_name(att_list, "centralLoggerEnabled");
	if (centralLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : elementLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *elementLoggerEnabledAttr = get_attr_object_by_name(att_list, "elementLoggerEnabled");
	if (elementLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : storageLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *storageLoggerEnabledAttr = get_attr_object_by_name(att_list, "storageLoggerEnabled");
	if (storageLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : loggingTargetCentral - Check if not concrete in inherited class
	Tango::Attr *loggingTargetCentralAttr = get_attr_object_by_name(att_list, "loggingTargetCentral");
	if (loggingTargetCentralAttr == NULL)
	{
	}

	//	Attribute : loggingTargetElement - Check if not concrete in inherited class
	Tango::Attr *loggingTargetElementAttr = get_attr_object_by_name(att_list, "loggingTargetElement");
	if (loggingTargetElementAttr == NULL)
	{
	}

	//	Attribute : loggingTargetStorage - Check if not concrete in inherited class
	Tango::Attr *loggingTargetStorageAttr = get_attr_object_by_name(att_list, "loggingTargetStorage");
	if (loggingTargetStorageAttr == NULL)
	{
	}

	//	Attribute : attrRandomizationEnabled - Check if not concrete in inherited class
	Tango::Attr *attrRandomizationEnabledAttr = get_attr_object_by_name(att_list, "attrRandomizationEnabled");
	if (attrRandomizationEnabledAttr == NULL)
	{
	}

	//	Attribute : attrRandomizationPeriod - Check if not concrete in inherited class
	Tango::Attr *attrRandomizationPeriodAttr = get_attr_object_by_name(att_list, "attrRandomizationPeriod");
	if (attrRandomizationPeriodAttr == NULL)
	{
	}


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(ElementLoggerClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ElementLoggerClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void ElementLoggerClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(ElementLoggerClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::pipe_factory_before
	/*----- PROTECTED REGION ID(ElementLoggerClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ElementLoggerClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void ElementLoggerClass::command_factory()
{
	/*----- PROTECTED REGION ID(ElementLoggerClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::command_factory_before
	//	Call command_factory for inherited class
	LMCDevice_ns::LMCDeviceClass::command_factory();


























	//	Command log
	logClass	*plogCmd =
		new logClass("log",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"Logging info received from emitter devices",
			"",
			Tango::OPERATOR);
	command_list.push_back(plogCmd);

	//	Command TestLog
	TestLogClass	*pTestLogCmd =
		new TestLogClass("TestLog",
			Tango::DEVVAR_LONGSTRINGARRAY, Tango::DEV_VOID,
			"Long arg\n[0]: Level of log message\n(0=OFF, 1=FATAL, 2=ERROR, 3=WARNING, 4=INFO, 5=DEBUG)\n\nString arg\n[0]: log message",
			"",
			Tango::OPERATOR);
	command_list.push_back(pTestLogCmd);

	//	Command AddLogSource
	AddLogSourceClass	*pAddLogSourceCmd =
		new AddLogSourceClass("AddLogSource",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Device name",
			"",
			Tango::OPERATOR);
	command_list.push_back(pAddLogSourceCmd);

	//	Command RemoveLogSource
	RemoveLogSourceClass	*pRemoveLogSourceCmd =
		new RemoveLogSourceClass("RemoveLogSource",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Device name",
			"",
			Tango::OPERATOR);
	command_list.push_back(pRemoveLogSourceCmd);

	//	Command InitializeLogSources
	InitializeLogSourcesClass	*pInitializeLogSourcesCmd =
		new InitializeLogSourcesClass("InitializeLogSources",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	pInitializeLogSourcesCmd->set_polling_period(10000);
	command_list.push_back(pInitializeLogSourcesCmd);

	//	Command InitializeSELogSources
	InitializeSELogSourcesClass	*pInitializeSELogSourcesCmd =
		new InitializeSELogSourcesClass("InitializeSELogSources",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	pInitializeSELogSourcesCmd->set_polling_period(3000);
	command_list.push_back(pInitializeSELogSourcesCmd);

	//	Command AddSELogSource
	AddSELogSourceClass	*pAddSELogSourceCmd =
		new AddSELogSourceClass("AddSELogSource",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Device name",
			"",
			Tango::OPERATOR);
	command_list.push_back(pAddSELogSourceCmd);

	//	Command RemoveSELogSource
	RemoveSELogSourceClass	*pRemoveSELogSourceCmd =
		new RemoveSELogSourceClass("RemoveSELogSource",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Device name",
			"",
			Tango::OPERATOR);
	command_list.push_back(pRemoveSELogSourceCmd);



	//	Command SetLoggingLevelCentral
	SetLoggingLevelCentralClass	*pSetLoggingLevelCentralCmd =
		new SetLoggingLevelCentralClass("SetLoggingLevelCentral",
			Tango::DEVVAR_LONGSTRINGARRAY, Tango::DEV_VOID,
			"Long arg\n[0]: log level in Tango format\n\nString arg\n[0]: device 1\n[1]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetLoggingLevelCentralCmd);

	//	Command SetLoggingLevelElement
	SetLoggingLevelElementClass	*pSetLoggingLevelElementCmd =
		new SetLoggingLevelElementClass("SetLoggingLevelElement",
			Tango::DEVVAR_LONGSTRINGARRAY, Tango::DEV_VOID,
			"Long arg\n[0]: log level in Tango format\n\nString arg\n[0]: device 1\n[1]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetLoggingLevelElementCmd);

	//	Command SetLoggingLevelStorage
	SetLoggingLevelStorageClass	*pSetLoggingLevelStorageCmd =
		new SetLoggingLevelStorageClass("SetLoggingLevelStorage",
			Tango::DEVVAR_LONGSTRINGARRAY, Tango::DEV_VOID,
			"Long arg\n[0]: log level in Tango format\n\nString arg\n[0]: device 1\n[1]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetLoggingLevelStorageCmd);

	//	Command SetSPFLoggingLevel
	SetSPFLoggingLevelClass	*pSetSPFLoggingLevelCmd =
		new SetSPFLoggingLevelClass("SetSPFLoggingLevel",
			Tango::DEV_LONG, Tango::DEV_VOID,
			"Log level in Tango format",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSPFLoggingLevelCmd);

	//	Command SetRxLoggingLevel
	SetRxLoggingLevelClass	*pSetRxLoggingLevelCmd =
		new SetRxLoggingLevelClass("SetRxLoggingLevel",
			Tango::DEV_LONG, Tango::DEV_VOID,
			"Log level in Tango format",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetRxLoggingLevelCmd);

	//	Command SetSPFLoggingTarget
	SetSPFLoggingTargetClass	*pSetSPFLoggingTargetCmd =
		new SetSPFLoggingTargetClass("SetSPFLoggingTarget",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Device to be set as log target in SPF",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSPFLoggingTargetCmd);

	//	Command SetRxLoggingTarget
	SetRxLoggingTargetClass	*pSetRxLoggingTargetCmd =
		new SetRxLoggingTargetClass("SetRxLoggingTarget",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Device name to be set as log target for SPFRx",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetRxLoggingTargetCmd);

	//	Command EnableCentralLogger
	EnableCentralLoggerClass	*pEnableCentralLoggerCmd =
		new EnableCentralLoggerClass("EnableCentralLogger",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"List of managed LMC device over which the command will be applied.\nIf empty, applied to all devices.\n\n[0]: device 1\n[1]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pEnableCentralLoggerCmd);

	//	Command DisableCentralLogger
	DisableCentralLoggerClass	*pDisableCentralLoggerCmd =
		new DisableCentralLoggerClass("DisableCentralLogger",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"List of managed LMC device over which the command will be applied.\nIf empty, applied to all devices.\n\n[0]: device 1\n[1]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pDisableCentralLoggerCmd);

	//	Command EnableElementLogger
	EnableElementLoggerClass	*pEnableElementLoggerCmd =
		new EnableElementLoggerClass("EnableElementLogger",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"List of managed LMC device over which the command will be applied.\nIf empty, applied to all devices.\n\n[0]: device 1\n[1]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pEnableElementLoggerCmd);

	//	Command DisableElementLogger
	DisableElementLoggerClass	*pDisableElementLoggerCmd =
		new DisableElementLoggerClass("DisableElementLogger",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"List of managed LMC device over which the command will be applied.\nIf empty, applied to all devices.\n\n[0]: device 1\n[1]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pDisableElementLoggerCmd);

	//	Command EnableStorageLogger
	EnableStorageLoggerClass	*pEnableStorageLoggerCmd =
		new EnableStorageLoggerClass("EnableStorageLogger",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"List of managed LMC device over which the command will be applied.\nIf empty, applied to all devices.\n\n[0]: device 1\n[1]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pEnableStorageLoggerCmd);

	//	Command DisableStorageLogger
	DisableStorageLoggerClass	*pDisableStorageLoggerCmd =
		new DisableStorageLoggerClass("DisableStorageLogger",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"List of managed LMC device over which the command will be applied.\nIf empty, applied to all devices.\n\n[0]: device 1\n[1]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pDisableStorageLoggerCmd);

	//	Command SetLoggingTargetCentral
	SetLoggingTargetCentralClass	*pSetLoggingTargetCentralCmd =
		new SetLoggingTargetCentralClass("SetLoggingTargetCentral",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"[0]: log target\n[1]: device 1\n[2]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetLoggingTargetCentralCmd);

	//	Command SetLoggingTargetElement
	SetLoggingTargetElementClass	*pSetLoggingTargetElementCmd =
		new SetLoggingTargetElementClass("SetLoggingTargetElement",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"[0]: log target\n[1]: device 1\n[2]: device 2\n...\n[N-1]: device N-1",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetLoggingTargetElementCmd);

	//	Command SetLoggingTargetStorage
	SetLoggingTargetStorageClass	*pSetLoggingTargetStorageCmd =
		new SetLoggingTargetStorageClass("SetLoggingTargetStorage",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetLoggingTargetStorageCmd);




	/*----- PROTECTED REGION ID(ElementLoggerClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		ElementLoggerClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void ElementLoggerClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(ElementLoggerClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		ElementLoggerClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void ElementLoggerClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		ElementLogger *dev = static_cast<ElementLogger *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(ElementLoggerClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : ElementLoggerClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *ElementLoggerClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(ElementLoggerClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	ElementLoggerClass::Additional Methods
} //	namespace
