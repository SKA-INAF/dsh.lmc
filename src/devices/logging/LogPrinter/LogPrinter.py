#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        LogPrinter.py
#
#  Project :     Print all logs to console
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      simone.riggi$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["LogPrinter", "LogPrinterClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(LogPrinter.additionnal_import) ENABLED START -----#

# Define log message accumulator
class LogMsgCounter:
  def __init__(self):
    self.ninfo = 0
    self.ndebug = 0
    self.nwarn = 0
    self.nerror = 0
    self.nfatal = 0
    
  def dump_counts(self):
		print('Log summary: %s' % (self.get_str_counts()) )

  def get_str_counts(self):
    counts_str= 'fatal=' + str(self.nfatal) + ', error=' + str(self.nerror) + ', warn=' + str(self.nwarn) + ', info=' + str(self.ninfo) + ', debug=' + str(self.ndebug)
    return counts_str

  def reset_counts(self):
    self.ninfo = 0
    self.ndebug = 0
    self.nwarn = 0
    self.nerror = 0
    self.nfatal = 0

  def update_counts(self,log_level):
    if log_level=='FATAL':
      self.nfatal+= 1
    elif log_level=='ERROR':
      self.nerror+= 1
    elif log_level=='WARN':
      self.nwarn+= 1
    elif log_level=='INFO':
      self.ninfo+= 1
    elif log_level=='DEBUG':
      self.ndebug+= 1
    else:
      return

#----- PROTECTED REGION END -----#	//	LogPrinter.additionnal_import

# Device States Description
# ON : 
# INIT : 


class LogPrinter (PyTango.Device_4Impl):
    """python log consumer device to print all received logs"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(LogPrinter.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LogPrinter.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        LogPrinter.init_device(self)
        #----- PROTECTED REGION ID(LogPrinter.__init__) ENABLED START -----#
        
        

        #----- PROTECTED REGION END -----#	//	LogPrinter.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(LogPrinter.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LogPrinter.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        #----- PROTECTED REGION ID(LogPrinter.init_device) ENABLED START -----#
        
        # Create a dictionary with log counters per device
        self.info_stream("Starting log printer device...")		

        # Init stuff
        self.log_summary= dict()

        # End initialization	
        self.set_state(PyTango.DevState.ON)
        self.info_stream("Log printer device started...")					


        #----- PROTECTED REGION END -----#	//	LogPrinter.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(LogPrinter.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LogPrinter.always_executed_hook

    # -------------------------------------------------------------------------
    #    LogPrinter read/write attribute methods
    # -------------------------------------------------------------------------
    
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(LogPrinter.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LogPrinter.read_attr_hardware


    # -------------------------------------------------------------------------
    #    LogPrinter command methods
    # -------------------------------------------------------------------------
    
    def log(self, argin):
        """ Command to handle logs received from devices.
        :param argin: Logging info received from emitter devices
        :type argin: PyTango.DevVarStringArray
        """
        self.debug_stream("In log()")
        #----- PROTECTED REGION ID(LogPrinter.log) ENABLED START -----#

        # Check size of input array       
        n= len(argin)
        if n<4:
          self.warn_stream("Insufficient number of entries in input arg received (4 at least required)!")
          return

        # Get input args: [0]=timestamp, [1]=log level, [2]= log source, [3]=log msg
        log_timestamp= argin[0]
        log_level= argin[1]
        log_source= argin[2]
        log_msg= argin[3]
        msg= 'Log received @ time=' + str(log_timestamp) + ', level=' + str(log_level) + ', source=' + str(log_source) + ', msg=' + str(log_msg)
        self.debug_stream(msg)
		
        # Count log messages per source per level
        if log_source not in self.log_summary:
          self.log_summary[log_source]= LogMsgCounter()
        self.log_summary[log_source].update_counts(log_level)
          
        # Dump updated log counts for this source
        counts_str= self.log_summary[log_source].get_str_counts() 
        summary= 'Log stats from device ' + log_source + ': ' + counts_str
        self.info_stream(summary)

        #----- PROTECTED REGION END -----#	//	LogPrinter.log
        
    def ResetLogCounts(self):
        """ Reset received log counts
        """
        self.debug_stream("In ResetLogCounts()")
        #----- PROTECTED REGION ID(LogPrinter.ResetLogCounts) ENABLED START -----#
        
        self.info_stream("Resetting log counts...")
        for key, value in self.log_summary.items():
          value.reset_counts()

        #----- PROTECTED REGION END -----#	//	LogPrinter.ResetLogCounts
        
    def GetLogCounts(self):
        """ Get list of received log counts per device source
        :rtype: PyTango.DevVarStringArray
        """
        self.debug_stream("In GetLogCounts()")
        argout = [""]
        #----- PROTECTED REGION ID(LogPrinter.GetLogCounts) ENABLED START -----#
        
        argout= []
        counter= 0
        for key, value in self.log_summary.items():
          counts_str= value.get_str_counts()
          summary= key + ': ' + counts_str
          argout.append(summary)
          counter+= 1

        #----- PROTECTED REGION END -----#	//	LogPrinter.GetLogCounts
        return argout
        

    #----- PROTECTED REGION ID(LogPrinter.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LogPrinter.programmer_methods

class LogPrinterClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(LogPrinter.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LogPrinter.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'log':
            [[PyTango.DevVarStringArray, "Logging info received from emitter devices"],
            [PyTango.DevVoid, "none"]],
        'ResetLogCounts':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'GetLogCounts':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVarStringArray, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(LogPrinterClass, LogPrinter, 'LogPrinter')
        #----- PROTECTED REGION ID(LogPrinter.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LogPrinter.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
