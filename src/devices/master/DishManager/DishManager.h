/*----- PROTECTED REGION ID(DishManager.h) ENABLED START -----*/

// **************************************************************************
// * License and Disclaimer                                                 *
// *                                                                        *
// * Copyright 2016 Simone Riggi																			      *
// *																																	      *
// * This file is part of SKA DSH.LMC 																		  *
// * SKA DSH.LMC is free software: you can redistribute it and/or modify it *
// * under the terms of the GNU General Public License as published by      *
// * the Free Software Foundation, either * version 3 of the License,       * 
// * or (at your option) any later version.                                 * 
// * DSH.LMC is distributed in the hope that it will be useful, but 			  *
// * WITHOUT ANY WARRANTY; without even the implied warranty of             * 
// * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                   *
// * See the GNU General Public License for more details. You should        * 
// * have received a copy of the GNU General Public License along with      * 
// * DSH.LMC. If not, see http://www.gnu.org/licenses/.                     *
// **************************************************************************

//=============================================================================
//
// file :        DishManager.h
//
// description : Include file for the DishManager class
//
// project :     DishManager
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef DishManager_H
#define DishManager_H

//#include <ConfigureThread.h>
#include <ConfigureTask.h>

#include <tango.h>
#include <LMCDevice.h>



/*----- PROTECTED REGION END -----*/	//	DishManager.h

/**
 *  DishManager class description:
 *    DishManager
 */

namespace DishManager_ns
{
enum _centralLoggerStatusEnum {
} ;
typedef _centralLoggerStatusEnum centralLoggerStatusEnum;

enum _elementLoggerStatusEnum {
} ;
typedef _elementLoggerStatusEnum elementLoggerStatusEnum;

enum _storageLoggerStatusEnum {
} ;
typedef _storageLoggerStatusEnum storageLoggerStatusEnum;

enum _fwdAttrInitStatusEnum {
} ;
typedef _fwdAttrInitStatusEnum fwdAttrInitStatusEnum;

/*----- PROTECTED REGION ID(DishManager::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
	//class ConfigureThread;
	class ConfigureTask;

/*----- PROTECTED REGION END -----*/	//	DishManager::Additional Class Declarations

class DishManager : public LMCDevice_ns::LMCDevice
{

/*----- PROTECTED REGION ID(DishManager::Data Members) ENABLED START -----*/

//	Add your own data members
	protected:
		omni_mutex m_mutex;
		//ConfigureThread* m_configureThread;	
		ConfigureTask* m_configureTask;
		
/*----- PROTECTED REGION END -----*/	//	DishManager::Data Members

//	Device property data members
public:
	//	ElementLoggerAddress:	Address of ElementLogger device server.
	//  CentralLogger will use this to find the ElementLogger to 
	//  connect to for configuring remote logging of devices 
	//  in the Element facility
	string	elementLoggerAddress;
	//	ElementAlarmsAddress:	Address of ElementAlarms device server.
	//  CentralAlarms will use this to find the ElementAlarms to 
	//  connect to for subscribing to SKA Alarms on the Element.
	string	elementAlarmsAddress;
	//	ElementTelModelAddress:	Address of ElementTelModel device server.
	//  Any Element can use this to find the ElementTelModel 
	//  which exposes the Telescope Model items in the Element 
	//  so that it can subscribe to it for updates.
	string	elementTelModelAddress;
	//	ElementDatabaseDSAddress:	Address of Element Database device server.
	//  Central Archiver will find the ElementDatabaseDS to discover 
	//  all the devices in the Element facility to subscribe for archive 
	//  events to populate the Central Archive
	string	elementDatabaseDSAddress;
	//	AdminModeDefault:	Default value assumed for adminMode if a memorized value
	//  is not present in DB (e.g. at first initialization)
	Tango::DevShort	adminModeDefault;
	//	AsynchCmdReplyTimeout:	Timeout (in ms) used to get asynchronous command reply
	Tango::DevLong	asynchCmdReplyTimeout;
	//	AsynchCmdReplyNRetries:	Number of attempts performed to retrieve asynchronous command
	//  reply. Each attempt uses the AsynchCmdReplyTimeout property
	//  as timeout.
	Tango::DevLong	asynchCmdReplyNRetries;
	//	ConfigureMonitoringPollPeriod:	Polling period (in ms) used when monitoring band configuration
	//  progress
	Tango::DevLong	configureMonitoringPollPeriod;
	//	ConfigureMonitoringTimeout:	Timeout (in ms) used when monitoring the band configuration
	//  task. When the timeout is exceeded it is assumed that the 
	//  configuration is faulty or anomalous and an alarm attribute should
	//  be set.
	Tango::DevLong	configureMonitoringTimeout;
	//	SynchCmdReplyTimeout:	Timeout (in ms) to be used for synchronous commands
	//  Default is 3000 ms in Tango.
	Tango::DevLong	synchCmdReplyTimeout;
	//	StowTaskTimeout:	Timeout (in seconds) to be used for stow task
	Tango::DevLong	stowTaskTimeout;
	//	ConfigureTaskTimeout:	Timeout (in seconds) to be used for Configure task
	Tango::DevLong	configureTaskTimeout;
	//	OperateTaskTimeout:	Timeout (in seconds) of operate task
	Tango::DevLong	operateTaskTimeout;
	//	ShutdownTaskTimeout:	Timeout (in seconds) used for dish shutdown task
	Tango::DevLong	shutdownTaskTimeout;
	//	RxShutdownTimeDelay:	Time delay (in seconds) before placing Rx in safe mode (STANDBY-LP)
	//  when a power cut event is received.
	Tango::DevLong	rxShutdownTimeDelay;
	//	StandbyFPTaskTimeout:	Timeout (in seconds) to be used in SetStandbyFPMode task
	Tango::DevLong	standbyFPTaskTimeout;
	//	SPFStartupTimeout:	SPF startup timeout (in seconds) after which a startup alarm
	//  is raised by the device.
	Tango::DevLong	sPFStartupTimeout;
	//	RxControllerAddress:	FQDN of Rx controller Tango device
	string	rxControllerAddress;
	//	SpfControllerAddress:	
	string	spfControllerAddress;
	//	DsManagerAddress:	
	string	dsManagerAddress;
	//	ControlModeDefault:	Default control mode applied when no memorized value is present.
	//  Default is REMOTE control.
	Tango::DevShort	controlModeDefault;
	//	RequestedBandDefault:	Requested band default applied when no memorized value is present.
	//  Default is NONE
	Tango::DevShort	requestedBandDefault;
	//	TmProxyAddressDefault:	Default TM Tango device managing this Dish Element
	string	tmProxyAddressDefault;
	//	PduManagerAddress:	Proxy address of PDU manager device
	string	pduManagerAddress;

	bool	mandatoryNotDefined;

//	Attribute data members
public:

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	DishManager(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	DishManager(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	DishManager(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~DishManager() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : DishManager::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : DishManager::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);



	//--------------------------------------------------------
	/**
	 *	Method      : DishManager::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command SetStandbyLPMode related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               STANDBY-LP Dish Element Mode, and returns to the caller. 
	 *               Standby_LP is the default mode when the Dish is 
	 *               configured for low power consumption, and is the mode 
	 *               wherein Dish ends after a start up procedure.
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_standby_lpmode();
	virtual bool is_SetStandbyLPMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetStandbyFPMode related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               STANDBY-FP Dish Element Mode, and returns to the caller.
	 *               To prepare all subsystems for active observation, once 
	 *               a command is received by TM to go to the FULL_POWER 
	 *               mode.
	 *               
	 *               Command allowed only in DIsh modes:
	 *               {STANDBY-LP/STOW/OPERATE/MAINTENANCE}
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_standby_fpmode();
	virtual bool is_SetStandbyFPMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetOperateMode related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               OPERATE Dish Element Mode, and returns to the caller. 
	 *               This mode fulfils the main purpose of the Dish, which is to 
	 *               point to designated directions while capturing data and 
	 *               transmitting it to CSP.
	 *               
	 *               Command allowed only in Dish modes:
	 *               {STANDBY-FP}
	 *
	 *	@returns 0]: ack code (0=OK, 1=QUEUED, 2=FAILED)
	 *           
	 *           == String field ==
	 *           [0]: Informative message or error/fault description
	 */
	virtual Tango::DevVarLongStringArray *set_operate_mode();
	virtual bool is_SetOperateMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetMaintenanceMode related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               MAINTENANCE Dish Element Mode, and returns to the 
	 *               caller. To go into a state that is safe to approach the 
	 *               Dish by a maintainer, and to enable the Engineering 
	 *               interface to allow direct access to low level control and
	 *               monitoring by engineers and maintainers. 
	 *               This mode will also enable engineers and maintainers 
	 *               to upgrade SW and FW. Dish also enters this mode 
	 *               when an emergency stop button is pressed.
	 *               
	 *               Command allowed ony in Dish modes: 
	 *               {STANDBY-LP/STANDBY-FP}
	 *
	 *	@returns == Long field ==
	 *           [0]: ack code (0=OK, 1=QUEUED, 2=FAILED)
	 *           
	 *           == String field ==
	 *           [0]: Informative message or error/fault description
	 */
	virtual Tango::DevVarLongStringArray *set_maintenance_mode();
	virtual bool is_SetMaintenanceMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetStowMode related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               STOW Dish Element Mode, and returns to the caller. 
	 *               To point the dish in a direction that minimises the 
	 *               wind loads on the structure, for survival in strong wind 
	 *               conditions. The Dish is able to observe in the stow 
	 *               position, for the purpose of transient detection.
	 *
	 *	@returns == Long field ==
	 *           [0]: ack code (0=OK, 1=QUEUED, 2=FAILED)
	 *           
	 *           == String field ==
	 *           [0]: Informative message or error/fault description
	 */
	virtual Tango::DevVarLongStringArray *set_stow_mode();
	virtual bool is_SetStowMode_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureBand1 related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               CONFIGURE Dish Element Mode, and returns to the caller. 
	 *               To configure the Dish to operate in frequency band 1. 
	 *               On completion of the band configuration, Dish will 
	 *               automatically revert to the previous Dish mode 
	 *               (OPERATE or STANDBY-FP).
	 *               
	 *               Command allowed only in Dish modes:
	 *               {STANDBY-FP/OPERATE/STOW}
	 *
	 *	@param argin [timestamp]
	 */
	virtual void configure_band1(Tango::DevString argin);
	virtual bool is_ConfigureBand1_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureBand2 related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               CONFIGURE Dish Element Mode, and returns to the caller. 
	 *               To configure the Dish to operate in frequency band 2. 
	 *               On completion of the band configuration, Dish will 
	 *               automatically revert to the previous Dish mode 
	 *               (OPERATE or STANDBY-FP).
	 *               
	 *               Command allowed only in Dish modes:
	 *               {STANDBY-FP/OPERATE/STOW}
	 *
	 *	@param argin [timestamp]
	 */
	virtual void configure_band2(Tango::DevString argin);
	virtual bool is_ConfigureBand2_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureBand3 related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               CONFIGURE Dish Element Mode, and returns to the caller. 
	 *               To configure the Dish to operate in frequency band 3. 
	 *               On completion of the band configuration, Dish will 
	 *               automatically revert to the previous Dish mode 
	 *               (OPERATE or STANDBY-FP).
	 *               
	 *               Command allowed only in Dish modes:
	 *               {STANDBY-FP/OPERATE/STOW}
	 *
	 *	@param argin [timestamp]
	 */
	virtual void configure_band3(Tango::DevString argin);
	virtual bool is_ConfigureBand3_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureBand4 related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               CONFIGURE Dish Element Mode, and returns to the caller. 
	 *               To configure the Dish to operate in frequency band 4. 
	 *               On completion of the band configuration, Dish will 
	 *               automatically revert to the previous Dish mode 
	 *               (OPERATE or STANDBY-FP).
	 *               
	 *               Command allowed only in Dish modes:
	 *               {STANDBY-FP/OPERATE/STOW}
	 *
	 *	@param argin [timestamp]
	 */
	virtual void configure_band4(Tango::DevString argin);
	virtual bool is_ConfigureBand4_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureBand5a related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               CONFIGURE Dish Element Mode, and returns to the caller. 
	 *               To configure the Dish to operate in frequency band 5. 
	 *               On completion of the band configuration, Dish will 
	 *               automatically revert to the previous Dish mode 
	 *               (OPERATE or STANDBY-FP).
	 *               
	 *               Command allowed only in Dish modes:
	 *               {STANDBY-FP/OPERATE/STOW}
	 *
	 *	@param argin [timestamp]
	 */
	virtual void configure_band5a(Tango::DevString argin);
	virtual bool is_ConfigureBand5a_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureBand5b related method
	 *	Description: This command triggers the Dish to transition to the 
	 *               CONFIGURE Dish Element Mode, and returns to the caller. 
	 *               To configure the Dish to operate in frequency band 5. 
	 *               On completion of the band configuration, Dish will 
	 *               automatically revert to the previous Dish mode 
	 *               (OPERATE or STANDBY-FP).
	 *               
	 *               Command allowed only in Dish modes:
	 *               {STANDBY-FP/OPERATE/STOW}
	 *
	 *	@param argin 
	 */
	virtual void configure_band5b(Tango::DevString argin);
	virtual bool is_ConfigureBand5b_allowed(const CORBA::Any &any);
	/**
	 *	Command SetIndexerPosition related method
	 *	Description: Set indexer position
	 *
	 *	@param argin bandId position
	 */
	virtual void set_indexer_position(Tango::DevShort argin);
	virtual bool is_SetIndexerPosition_allowed(const CORBA::Any &any);
	/**
	 *	Command SetIndexerPositionTask related method
	 *	Description: Set indexer position in DS
	 *
	 *	@param argin Task encoded data
	 */
	virtual void set_indexer_position_task(Tango::DevString argin);
	virtual bool is_SetIndexerPositionTask_allowed(const CORBA::Any &any);
	/**
	 *	Command Track related method
	 *	Description: The Dish moves to the commanded pointing angle at 
	 *               the maximum speed, as defined by the specified slew 
	 *               rate. No pointing accuracy requirements are applicable 
	 *               in this state. SLEW state will also be reported while the 
	 *               Dish is settling onto a target and is still not within 
	 *               the specified pointing accuracy. As soon as the 
	 *               pointing accuracy is within specifications, the state 
	 *               changes to TRACK.
	 *               
	 *               Command allowed only in DIsh modes:
	 *               {OPERATE}
	 *
	 *	@param argin [timestamp]
	 */
	virtual void track(Tango::DevString argin);
	virtual bool is_Track_allowed(const CORBA::Any &any);
	/**
	 *	Command Slew related method
	 *	Description: The Dish is tracking the commanded pointing positions 
	 *               within the specified TRACK pointing accuracy.
	 *               
	 *               Command allowed only in DIsh modes:
	 *               {OPERATE}
	 *
	 *	@param argin [timestamp]
	 */
	virtual void slew(Tango::DevString argin);
	virtual bool is_Slew_allowed(const CORBA::Any &any);
	/**
	 *	Command Scan related method
	 *	Description: The Dish is tracking the commanded pointing positions 
	 *               within the specified SCAN pointing accuracy. (TBC)
	 *               NOTE: This pointing state is currently proposed and 
	 *               there are currently no requirements for this functionality.
	 *               
	 *               Command allowed only in DIsh modes:
	 *               {OPERATE}
	 *
	 *	@param argin [timestamp]
	 */
	virtual void scan(Tango::DevString argin);
	virtual bool is_Scan_allowed(const CORBA::Any &any);
	/**
	 *	Command HandleBandFunctionalErrorEvent related method
	 *	Description: Handler cmd for functional band error
	 *
	 *	@param argin 
	 */
	virtual void handle_band_functional_error_event(Tango::DevString argin);
	virtual bool is_HandleBandFunctionalErrorEvent_allowed(const CORBA::Any &any);
	/**
	 *	Command HandleEStopEvent related method
	 *	Description: Handler command for emergency stop event
	 *
	 *	@param argin 
	 */
	virtual void handle_estop_event(Tango::DevString argin);
	virtual bool is_HandleEStopEvent_allowed(const CORBA::Any &any);
	/**
	 *	Command HandlePowerCutEvent related method
	 *	Description: Handler cmd for power cut event
	 *
	 *	@param argin Task encoded string including event data
	 */
	virtual void handle_power_cut_event(Tango::DevString argin);
	virtual bool is_HandlePowerCutEvent_allowed(const CORBA::Any &any);
	/**
	 *	Command HandlePowerRestoreEvent related method
	 *	Description: Handler cmd for power restoring event
	 *
	 *	@param argin 
	 */
	virtual void handle_power_restore_event(Tango::DevString argin);
	virtual bool is_HandlePowerRestoreEvent_allowed(const CORBA::Any &any);
	/**
	 *	Command HandleTMCommLossEvent related method
	 *	Description: Handler cmd for TM communication loss event.
	 *               Performs the following actions:
	 *               
	 *               - Flush the command queue
	 *               - Reset task progress attributes for mode transitions
	 *               - Command DS to go to STOW
	 *
	 */
	virtual void handle_tmcomm_loss_event();
	virtual bool is_HandleTMCommLossEvent_allowed(const CORBA::Any &any);
	/**
	 *	Command HandleBandInFocusEvent related method
	 *	Description: Handle indexer position change event from DS.
	 *               Set band in focus attr in SPF when notified by DS that
	 *               a new band is in focus.
	 *
	 *	@param argin 
	 */
	virtual void handle_band_in_focus_event(Tango::DevString argin);
	virtual bool is_HandleBandInFocusEvent_allowed(const CORBA::Any &any);
	/**
	 *	Command FlushCommandQueue related method
	 *	Description: Flush the command queue (all queued command will be 
	 *               removed).
	 *
	 */
	virtual void flush_command_queue();
	virtual bool is_FlushCommandQueue_allowed(const CORBA::Any &any);
	/**
	 *	Command SetRxStandbyLPMode related method
	 *	Description: Set SPFRx to its STANDBY-LP mode. 
	 *               Command mainly for testing purposes.
	 *               Allowed only in SPFRx modes {STANDBY-LP, STANDBY-FP, MAINTENANCE}
	 *
	 */
	virtual void set_rx_standby_lpmode();
	virtual bool is_SetRxStandbyLPMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetRxStandbyLPModeTask related method
	 *	Description: Set Rx to STANDBY-LP mode
	 *
	 *	@param argin Task encoded data
	 */
	virtual void set_rx_standby_lpmode_task(Tango::DevString argin);
	virtual bool is_SetRxStandbyLPModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetRxStandbyFPMode related method
	 *	Description: Set SPFRx STANDBY-FP mode.
	 *               Command mainly used for testing.
	 *               Allowed only in SPFRx modes: {STANDBY-LP,STANDBY-FP,MAINTENANCE,CONFIGURE,DATA-CAPTURE}
	 *
	 */
	virtual void set_rx_standby_fpmode();
	virtual bool is_SetRxStandbyFPMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetRxStandbyFPModeTask related method
	 *	Description: Command task to set SPFRx to STANDBY-FP mode
	 *
	 *	@param argin 
	 */
	virtual void set_rx_standby_fpmode_task(Tango::DevString argin);
	virtual bool is_SetRxStandbyFPModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetRxMaintenanceMode related method
	 *	Description: Set SPFRx to MAINTENANCE mode.
	 *               Command mainly used for testing. 
	 *               Allowed only in SPFRx modes: {STANDBY-LP, STANDBY-FP, MAINTENANCE, DATA-CAPTURE}
	 *
	 */
	virtual void set_rx_maintenance_mode();
	virtual bool is_SetRxMaintenanceMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetRxMaintenanceModeTask related method
	 *	Description: Command task to set SPFRx to MAINTENANCE mode
	 *
	 *	@param argin 
	 */
	virtual void set_rx_maintenance_mode_task(Tango::DevString argin);
	virtual bool is_SetRxMaintenanceModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureRxBand related method
	 *	Description: Configure band in Rx sub-element.
	 *               Command allowed only in spfrx modes: {STANDBY-FP, DATA-CAPTURE, MAINTENANCE}
	 *
	 *	@param argin Band id
	 */
	virtual void configure_rx_band(Tango::DevShort argin);
	virtual bool is_ConfigureRxBand_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureRxBandAsync related method
	 *	Description: Configure band in Rx sub-element.
	 *               NB: This is the long running command version originally 
	 *               intended to be used by Rx sub-element. In latest ICD 
	 *               the configuration task has been marked as non long-running,
	 *               so consider this as DEPRECATED.
	 *
	 *	@param argin Band id
	 *	@returns == Long field ==
	 *           [0]: ack code (0=OK, 1=QUEUED, 2=FAILED)
	 *           
	 *           == String field ==
	 *           [0]: Informative message or error/fault description
	 */
	virtual Tango::DevVarLongStringArray *configure_rx_band_async(Tango::DevShort argin);
	virtual bool is_ConfigureRxBandAsync_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureRxBandTask related method
	 *	Description: Configure band in Rx
	 *
	 *	@param argin Task encoded data
	 */
	virtual void configure_rx_band_task(Tango::DevString argin);
	virtual bool is_ConfigureRxBandTask_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureAndSynchroniseRxBand related method
	 *	Description: Configure and synchronize SPFRx band. 
	 *               This performs configuration and at completion run synchronize
	 *               on SPFRx.
	 *
	 *	@param argin Band id {1=B1,2=B2,3=B3,4=B4,5=B5a,6=B5b}
	 */
	virtual void configure_and_synchronise_rx_band(Tango::DevShort argin);
	virtual bool is_ConfigureAndSynchroniseRxBand_allowed(const CORBA::Any &any);
	/**
	 *	Command ConfigureRxAttenuation related method
	 *	Description: Set the global attenuation. Changing this value will set 
	 *               the attenuation across the system and will be applied to 
	 *               all bands.
	 *
	 *	@param argin Attenuation par in DB
	 */
	virtual void configure_rx_attenuation(Tango::DevFloat argin);
	virtual bool is_ConfigureRxAttenuation_allowed(const CORBA::Any &any);
	/**
	 *	Command Capture related method
	 *	Description: Start/Stop capture on the configured band. 
	 *               Command only valide in SPFRx DATA-CAPTURE mode
	 *               
	 *               Command allowed only in Dish modes:
	 *               {OPERATE}
	 *
	 *	@param argin ON/OFF
	 */
	virtual void capture(Tango::DevBoolean argin);
	virtual bool is_Capture_allowed(const CORBA::Any &any);
	/**
	 *	Command StartCapture related method
	 *	Description: Start capture on the configured band. 
	 *               Command only valid in SPFRx Data_Capture mode.
	 *               
	 *               Allowed only in OPERATE dish mode
	 *
	 */
	virtual void start_capture();
	virtual bool is_StartCapture_allowed(const CORBA::Any &any);
	/**
	 *	Command StopCapture related method
	 *	Description: Stop capture on the configured band
	 *
	 */
	virtual void stop_capture();
	virtual bool is_StopCapture_allowed(const CORBA::Any &any);
	/**
	 *	Command StartRxCaptureTask related method
	 *	Description: Start capture on Rx sub-element
	 *
	 *	@param argin 
	 */
	virtual void start_rx_capture_task(Tango::DevString argin);
	virtual bool is_StartRxCaptureTask_allowed(const CORBA::Any &any);
	/**
	 *	Command Synchronise related method
	 *	Description: Reset configured band sample counters. 
	 *               Command only valid in SPFRx Data_Capture mode.
	 *               
	 *               Command allowed only in DIsh modes:
	 *               {OPERATE}
	 *
	 */
	virtual void synchronise();
	virtual bool is_Synchronise_allowed(const CORBA::Any &any);
	/**
	 *	Command SynchroniseRxBandTask related method
	 *	Description: Synchronise Rx band
	 *
	 *	@param argin Task encoded data
	 */
	virtual void synchronise_rx_band_task(Tango::DevString argin);
	virtual bool is_SynchroniseRxBandTask_allowed(const CORBA::Any &any);
	/**
	 *	Command EnableRxEngineeringMode related method
	 *	Description: Enable/disable the SPFRx engineering mode.
	 *               NB: When enabled will allow to modify/fine-tune some receiver
	 *               parameters (e.g. attenuation, etc). Not to be confused with
	 *               receiver MAINTENANCE mode which is intended only
	 *               for software/firmware update.
	 *
	 *	@param argin enable/disable
	 */
	virtual void enable_rx_engineering_mode(Tango::DevBoolean argin);
	virtual bool is_EnableRxEngineeringMode_allowed(const CORBA::Any &any);
	/**
	 *	Command ShutdownRXPU related method
	 *	Description: Shutdown Rx controller
	 *
	 */
	virtual void shutdown_rxpu();
	virtual bool is_ShutdownRXPU_allowed(const CORBA::Any &any);
	/**
	 *	Command ShutdownRXPUTask related method
	 *	Description: Shutdown SPFRx controller
	 *
	 *	@param argin Task data
	 */
	virtual void shutdown_rxputask(Tango::DevString argin);
	virtual bool is_ShutdownRXPUTask_allowed(const CORBA::Any &any);
	/**
	 *	Command PowerOffRXPU related method
	 *	Description: Power off the RXPU from the PDU interface
	 *
	 */
	virtual void power_off_rxpu();
	virtual bool is_PowerOffRXPU_allowed(const CORBA::Any &any);
	/**
	 *	Command PowerOnRXPU related method
	 *	Description: Power on RXPU from the PDU interface
	 *
	 */
	virtual void power_on_rxpu();
	virtual bool is_PowerOnRXPU_allowed(const CORBA::Any &any);
	/**
	 *	Command PowerOffRXPUTask related method
	 *	Description: Power off the Rx controller from the PDU interface.
	 *               Typically invoked by the Dish power cut handler cmd.
	 *
	 *	@param argin Task encoded data
	 */
	virtual void power_off_rxputask(Tango::DevString argin);
	virtual bool is_PowerOffRXPUTask_allowed(const CORBA::Any &any);
	/**
	 *	Command PowerOnRXPUTask related method
	 *	Description: Power on the Rx controller. 
	 *               Typically inkoved by the power restore handler cmd.
	 *
	 *	@param argin Task encoded data
	 */
	virtual void power_on_rxputask(Tango::DevString argin);
	virtual bool is_PowerOnRXPUTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFStandbyLPMode related method
	 *	Description: Set the SPF sub-element in its STANDBY-LP mode.
	 *               Allowed only in SPF modes {STANDBY-LP, OPERATE, MAINTENANCE}
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_spfstandby_lpmode();
	virtual bool is_SetSPFStandbyLPMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFStandbyLPModeTask related method
	 *	Description: Set SPF in standby LP mode.
	 *               Allowed only in SPF modes {STANDBY-LP, OPERATE, MAINTENANCE}
	 *
	 *	@param argin Task encoded data
	 */
	virtual void set_spfstandby_lpmode_task(Tango::DevString argin);
	virtual bool is_SetSPFStandbyLPModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFOperateMode related method
	 *	Description: Set SPF sub-element in its OPERATE mode.
	 *
	 *	@returns == Long field ==
	 *           [0]: ack code (0=OK, 1=QUEUED, 2=FAILED)
	 *           
	 *           == String field ==
	 *           [0]: Informative message or error/fault description
	 */
	virtual Tango::DevVarLongStringArray *set_spfoperate_mode();
	virtual bool is_SetSPFOperateMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFOperateModeTask related method
	 *	Description: Set SPF to OPERATE mode. 
	 *               This command is mainly for testing SPF Interface.
	 *
	 *	@param argin Task encoded data
	 */
	virtual void set_spfoperate_mode_task(Tango::DevString argin);
	virtual bool is_SetSPFOperateModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFOperational related method
	 *	Description: Set the SPF operational. 
	 *               
	 *               1) Set SPF mode to OPERATE
	 *               2) Power on LNAs when 1) completes
	 *               3) TBD
	 *
	 *	@param argin Band id
	 *               
	 *               - bandId=-1 all bands
	 *               - bandId=0 active band
	 *               - band=[1-5] selected band
	 *	@returns == Long field ==
	 *           [0]: ack code (0=OK, 1=QUEUED, 2=FAILED)
	 *           
	 *           == String field ==
	 *           [0]: Informative message or error/fault description
	 */
	virtual Tango::DevVarLongStringArray *set_spfoperational(Tango::DevShort argin);
	virtual bool is_SetSPFOperational_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFMaintenanceMode related method
	 *	Description: Set the SPF sub-element in its MAINTENANCE mode
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_spfmaintenance_mode();
	virtual bool is_SetSPFMaintenanceMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFMaintenanceModeTask related method
	 *	Description: Set SPF to MAINTENANCE mode task
	 *
	 *	@param argin Task encoded data
	 */
	virtual void set_spfmaintenance_mode_task(Tango::DevString argin);
	virtual bool is_SetSPFMaintenanceModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFFeedMode related method
	 *	Description: Set SPF feed package mode
	 *               Allowed bands are {1-5}. 
	 *               Allowed modes are {0=STANDBY-LP, 1=OPERATE, 2=MAINTENANCE}
	 *
	 *	@param argin [0]: bandId [1-5]
	 *               [1]: mode
	 *               
	 *               Allowed modes are:
	 *               
	 *               0= STANDBY-LP
	 *               1= OPERATE
	 *               2= MAINTENANCE
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_spffeed_mode(const Tango::DevVarShortArray *argin);
	virtual bool is_SetSPFFeedMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SendSPFFeedCommand related method
	 *	Description: Send a once-off command directly to the feed. 
	 *               Each feed can have different commands defined, and 
	 *               currently they are all defined in the same manner.
	 *               
	 *               Command is valid in spf mode {STANDBY-LP, OPERATE, MAINTENANCE}
	 *               
	 *               
	 *               Valid values for mcBand argument are: {1-5}.
	 *               Valid values for feedComamnd argument are: {0,1}, 
	 *               where each enum code corresponds to:
	 *               
	 *               0 = REGENERATE
	 *               1 = CLEAR-ERRORS
	 *               
	 *               Other additional commands defined in the future 
	 *               will follow from the above list into separate lists for 
	 *               each feed.
	 *
	 *	@param argin [0]: mcBand
	 *               [1]: feedCommand {0=REGENERATE,1=CLEAR-ERRORS}
	 */
	virtual void send_spffeed_command(const Tango::DevVarShortArray *argin);
	virtual bool is_SendSPFFeedCommand_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFLnaPowerOff related method
	 *	Description: Switch SPF LNA power off for selected bands, active band or
	 *               all bands depending on the input argument.
	 *
	 *	@param argin bandId: [1-5]
	 *               
	 *               If bandId=-1 turns on all bands
	 *               If bandId=0 turns on only active band. 
	 *               If no band is active (was not configured) an exception 
	 *               is thrown.
	 */
	virtual void set_spflna_power_off(Tango::DevShort argin);
	virtual bool is_SetSPFLnaPowerOff_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFLnaPowerOn related method
	 *	Description: Switch the SPF LNA power on for selected band or for all
	 *               bands or for active band depending on attributes.
	 *
	 *	@param argin bandId: [1-5]
	 *               
	 *               If bandId=-1 turns on all bands
	 *               If bandId=0 turns on only active band. 
	 *               If no band is active (was not configured) an exception 
	 *               is thrown.
	 */
	virtual void set_spflna_power_on(Tango::DevShort argin);
	virtual bool is_SetSPFLnaPowerOn_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFLnaPowerOnTask related method
	 *	Description: 
	 *
	 *	@param argin Task encoded data
	 */
	virtual void set_spflna_power_on_task(Tango::DevString argin);
	virtual bool is_SetSPFLnaPowerOnTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFBandInFocus related method
	 *	Description: Set the requested band in SPF. This can be done also via
	 *               the corresponding forwarded writable attribute. This command
	 *               is provided to support automated execution in task schedule.
	 *
	 *	@param argin Band id
	 */
	virtual void set_spfband_in_focus(Tango::DevShort argin);
	virtual bool is_SetSPFBandInFocus_allowed(const CORBA::Any &any);
	/**
	 *	Command SetSPFBandInFocusTask related method
	 *	Description: Task to set the requested band in SPF. Used by the configure
	 *               schedule command.
	 *
	 *	@param argin Encoded task data
	 */
	virtual void set_spfband_in_focus_task(Tango::DevString argin);
	virtual bool is_SetSPFBandInFocusTask_allowed(const CORBA::Any &any);
	/**
	 *	Command ShutdownSPFC related method
	 *	Description: Shutdown the SPF controller
	 *
	 */
	virtual void shutdown_spfc();
	virtual bool is_ShutdownSPFC_allowed(const CORBA::Any &any);
	/**
	 *	Command ShutdownSPFCTask related method
	 *	Description: Task command to shutdown the SPF controller
	 *
	 *	@param argin Task data
	 */
	virtual void shutdown_spfctask(Tango::DevString argin);
	virtual bool is_ShutdownSPFCTask_allowed(const CORBA::Any &any);
	/**
	 *	Command PowerOffSPFC related method
	 *	Description: Power off SPFC from the PDU interface
	 *
	 */
	virtual void power_off_spfc();
	virtual bool is_PowerOffSPFC_allowed(const CORBA::Any &any);
	/**
	 *	Command PowerOnSPFC related method
	 *	Description: Power on SPFC from the PDU interface
	 *
	 */
	virtual void power_on_spfc();
	virtual bool is_PowerOnSPFC_allowed(const CORBA::Any &any);
	/**
	 *	Command PowerOffSPFCTask related method
	 *	Description: Task to power off the SPF controller from the PDU.
	 *               Typically invoked by the dish power off handler cmd.
	 *
	 *	@param argin Encoded task data
	 */
	virtual void power_off_spfctask(Tango::DevString argin);
	virtual bool is_PowerOffSPFCTask_allowed(const CORBA::Any &any);
	/**
	 *	Command PowerOnSPFCTask related method
	 *	Description: Power on the SPF controller. 
	 *               Typically invoked by the power restore handler cmd.
	 *
	 *	@param argin Task encoded data
	 */
	virtual void power_on_spfctask(Tango::DevString argin);
	virtual bool is_PowerOnSPFCTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetDSStandbyLPMode related method
	 *	Description: Set DS in STANDBY-LP mode
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_dsstandby_lpmode();
	virtual bool is_SetDSStandbyLPMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetDSStandbyLPModeTask related method
	 *	Description: Command task to set DS to STANDBY-LP mode
	 *
	 *	@param argin 
	 */
	virtual void set_dsstandby_lpmode_task(Tango::DevString argin);
	virtual bool is_SetDSStandbyLPModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetDSStandbyFPMode related method
	 *	Description: Set DS in STANDBY-FP mode
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_dsstandby_fpmode();
	virtual bool is_SetDSStandbyFPMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetDSStandbyFPModeTask related method
	 *	Description: Command task to set DS to STANDBY-FP mode
	 *
	 *	@param argin 
	 */
	virtual void set_dsstandby_fpmode_task(Tango::DevString argin);
	virtual bool is_SetDSStandbyFPModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetDSPointMode related method
	 *	Description: Set DS point mode
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_dspoint_mode();
	virtual bool is_SetDSPointMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetDSPointModeTask related method
	 *	Description: 
	 *
	 *	@param argin Task encoded data
	 */
	virtual void set_dspoint_mode_task(Tango::DevString argin);
	virtual bool is_SetDSPointModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetDSStowMode related method
	 *	Description: Set DS stow mode
	 *
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *set_dsstow_mode();
	virtual bool is_SetDSStowMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetDSStowModeTask related method
	 *	Description: Set DS stow mode task
	 *
	 *	@param argin 
	 */
	virtual void set_dsstow_mode_task(Tango::DevString argin);
	virtual bool is_SetDSStowModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command SetDSMaintenanceMode related method
	 *	Description: Set DS to MAINTENANCE mode
	 *
	 */
	virtual void set_dsmaintenance_mode();
	virtual bool is_SetDSMaintenanceMode_allowed(const CORBA::Any &any);
	/**
	 *	Command SetDSMaintenanceModeTask related method
	 *	Description: Command task to set DS to MAINTENANCE mode
	 *
	 *	@param argin 
	 */
	virtual void set_dsmaintenance_mode_task(Tango::DevString argin);
	virtual bool is_SetDSMaintenanceModeTask_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetDishMode related method
	 *	Description: Reset dish mode, e.g. when in FORBIDDEN state. 
	 *               This command will clear all mode progress attributes, 
	 *               flush all queued commands and
	 *               set STANDBY-LP mode.
	 *
	 */
	virtual void reset_dish_mode();
	virtual bool is_ResetDishMode_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetDishTasks related method
	 *	Description: Flush all commands in queue and 
	 *               reset all progress attributes.
	 *
	 */
	virtual void reset_dish_tasks();
	virtual bool is_ResetDishTasks_allowed(const CORBA::Any &any);
	/**
	 *	Command SetTMProxyAddress related method
	 *	Description: This command reset the TM proexy device to be monitored.
	 *
	 *	@param argin Name of TM proxy device to be monitored
	 */
	virtual void set_tmproxy_address(Tango::DevString argin);
	virtual bool is_SetTMProxyAddress_allowed(const CORBA::Any &any);
	/**
	 *	Command RestartSPFComponents related method
	 *	Description: Performs a complete restart of SPF software 
	 *               components excluding the SPFController Tango 
	 *               device.
	 *
	 */
	virtual void restart_spfcomponents();
	virtual bool is_RestartSPFComponents_allowed(const CORBA::Any &any);
	/**
	 *	Command SetStandbyFPModeOnBandError related method
	 *	Description: Set STANDBY-FP mode if:
	 *               
	 *               - dishMode=OPERATE
	 *               - configuredBand!=NONE
	 *               - bXCapability=UNAVAILABLE (X=configured band)
	 *
	 */
	virtual void set_standby_fpmode_on_band_error();
	virtual bool is_SetStandbyFPModeOnBandError_allowed(const CORBA::Any &any);

//	Dynamic commands methods
public:
	/**
	 *	Command dummyDynCmd related method
	 *	Description: 
	 *
	 */
	virtual void dummy_dyn_cmd(Tango::Command &command);
	virtual bool is_dummyDynCmd_allowed(const CORBA::Any &any);
	void add_dummyDynCmd_dynamic_command(string cmdname, bool device);
	void remove_dummyDynCmd_dynamic_command(string cmdname);

	//--------------------------------------------------------
	/**
	 *	Method      : DishManager::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(DishManager::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	protected:

		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::InitCmdAttrStateMachine()
	 	*	Description : Initialize cmd & attr state machine
	 	*/
		//--------------------------------------------------------
		virtual int InitCmdAttrStateMachine();


		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::RegisterProxies()
	 	*	Description : Register device proxies to be used (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterProxies();

		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::RegisterEventSubscriptions()
	 	*	Description : Register event subscriptions for device proxies (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterEventSubscriptions();

		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::RegisterEventHandlers()
	 	*	Description : Register handler commands to be inkoved on event receiption (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterEventHandlers();


		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::ConfigureBand()
	 	*	Description : Configure band 
	 	*/
		//--------------------------------------------------------
		int ConfigureBand(Tango::DevShort bandId,std::string activation_timestamp="");

		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::IsBandCapabilityAvailable()
	 	*	Description : Check if band capability is available
	 	*/
		//--------------------------------------------------------
		int IsBandCapabilityAvailable(bool& isAvailable,Tango::DevShort bandId);

		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::InitConfigurationTask()
	 	*	Description : Initialize configure task
	 	*/
		//--------------------------------------------------------
		int InitConfigurationTask();

		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::ClearConfigurationTask()
	 	*	Description : Clearup configure task
	 	*/
		//--------------------------------------------------------
		int ClearConfigurationTask();


		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::WriteSEAttrs()
	 	*	Description : Write sub-element attrs
	 	*/
		//--------------------------------------------------------
		template<typename T> 
		void WriteSEAttrs(std::string proxy_name,std::vector<std::string> attr_names,T& attr_value);
	
		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::SelectBandAttrsInCmd()
	 	*	Description : Get selected band attrs to be used for command
	 	*/
		//--------------------------------------------------------
		void SelectBandAttrsInCmd(std::vector<std::string>& attr_names_selected,int bandId, std::vector<std::string> attr_names,std::vector<int> unsupported_bands);


		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::ExecCmdOnProxy()
	 	*	Description : Execute command without argout response on given proxy device 
	 	*/
		//--------------------------------------------------------
		void ExecCmdOnProxy(std::string proxy_name,std::string cmd_name,bool execOnAdminDevice=false);
		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::ExecCmdOnProxy()
	 	*	Description : Execute command without argout response on given proxy device 
	 	*/
		//--------------------------------------------------------
		void ExecCmdOnProxy(std::string proxy_name,std::string cmd_name,Tango::DeviceData& din,bool execOnAdminDevice=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::ExecCmdOnProxy()
	 	*	Description : Execute command with argout response and argin on given proxy device 
	 	*/
		//--------------------------------------------------------
		void ExecCmdOnProxy(Tango::DeviceData& dout,std::string proxy_name,std::string cmd_name,Tango::DeviceData& din,bool execOnAdminDevice=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::ExecCmdOnProxy()
	 	*	Description : Execute command with argout response on given proxy device 
	 	*/
		//--------------------------------------------------------
		void ExecCmdOnProxy(Tango::DeviceData& dout,std::string proxy_name,std::string cmd_name,bool execOnAdminDevice=false);

		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::HandleProxyStatusInfo()
	 	*	Description : Process proxy run status info 
	 	*/
		//--------------------------------------------------------
		virtual int HandleProxyRunStatusInfo(std::string proxy_name,int proxy_run_status);


		//--------------------------------------------------------
		/**
	 	*	Method      : DishManager::HandleTMProxyRunStatusInfo()
	 	*	Description : Handle TM proxy run status info
	 	*/
		//--------------------------------------------------------
		virtual int HandleTMProxyRunStatusInfo(std::string proxy_name,int proxy_run_status);

		

	friend class DishManagerClass;
	friend class ConfigureTask;

/*----- PROTECTED REGION END -----*/	//	DishManager::Additional Method prototypes
};

/*----- PROTECTED REGION ID(DishManager::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions
#include "DishManager.tpp"
/*----- PROTECTED REGION END -----*/	//	DishManager::Additional Classes Definitions

}	//	End of namespace

#endif   //	DishManager_H
