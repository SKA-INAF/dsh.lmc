/*----- PROTECTED REGION ID(DishManagerClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        DishManagerClass.cpp
//
// description : C++ source for the DishManagerClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the DishManager once per process.
//
// project :     DishManager
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <DishManagerClass.h>

/*----- PROTECTED REGION END -----*/	//	DishManagerClass.cpp

//-------------------------------------------------------------------
/**
 *	Create DishManagerClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_DishManager_class(const char *name) {
		return DishManager_ns::DishManagerClass::init(name);
	}
}

namespace DishManager_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
DishManagerClass *DishManagerClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		DishManagerClass::DishManagerClass(string &s)
 * description : 	constructor for the DishManagerClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
DishManagerClass::DishManagerClass(string &s):LMCDevice_ns::LMCDeviceClass(s)
{
	cout2 << "Entering DishManagerClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(DishManagerClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::constructor

	cout2 << "Leaving DishManagerClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		DishManagerClass::~DishManagerClass()
 * description : 	destructor for the DishManagerClass
 */
//--------------------------------------------------------
DishManagerClass::~DishManagerClass()
{
	/*----- PROTECTED REGION ID(DishManagerClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		DishManagerClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
DishManagerClass *DishManagerClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new DishManagerClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		DishManagerClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
DishManagerClass *DishManagerClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		SetStandbyLPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetStandbyLPModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetStandbyLPModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_standby_lpmode());
}

//--------------------------------------------------------
/**
 * method : 		SetStandbyFPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetStandbyFPModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetStandbyFPModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_standby_fpmode());
}

//--------------------------------------------------------
/**
 * method : 		SetOperateModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetOperateModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetOperateModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_operate_mode());
}

//--------------------------------------------------------
/**
 * method : 		SetMaintenanceModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetMaintenanceModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetMaintenanceModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_maintenance_mode());
}

//--------------------------------------------------------
/**
 * method : 		SetStowModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetStowModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetStowModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_stow_mode());
}

//--------------------------------------------------------
/**
 * method : 		ConfigureBand1Class::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureBand1Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureBand1Class::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->configure_band1(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ConfigureBand2Class::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureBand2Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureBand2Class::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->configure_band2(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ConfigureBand3Class::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureBand3Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureBand3Class::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->configure_band3(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ConfigureBand4Class::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureBand4Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureBand4Class::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->configure_band4(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ConfigureBand5aClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureBand5aClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureBand5aClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->configure_band5a(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ConfigureBand5bClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureBand5bClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureBand5bClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->configure_band5b(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetIndexerPositionClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetIndexerPositionClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetIndexerPositionClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_indexer_position(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetIndexerPositionTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetIndexerPositionTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetIndexerPositionTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_indexer_position_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		TrackClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *TrackClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "TrackClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->track(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SlewClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SlewClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SlewClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->slew(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ScanClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ScanClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ScanClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->scan(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		HandleBandFunctionalErrorEventClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *HandleBandFunctionalErrorEventClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "HandleBandFunctionalErrorEventClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->handle_band_functional_error_event(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		HandleEStopEventClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *HandleEStopEventClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "HandleEStopEventClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->handle_estop_event(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		HandlePowerCutEventClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *HandlePowerCutEventClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "HandlePowerCutEventClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->handle_power_cut_event(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		HandlePowerRestoreEventClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *HandlePowerRestoreEventClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "HandlePowerRestoreEventClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->handle_power_restore_event(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		HandleTMCommLossEventClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *HandleTMCommLossEventClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "HandleTMCommLossEventClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->handle_tmcomm_loss_event());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		HandleBandInFocusEventClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *HandleBandInFocusEventClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "HandleBandInFocusEventClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->handle_band_in_focus_event(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		FlushCommandQueueClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *FlushCommandQueueClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "FlushCommandQueueClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->flush_command_queue());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRxStandbyLPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRxStandbyLPModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetRxStandbyLPModeClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->set_rx_standby_lpmode());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRxStandbyLPModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRxStandbyLPModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetRxStandbyLPModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_rx_standby_lpmode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRxStandbyFPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRxStandbyFPModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetRxStandbyFPModeClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->set_rx_standby_fpmode());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRxStandbyFPModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRxStandbyFPModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetRxStandbyFPModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_rx_standby_fpmode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRxMaintenanceModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRxMaintenanceModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetRxMaintenanceModeClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->set_rx_maintenance_mode());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetRxMaintenanceModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetRxMaintenanceModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetRxMaintenanceModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_rx_maintenance_mode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ConfigureRxBandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureRxBandClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureRxBandClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->configure_rx_band(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ConfigureRxBandAsyncClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureRxBandAsyncClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureRxBandAsyncClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<DishManager *>(device))->configure_rx_band_async(argin));
}

//--------------------------------------------------------
/**
 * method : 		ConfigureRxBandTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureRxBandTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureRxBandTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->configure_rx_band_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ConfigureAndSynchroniseRxBandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureAndSynchroniseRxBandClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureAndSynchroniseRxBandClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->configure_and_synchronise_rx_band(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ConfigureRxAttenuationClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ConfigureRxAttenuationClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ConfigureRxAttenuationClass::execute(): arrived" << endl;
	Tango::DevFloat argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->configure_rx_attenuation(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		CaptureClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CaptureClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "CaptureClass::execute(): arrived" << endl;
	Tango::DevBoolean argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->capture(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StartCaptureClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StartCaptureClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StartCaptureClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->start_capture());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StopCaptureClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopCaptureClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StopCaptureClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->stop_capture());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StartRxCaptureTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StartRxCaptureTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "StartRxCaptureTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->start_rx_capture_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SynchroniseClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SynchroniseClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SynchroniseClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->synchronise());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SynchroniseRxBandTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SynchroniseRxBandTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SynchroniseRxBandTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->synchronise_rx_band_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		EnableRxEngineeringModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *EnableRxEngineeringModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "EnableRxEngineeringModeClass::execute(): arrived" << endl;
	Tango::DevBoolean argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->enable_rx_engineering_mode(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ShutdownRXPUClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ShutdownRXPUClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ShutdownRXPUClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->shutdown_rxpu());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ShutdownRXPUTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ShutdownRXPUTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ShutdownRXPUTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->shutdown_rxputask(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PowerOffRXPUClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PowerOffRXPUClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "PowerOffRXPUClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->power_off_rxpu());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PowerOnRXPUClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PowerOnRXPUClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "PowerOnRXPUClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->power_on_rxpu());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PowerOffRXPUTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PowerOffRXPUTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "PowerOffRXPUTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->power_off_rxputask(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PowerOnRXPUTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PowerOnRXPUTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "PowerOnRXPUTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->power_on_rxputask(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFStandbyLPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFStandbyLPModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetSPFStandbyLPModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_spfstandby_lpmode());
}

//--------------------------------------------------------
/**
 * method : 		SetSPFStandbyLPModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFStandbyLPModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFStandbyLPModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_spfstandby_lpmode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFOperateModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFOperateModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetSPFOperateModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_spfoperate_mode());
}

//--------------------------------------------------------
/**
 * method : 		SetSPFOperateModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFOperateModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFOperateModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_spfoperate_mode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFOperationalClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFOperationalClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFOperationalClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<DishManager *>(device))->set_spfoperational(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetSPFMaintenanceModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFMaintenanceModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetSPFMaintenanceModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_spfmaintenance_mode());
}

//--------------------------------------------------------
/**
 * method : 		SetSPFMaintenanceModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFMaintenanceModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFMaintenanceModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_spfmaintenance_mode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFFeedModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFFeedModeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFFeedModeClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	return insert((static_cast<DishManager *>(device))->set_spffeed_mode(argin));
}

//--------------------------------------------------------
/**
 * method : 		SendSPFFeedCommandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SendSPFFeedCommandClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SendSPFFeedCommandClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->send_spffeed_command(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFLnaPowerOffClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFLnaPowerOffClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFLnaPowerOffClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_spflna_power_off(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFLnaPowerOnClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFLnaPowerOnClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFLnaPowerOnClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_spflna_power_on(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFLnaPowerOnTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFLnaPowerOnTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFLnaPowerOnTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_spflna_power_on_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFBandInFocusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFBandInFocusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFBandInFocusClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_spfband_in_focus(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSPFBandInFocusTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSPFBandInFocusTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSPFBandInFocusTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_spfband_in_focus_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ShutdownSPFCClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ShutdownSPFCClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ShutdownSPFCClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->shutdown_spfc());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ShutdownSPFCTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ShutdownSPFCTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ShutdownSPFCTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->shutdown_spfctask(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PowerOffSPFCClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PowerOffSPFCClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "PowerOffSPFCClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->power_off_spfc());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PowerOnSPFCClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PowerOnSPFCClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "PowerOnSPFCClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->power_on_spfc());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PowerOffSPFCTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PowerOffSPFCTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "PowerOffSPFCTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->power_off_spfctask(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PowerOnSPFCTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PowerOnSPFCTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "PowerOnSPFCTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->power_on_spfctask(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetDSStandbyLPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDSStandbyLPModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetDSStandbyLPModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_dsstandby_lpmode());
}

//--------------------------------------------------------
/**
 * method : 		SetDSStandbyLPModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDSStandbyLPModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetDSStandbyLPModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_dsstandby_lpmode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetDSStandbyFPModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDSStandbyFPModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetDSStandbyFPModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_dsstandby_fpmode());
}

//--------------------------------------------------------
/**
 * method : 		SetDSStandbyFPModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDSStandbyFPModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetDSStandbyFPModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_dsstandby_fpmode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetDSPointModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDSPointModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetDSPointModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_dspoint_mode());
}

//--------------------------------------------------------
/**
 * method : 		SetDSPointModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDSPointModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetDSPointModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_dspoint_mode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetDSStowModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDSStowModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetDSStowModeClass::execute(): arrived" << endl;
	return insert((static_cast<DishManager *>(device))->set_dsstow_mode());
}

//--------------------------------------------------------
/**
 * method : 		SetDSStowModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDSStowModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetDSStowModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_dsstow_mode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetDSMaintenanceModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDSMaintenanceModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetDSMaintenanceModeClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->set_dsmaintenance_mode());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetDSMaintenanceModeTaskClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetDSMaintenanceModeTaskClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetDSMaintenanceModeTaskClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_dsmaintenance_mode_task(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetDishModeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetDishModeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetDishModeClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->reset_dish_mode());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetDishTasksClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetDishTasksClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetDishTasksClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->reset_dish_tasks());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetTMProxyAddressClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetTMProxyAddressClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetTMProxyAddressClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<DishManager *>(device))->set_tmproxy_address(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		RestartSPFComponentsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *RestartSPFComponentsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "RestartSPFComponentsClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->restart_spfcomponents());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetStandbyFPModeOnBandErrorClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetStandbyFPModeOnBandErrorClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetStandbyFPModeOnBandErrorClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->set_standby_fpmode_on_band_error());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		dummyDynCmdClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *dummyDynCmdClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "dummyDynCmdClass::execute(): arrived" << endl;
	((static_cast<DishManager *>(device))->dummy_dyn_cmd(*this));
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : DishManagerClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum DishManagerClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : DishManagerClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum DishManagerClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : DishManagerClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum DishManagerClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : DishManagerClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void DishManagerClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "ElementLoggerAddress";
	prop_desc = "Address of ElementLogger device server.\nCentralLogger will use this to find the ElementLogger to \nconnect to for configuring remote logging of devices \nin the Element facility";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ElementAlarmsAddress";
	prop_desc = "Address of ElementAlarms device server.\nCentralAlarms will use this to find the ElementAlarms to \nconnect to for subscribing to SKA Alarms on the Element.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ElementTelModelAddress";
	prop_desc = "Address of ElementTelModel device server.\nAny Element can use this to find the ElementTelModel \nwhich exposes the Telescope Model items in the Element \nso that it can subscribe to it for updates.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ElementDatabaseDSAddress";
	prop_desc = "Address of Element Database device server.\nCentral Archiver will find the ElementDatabaseDS to discover \nall the devices in the Element facility to subscribe for archive \nevents to populate the Central Archive";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AdminModeDefault";
	prop_desc = "Default value assumed for adminMode if a memorized value\nis not present in DB (e.g. at first initialization)";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AsynchCmdReplyTimeout";
	prop_desc = "Timeout (in ms) used to get asynchronous command reply";
	prop_def  = "100";
	vect_data.clear();
	vect_data.push_back("100");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AsynchCmdReplyNRetries";
	prop_desc = "Number of attempts performed to retrieve asynchronous command\nreply. Each attempt uses the AsynchCmdReplyTimeout property\nas timeout.";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ConfigureMonitoringPollPeriod";
	prop_desc = "Polling period (in ms) used when monitoring band configuration\nprogress";
	prop_def  = "5000";
	vect_data.clear();
	vect_data.push_back("5000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ConfigureMonitoringTimeout";
	prop_desc = "Timeout (in ms) used when monitoring the band configuration\ntask. When the timeout is exceeded it is assumed that the \nconfiguration is faulty or anomalous and an alarm attribute should\nbe set.";
	prop_def  = "30000";
	vect_data.clear();
	vect_data.push_back("30000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SynchCmdReplyTimeout";
	prop_desc = "Timeout (in ms) to be used for synchronous commands\nDefault is 3000 ms in Tango.";
	prop_def  = "5000";
	vect_data.clear();
	vect_data.push_back("5000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StowTaskTimeout";
	prop_desc = "Timeout (in seconds) to be used for stow task";
	prop_def  = "30";
	vect_data.clear();
	vect_data.push_back("30");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ConfigureTaskTimeout";
	prop_desc = "Timeout (in seconds) to be used for Configure task";
	prop_def  = "30";
	vect_data.clear();
	vect_data.push_back("30");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "OperateTaskTimeout";
	prop_desc = "Timeout (in seconds) of operate task";
	prop_def  = "30";
	vect_data.clear();
	vect_data.push_back("30");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ShutdownTaskTimeout";
	prop_desc = "Timeout (in seconds) used for dish shutdown task";
	prop_def  = "30";
	vect_data.clear();
	vect_data.push_back("30");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RxShutdownTimeDelay";
	prop_desc = "Time delay (in seconds) before placing Rx in safe mode (STANDBY-LP)\nwhen a power cut event is received.";
	prop_def  = "30";
	vect_data.clear();
	vect_data.push_back("30");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StandbyFPTaskTimeout";
	prop_desc = "Timeout (in seconds) to be used in SetStandbyFPMode task";
	prop_def  = "30";
	vect_data.clear();
	vect_data.push_back("30");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SPFStartupTimeout";
	prop_desc = "SPF startup timeout (in seconds) after which a startup alarm\nis raised by the device.";
	prop_def  = "30";
	vect_data.clear();
	vect_data.push_back("30");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RxControllerAddress";
	prop_desc = "FQDN of Rx controller Tango device";
	prop_def  = "rx_controller";
	vect_data.clear();
	vect_data.push_back("rx_controller");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SpfControllerAddress";
	prop_desc = "";
	prop_def  = "spf_controller";
	vect_data.clear();
	vect_data.push_back("spf_controller");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "DsManagerAddress";
	prop_desc = "";
	prop_def  = "ds_manager";
	vect_data.clear();
	vect_data.push_back("ds_manager");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ControlModeDefault";
	prop_desc = "Default control mode applied when no memorized value is present.\nDefault is REMOTE control.";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RequestedBandDefault";
	prop_desc = "Requested band default applied when no memorized value is present.\nDefault is NONE";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "TmProxyAddressDefault";
	prop_desc = "Default TM Tango device managing this Dish Element";
	prop_def  = "ska_mid/tm_leaf_node/d0001";
	vect_data.clear();
	vect_data.push_back("ska_mid/tm_leaf_node/d0001");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "PduManagerAddress";
	prop_desc = "Proxy address of PDU manager device";
	prop_def  = "pdu_manager";
	vect_data.clear();
	vect_data.push_back("pdu_manager");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : DishManagerClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void DishManagerClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("DishManager");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("DishManager");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : DishManagerClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void DishManagerClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(DishManagerClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	/*
	//## Remove attributes from dam and device (if enabled)
  	if(dev->EraseDynAttrManager()<0){
			__ERROR_LOG(dev,"Failed to cleanup dyn attr manager...");
			continue;
		}		
	*/

	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new DishManager(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		DishManager *dev = static_cast<DishManager *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();
		dev->add_dynamic_commands();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(DishManagerClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : DishManagerClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void DishManagerClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(DishManagerClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::attribute_factory_before
	//	Call atribute_factory for inherited class
	LMCDevice_ns::LMCDeviceClass::attribute_factory(att_list);

	//	Attribute : loggingLevelCentral - Check if not concrete in inherited class
	Tango::Attr *loggingLevelCentralAttr = get_attr_object_by_name(att_list, "loggingLevelCentral");
	if (loggingLevelCentralAttr == NULL)
	{
	}

	//	Attribute : loggingLevelElement - Check if not concrete in inherited class
	Tango::Attr *loggingLevelElementAttr = get_attr_object_by_name(att_list, "loggingLevelElement");
	if (loggingLevelElementAttr == NULL)
	{
	}

	//	Attribute : loggingLevelStorage - Check if not concrete in inherited class
	Tango::Attr *loggingLevelStorageAttr = get_attr_object_by_name(att_list, "loggingLevelStorage");
	if (loggingLevelStorageAttr == NULL)
	{
	}

	//	Attribute : loggingLevelConsole - Check if not concrete in inherited class
	Tango::Attr *loggingLevelConsoleAttr = get_attr_object_by_name(att_list, "loggingLevelConsole");
	if (loggingLevelConsoleAttr == NULL)
	{
	}

	//	Attribute : buildState - Check if not concrete in inherited class
	Tango::Attr *buildStateAttr = get_attr_object_by_name(att_list, "buildState");
	if (buildStateAttr == NULL)
	{
	}

	//	Attribute : centralLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *centralLoggerStatusAttr = get_attr_object_by_name(att_list, "centralLoggerStatus");
	if (centralLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : elementLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *elementLoggerStatusAttr = get_attr_object_by_name(att_list, "elementLoggerStatus");
	if (elementLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : storageLoggerStatus - Check if not concrete in inherited class
	Tango::Attr *storageLoggerStatusAttr = get_attr_object_by_name(att_list, "storageLoggerStatus");
	if (storageLoggerStatusAttr == NULL)
	{
	}

	//	Attribute : eventRate - Check if not concrete in inherited class
	Tango::Attr *eventRateAttr = get_attr_object_by_name(att_list, "eventRate");
	if (eventRateAttr == NULL)
	{
	}

	//	Attribute : exceptionRate - Check if not concrete in inherited class
	Tango::Attr *exceptionRateAttr = get_attr_object_by_name(att_list, "exceptionRate");
	if (exceptionRateAttr == NULL)
	{
	}

	//	Attribute : fwdAttrInitStatus - Check if not concrete in inherited class
	Tango::Attr *fwdAttrInitStatusAttr = get_attr_object_by_name(att_list, "fwdAttrInitStatus");
	if (fwdAttrInitStatusAttr == NULL)
	{
	}

	//	Attribute : centralLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *centralLoggerEnabledAttr = get_attr_object_by_name(att_list, "centralLoggerEnabled");
	if (centralLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : elementLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *elementLoggerEnabledAttr = get_attr_object_by_name(att_list, "elementLoggerEnabled");
	if (elementLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : storageLoggerEnabled - Check if not concrete in inherited class
	Tango::Attr *storageLoggerEnabledAttr = get_attr_object_by_name(att_list, "storageLoggerEnabled");
	if (storageLoggerEnabledAttr == NULL)
	{
	}

	//	Attribute : loggingTargetCentral - Check if not concrete in inherited class
	Tango::Attr *loggingTargetCentralAttr = get_attr_object_by_name(att_list, "loggingTargetCentral");
	if (loggingTargetCentralAttr == NULL)
	{
	}

	//	Attribute : loggingTargetElement - Check if not concrete in inherited class
	Tango::Attr *loggingTargetElementAttr = get_attr_object_by_name(att_list, "loggingTargetElement");
	if (loggingTargetElementAttr == NULL)
	{
	}

	//	Attribute : loggingTargetStorage - Check if not concrete in inherited class
	Tango::Attr *loggingTargetStorageAttr = get_attr_object_by_name(att_list, "loggingTargetStorage");
	if (loggingTargetStorageAttr == NULL)
	{
	}

	//	Attribute : attrRandomizationEnabled - Check if not concrete in inherited class
	Tango::Attr *attrRandomizationEnabledAttr = get_attr_object_by_name(att_list, "attrRandomizationEnabled");
	if (attrRandomizationEnabledAttr == NULL)
	{
	}

	//	Attribute : attrRandomizationPeriod - Check if not concrete in inherited class
	Tango::Attr *attrRandomizationPeriodAttr = get_attr_object_by_name(att_list, "attrRandomizationPeriod");
	if (attrRandomizationPeriodAttr == NULL)
	{
	}


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(DishManagerClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : DishManagerClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void DishManagerClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(DishManagerClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::pipe_factory_before
	/*----- PROTECTED REGION ID(DishManagerClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : DishManagerClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void DishManagerClass::command_factory()
{
	/*----- PROTECTED REGION ID(DishManagerClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::command_factory_before
	//	Call command_factory for inherited class
	LMCDevice_ns::LMCDeviceClass::command_factory();































	//	Command SetStandbyLPMode
	SetStandbyLPModeClass	*pSetStandbyLPModeCmd =
		new SetStandbyLPModeClass("SetStandbyLPMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetStandbyLPModeCmd);

	//	Command SetStandbyFPMode
	SetStandbyFPModeClass	*pSetStandbyFPModeCmd =
		new SetStandbyFPModeClass("SetStandbyFPMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetStandbyFPModeCmd);

	//	Command SetOperateMode
	SetOperateModeClass	*pSetOperateModeCmd =
		new SetOperateModeClass("SetOperateMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"0]: ack code (0=OK, 1=QUEUED, 2=FAILED)\n\n== String field ==\n[0]: Informative message or error/fault description",
			Tango::OPERATOR);
	command_list.push_back(pSetOperateModeCmd);

	//	Command SetMaintenanceMode
	SetMaintenanceModeClass	*pSetMaintenanceModeCmd =
		new SetMaintenanceModeClass("SetMaintenanceMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"== Long field ==\n[0]: ack code (0=OK, 1=QUEUED, 2=FAILED)\n\n== String field ==\n[0]: Informative message or error/fault description",
			Tango::OPERATOR);
	command_list.push_back(pSetMaintenanceModeCmd);

	//	Command SetStowMode
	SetStowModeClass	*pSetStowModeCmd =
		new SetStowModeClass("SetStowMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"== Long field ==\n[0]: ack code (0=OK, 1=QUEUED, 2=FAILED)\n\n== String field ==\n[0]: Informative message or error/fault description",
			Tango::OPERATOR);
	command_list.push_back(pSetStowModeCmd);

	//	Command ConfigureBand1
	ConfigureBand1Class	*pConfigureBand1Cmd =
		new ConfigureBand1Class("ConfigureBand1",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"[timestamp]",
			"",
			Tango::OPERATOR);
	command_list.push_back(pConfigureBand1Cmd);

	//	Command ConfigureBand2
	ConfigureBand2Class	*pConfigureBand2Cmd =
		new ConfigureBand2Class("ConfigureBand2",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"[timestamp]",
			"",
			Tango::OPERATOR);
	command_list.push_back(pConfigureBand2Cmd);

	//	Command ConfigureBand3
	ConfigureBand3Class	*pConfigureBand3Cmd =
		new ConfigureBand3Class("ConfigureBand3",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"[timestamp]",
			"",
			Tango::OPERATOR);
	command_list.push_back(pConfigureBand3Cmd);

	//	Command ConfigureBand4
	ConfigureBand4Class	*pConfigureBand4Cmd =
		new ConfigureBand4Class("ConfigureBand4",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"[timestamp]",
			"",
			Tango::OPERATOR);
	command_list.push_back(pConfigureBand4Cmd);

	//	Command ConfigureBand5a
	ConfigureBand5aClass	*pConfigureBand5aCmd =
		new ConfigureBand5aClass("ConfigureBand5a",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"[timestamp]",
			"",
			Tango::OPERATOR);
	command_list.push_back(pConfigureBand5aCmd);

	//	Command ConfigureBand5b
	ConfigureBand5bClass	*pConfigureBand5bCmd =
		new ConfigureBand5bClass("ConfigureBand5b",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pConfigureBand5bCmd);

	//	Command SetIndexerPosition
	SetIndexerPositionClass	*pSetIndexerPositionCmd =
		new SetIndexerPositionClass("SetIndexerPosition",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"bandId position",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetIndexerPositionCmd);

	//	Command SetIndexerPositionTask
	SetIndexerPositionTaskClass	*pSetIndexerPositionTaskCmd =
		new SetIndexerPositionTaskClass("SetIndexerPositionTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetIndexerPositionTaskCmd);

	//	Command Track
	TrackClass	*pTrackCmd =
		new TrackClass("Track",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"[timestamp]",
			"",
			Tango::OPERATOR);
	command_list.push_back(pTrackCmd);

	//	Command Slew
	SlewClass	*pSlewCmd =
		new SlewClass("Slew",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"[timestamp]",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSlewCmd);

	//	Command Scan
	ScanClass	*pScanCmd =
		new ScanClass("Scan",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"[timestamp]",
			"",
			Tango::OPERATOR);
	command_list.push_back(pScanCmd);

	//	Command HandleBandFunctionalErrorEvent
	HandleBandFunctionalErrorEventClass	*pHandleBandFunctionalErrorEventCmd =
		new HandleBandFunctionalErrorEventClass("HandleBandFunctionalErrorEvent",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pHandleBandFunctionalErrorEventCmd);

	//	Command HandleEStopEvent
	HandleEStopEventClass	*pHandleEStopEventCmd =
		new HandleEStopEventClass("HandleEStopEvent",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pHandleEStopEventCmd);

	//	Command HandlePowerCutEvent
	HandlePowerCutEventClass	*pHandlePowerCutEventCmd =
		new HandlePowerCutEventClass("HandlePowerCutEvent",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded string including event data",
			"",
			Tango::EXPERT);
	command_list.push_back(pHandlePowerCutEventCmd);

	//	Command HandlePowerRestoreEvent
	HandlePowerRestoreEventClass	*pHandlePowerRestoreEventCmd =
		new HandlePowerRestoreEventClass("HandlePowerRestoreEvent",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pHandlePowerRestoreEventCmd);

	//	Command HandleTMCommLossEvent
	HandleTMCommLossEventClass	*pHandleTMCommLossEventCmd =
		new HandleTMCommLossEventClass("HandleTMCommLossEvent",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pHandleTMCommLossEventCmd);

	//	Command HandleBandInFocusEvent
	HandleBandInFocusEventClass	*pHandleBandInFocusEventCmd =
		new HandleBandInFocusEventClass("HandleBandInFocusEvent",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pHandleBandInFocusEventCmd);

	//	Command FlushCommandQueue
	FlushCommandQueueClass	*pFlushCommandQueueCmd =
		new FlushCommandQueueClass("FlushCommandQueue",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pFlushCommandQueueCmd);

	//	Command SetRxStandbyLPMode
	SetRxStandbyLPModeClass	*pSetRxStandbyLPModeCmd =
		new SetRxStandbyLPModeClass("SetRxStandbyLPMode",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetRxStandbyLPModeCmd);

	//	Command SetRxStandbyLPModeTask
	SetRxStandbyLPModeTaskClass	*pSetRxStandbyLPModeTaskCmd =
		new SetRxStandbyLPModeTaskClass("SetRxStandbyLPModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetRxStandbyLPModeTaskCmd);

	//	Command SetRxStandbyFPMode
	SetRxStandbyFPModeClass	*pSetRxStandbyFPModeCmd =
		new SetRxStandbyFPModeClass("SetRxStandbyFPMode",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetRxStandbyFPModeCmd);

	//	Command SetRxStandbyFPModeTask
	SetRxStandbyFPModeTaskClass	*pSetRxStandbyFPModeTaskCmd =
		new SetRxStandbyFPModeTaskClass("SetRxStandbyFPModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetRxStandbyFPModeTaskCmd);

	//	Command SetRxMaintenanceMode
	SetRxMaintenanceModeClass	*pSetRxMaintenanceModeCmd =
		new SetRxMaintenanceModeClass("SetRxMaintenanceMode",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetRxMaintenanceModeCmd);

	//	Command SetRxMaintenanceModeTask
	SetRxMaintenanceModeTaskClass	*pSetRxMaintenanceModeTaskCmd =
		new SetRxMaintenanceModeTaskClass("SetRxMaintenanceModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetRxMaintenanceModeTaskCmd);

	//	Command ConfigureRxBand
	ConfigureRxBandClass	*pConfigureRxBandCmd =
		new ConfigureRxBandClass("ConfigureRxBand",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"Band id",
			"",
			Tango::OPERATOR);
	command_list.push_back(pConfigureRxBandCmd);

	//	Command ConfigureRxBandAsync
	ConfigureRxBandAsyncClass	*pConfigureRxBandAsyncCmd =
		new ConfigureRxBandAsyncClass("ConfigureRxBandAsync",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"Band id",
			"== Long field ==\n[0]: ack code (0=OK, 1=QUEUED, 2=FAILED)\n\n== String field ==\n[0]: Informative message or error/fault description",
			Tango::OPERATOR);
	command_list.push_back(pConfigureRxBandAsyncCmd);

	//	Command ConfigureRxBandTask
	ConfigureRxBandTaskClass	*pConfigureRxBandTaskCmd =
		new ConfigureRxBandTaskClass("ConfigureRxBandTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pConfigureRxBandTaskCmd);

	//	Command ConfigureAndSynchroniseRxBand
	ConfigureAndSynchroniseRxBandClass	*pConfigureAndSynchroniseRxBandCmd =
		new ConfigureAndSynchroniseRxBandClass("ConfigureAndSynchroniseRxBand",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"Band id {1=B1,2=B2,3=B3,4=B4,5=B5a,6=B5b}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pConfigureAndSynchroniseRxBandCmd);

	//	Command ConfigureRxAttenuation
	ConfigureRxAttenuationClass	*pConfigureRxAttenuationCmd =
		new ConfigureRxAttenuationClass("ConfigureRxAttenuation",
			Tango::DEV_FLOAT, Tango::DEV_VOID,
			"Attenuation par in DB",
			"",
			Tango::OPERATOR);
	command_list.push_back(pConfigureRxAttenuationCmd);

	//	Command Capture
	CaptureClass	*pCaptureCmd =
		new CaptureClass("Capture",
			Tango::DEV_BOOLEAN, Tango::DEV_VOID,
			"ON/OFF",
			"",
			Tango::OPERATOR);
	command_list.push_back(pCaptureCmd);

	//	Command StartCapture
	StartCaptureClass	*pStartCaptureCmd =
		new StartCaptureClass("StartCapture",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStartCaptureCmd);

	//	Command StopCapture
	StopCaptureClass	*pStopCaptureCmd =
		new StopCaptureClass("StopCapture",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStopCaptureCmd);

	//	Command StartRxCaptureTask
	StartRxCaptureTaskClass	*pStartRxCaptureTaskCmd =
		new StartRxCaptureTaskClass("StartRxCaptureTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pStartRxCaptureTaskCmd);

	//	Command Synchronise
	SynchroniseClass	*pSynchroniseCmd =
		new SynchroniseClass("Synchronise",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSynchroniseCmd);

	//	Command SynchroniseRxBandTask
	SynchroniseRxBandTaskClass	*pSynchroniseRxBandTaskCmd =
		new SynchroniseRxBandTaskClass("SynchroniseRxBandTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pSynchroniseRxBandTaskCmd);

	//	Command EnableRxEngineeringMode
	EnableRxEngineeringModeClass	*pEnableRxEngineeringModeCmd =
		new EnableRxEngineeringModeClass("EnableRxEngineeringMode",
			Tango::DEV_BOOLEAN, Tango::DEV_VOID,
			"enable/disable",
			"",
			Tango::OPERATOR);
	command_list.push_back(pEnableRxEngineeringModeCmd);

	//	Command ShutdownRXPU
	ShutdownRXPUClass	*pShutdownRXPUCmd =
		new ShutdownRXPUClass("ShutdownRXPU",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pShutdownRXPUCmd);

	//	Command ShutdownRXPUTask
	ShutdownRXPUTaskClass	*pShutdownRXPUTaskCmd =
		new ShutdownRXPUTaskClass("ShutdownRXPUTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task data",
			"",
			Tango::EXPERT);
	command_list.push_back(pShutdownRXPUTaskCmd);

	//	Command PowerOffRXPU
	PowerOffRXPUClass	*pPowerOffRXPUCmd =
		new PowerOffRXPUClass("PowerOffRXPU",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pPowerOffRXPUCmd);

	//	Command PowerOnRXPU
	PowerOnRXPUClass	*pPowerOnRXPUCmd =
		new PowerOnRXPUClass("PowerOnRXPU",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pPowerOnRXPUCmd);

	//	Command PowerOffRXPUTask
	PowerOffRXPUTaskClass	*pPowerOffRXPUTaskCmd =
		new PowerOffRXPUTaskClass("PowerOffRXPUTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pPowerOffRXPUTaskCmd);

	//	Command PowerOnRXPUTask
	PowerOnRXPUTaskClass	*pPowerOnRXPUTaskCmd =
		new PowerOnRXPUTaskClass("PowerOnRXPUTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pPowerOnRXPUTaskCmd);

	//	Command SetSPFStandbyLPMode
	SetSPFStandbyLPModeClass	*pSetSPFStandbyLPModeCmd =
		new SetSPFStandbyLPModeClass("SetSPFStandbyLPMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSPFStandbyLPModeCmd);

	//	Command SetSPFStandbyLPModeTask
	SetSPFStandbyLPModeTaskClass	*pSetSPFStandbyLPModeTaskCmd =
		new SetSPFStandbyLPModeTaskClass("SetSPFStandbyLPModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetSPFStandbyLPModeTaskCmd);

	//	Command SetSPFOperateMode
	SetSPFOperateModeClass	*pSetSPFOperateModeCmd =
		new SetSPFOperateModeClass("SetSPFOperateMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"== Long field ==\n[0]: ack code (0=OK, 1=QUEUED, 2=FAILED)\n\n== String field ==\n[0]: Informative message or error/fault description",
			Tango::OPERATOR);
	command_list.push_back(pSetSPFOperateModeCmd);

	//	Command SetSPFOperateModeTask
	SetSPFOperateModeTaskClass	*pSetSPFOperateModeTaskCmd =
		new SetSPFOperateModeTaskClass("SetSPFOperateModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetSPFOperateModeTaskCmd);

	//	Command SetSPFOperational
	SetSPFOperationalClass	*pSetSPFOperationalCmd =
		new SetSPFOperationalClass("SetSPFOperational",
			Tango::DEV_SHORT, Tango::DEVVAR_LONGSTRINGARRAY,
			"Band id\n\n- bandId=-1 all bands\n- bandId=0 active band\n- band=[1-5] selected band",
			"== Long field ==\n[0]: ack code (0=OK, 1=QUEUED, 2=FAILED)\n\n== String field ==\n[0]: Informative message or error/fault description",
			Tango::OPERATOR);
	command_list.push_back(pSetSPFOperationalCmd);

	//	Command SetSPFMaintenanceMode
	SetSPFMaintenanceModeClass	*pSetSPFMaintenanceModeCmd =
		new SetSPFMaintenanceModeClass("SetSPFMaintenanceMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSPFMaintenanceModeCmd);

	//	Command SetSPFMaintenanceModeTask
	SetSPFMaintenanceModeTaskClass	*pSetSPFMaintenanceModeTaskCmd =
		new SetSPFMaintenanceModeTaskClass("SetSPFMaintenanceModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetSPFMaintenanceModeTaskCmd);

	//	Command SetSPFFeedMode
	SetSPFFeedModeClass	*pSetSPFFeedModeCmd =
		new SetSPFFeedModeClass("SetSPFFeedMode",
			Tango::DEVVAR_SHORTARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
			"[0]: bandId [1-5]\n[1]: mode\n\nAllowed modes are:\n\n0= STANDBY-LP\n1= OPERATE\n2= MAINTENANCE",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSPFFeedModeCmd);

	//	Command SendSPFFeedCommand
	SendSPFFeedCommandClass	*pSendSPFFeedCommandCmd =
		new SendSPFFeedCommandClass("SendSPFFeedCommand",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"[0]: mcBand\n[1]: feedCommand {0=REGENERATE,1=CLEAR-ERRORS}",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSendSPFFeedCommandCmd);

	//	Command SetSPFLnaPowerOff
	SetSPFLnaPowerOffClass	*pSetSPFLnaPowerOffCmd =
		new SetSPFLnaPowerOffClass("SetSPFLnaPowerOff",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"bandId: [1-5]\n\nIf bandId=-1 turns on all bands\nIf bandId=0 turns on only active band. \nIf no band is active (was not configured) an exception \nis thrown.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSPFLnaPowerOffCmd);

	//	Command SetSPFLnaPowerOn
	SetSPFLnaPowerOnClass	*pSetSPFLnaPowerOnCmd =
		new SetSPFLnaPowerOnClass("SetSPFLnaPowerOn",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"bandId: [1-5]\n\nIf bandId=-1 turns on all bands\nIf bandId=0 turns on only active band. \nIf no band is active (was not configured) an exception \nis thrown.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSPFLnaPowerOnCmd);

	//	Command SetSPFLnaPowerOnTask
	SetSPFLnaPowerOnTaskClass	*pSetSPFLnaPowerOnTaskCmd =
		new SetSPFLnaPowerOnTaskClass("SetSPFLnaPowerOnTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetSPFLnaPowerOnTaskCmd);

	//	Command SetSPFBandInFocus
	SetSPFBandInFocusClass	*pSetSPFBandInFocusCmd =
		new SetSPFBandInFocusClass("SetSPFBandInFocus",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"Band id",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSPFBandInFocusCmd);

	//	Command SetSPFBandInFocusTask
	SetSPFBandInFocusTaskClass	*pSetSPFBandInFocusTaskCmd =
		new SetSPFBandInFocusTaskClass("SetSPFBandInFocusTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Encoded task data",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetSPFBandInFocusTaskCmd);

	//	Command ShutdownSPFC
	ShutdownSPFCClass	*pShutdownSPFCCmd =
		new ShutdownSPFCClass("ShutdownSPFC",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pShutdownSPFCCmd);

	//	Command ShutdownSPFCTask
	ShutdownSPFCTaskClass	*pShutdownSPFCTaskCmd =
		new ShutdownSPFCTaskClass("ShutdownSPFCTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task data",
			"",
			Tango::EXPERT);
	command_list.push_back(pShutdownSPFCTaskCmd);

	//	Command PowerOffSPFC
	PowerOffSPFCClass	*pPowerOffSPFCCmd =
		new PowerOffSPFCClass("PowerOffSPFC",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pPowerOffSPFCCmd);

	//	Command PowerOnSPFC
	PowerOnSPFCClass	*pPowerOnSPFCCmd =
		new PowerOnSPFCClass("PowerOnSPFC",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pPowerOnSPFCCmd);

	//	Command PowerOffSPFCTask
	PowerOffSPFCTaskClass	*pPowerOffSPFCTaskCmd =
		new PowerOffSPFCTaskClass("PowerOffSPFCTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Encoded task data",
			"",
			Tango::EXPERT);
	command_list.push_back(pPowerOffSPFCTaskCmd);

	//	Command PowerOnSPFCTask
	PowerOnSPFCTaskClass	*pPowerOnSPFCTaskCmd =
		new PowerOnSPFCTaskClass("PowerOnSPFCTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pPowerOnSPFCTaskCmd);

	//	Command SetDSStandbyLPMode
	SetDSStandbyLPModeClass	*pSetDSStandbyLPModeCmd =
		new SetDSStandbyLPModeClass("SetDSStandbyLPMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetDSStandbyLPModeCmd);

	//	Command SetDSStandbyLPModeTask
	SetDSStandbyLPModeTaskClass	*pSetDSStandbyLPModeTaskCmd =
		new SetDSStandbyLPModeTaskClass("SetDSStandbyLPModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetDSStandbyLPModeTaskCmd);

	//	Command SetDSStandbyFPMode
	SetDSStandbyFPModeClass	*pSetDSStandbyFPModeCmd =
		new SetDSStandbyFPModeClass("SetDSStandbyFPMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetDSStandbyFPModeCmd);

	//	Command SetDSStandbyFPModeTask
	SetDSStandbyFPModeTaskClass	*pSetDSStandbyFPModeTaskCmd =
		new SetDSStandbyFPModeTaskClass("SetDSStandbyFPModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetDSStandbyFPModeTaskCmd);

	//	Command SetDSPointMode
	SetDSPointModeClass	*pSetDSPointModeCmd =
		new SetDSPointModeClass("SetDSPointMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetDSPointModeCmd);

	//	Command SetDSPointModeTask
	SetDSPointModeTaskClass	*pSetDSPointModeTaskCmd =
		new SetDSPointModeTaskClass("SetDSPointModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Task encoded data",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetDSPointModeTaskCmd);

	//	Command SetDSStowMode
	SetDSStowModeClass	*pSetDSStowModeCmd =
		new SetDSStowModeClass("SetDSStowMode",
			Tango::DEV_VOID, Tango::DEVVAR_LONGSTRINGARRAY,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetDSStowModeCmd);

	//	Command SetDSStowModeTask
	SetDSStowModeTaskClass	*pSetDSStowModeTaskCmd =
		new SetDSStowModeTaskClass("SetDSStowModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetDSStowModeTaskCmd);

	//	Command SetDSMaintenanceMode
	SetDSMaintenanceModeClass	*pSetDSMaintenanceModeCmd =
		new SetDSMaintenanceModeClass("SetDSMaintenanceMode",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetDSMaintenanceModeCmd);

	//	Command SetDSMaintenanceModeTask
	SetDSMaintenanceModeTaskClass	*pSetDSMaintenanceModeTaskCmd =
		new SetDSMaintenanceModeTaskClass("SetDSMaintenanceModeTask",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetDSMaintenanceModeTaskCmd);

	//	Command ResetDishMode
	ResetDishModeClass	*pResetDishModeCmd =
		new ResetDishModeClass("ResetDishMode",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pResetDishModeCmd);

	//	Command ResetDishTasks
	ResetDishTasksClass	*pResetDishTasksCmd =
		new ResetDishTasksClass("ResetDishTasks",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pResetDishTasksCmd);


	//	Command SetTMProxyAddress
	SetTMProxyAddressClass	*pSetTMProxyAddressCmd =
		new SetTMProxyAddressClass("SetTMProxyAddress",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Name of TM proxy device to be monitored",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetTMProxyAddressCmd);


	//	Command RestartSPFComponents
	RestartSPFComponentsClass	*pRestartSPFComponentsCmd =
		new RestartSPFComponentsClass("RestartSPFComponents",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pRestartSPFComponentsCmd);


	//	Command SetStandbyFPModeOnBandError
	SetStandbyFPModeOnBandErrorClass	*pSetStandbyFPModeOnBandErrorCmd =
		new SetStandbyFPModeOnBandErrorClass("SetStandbyFPModeOnBandError",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::EXPERT);
	command_list.push_back(pSetStandbyFPModeOnBandErrorCmd);


	/*----- PROTECTED REGION ID(DishManagerClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		DishManagerClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void DishManagerClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(DishManagerClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		DishManagerClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void DishManagerClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		DishManager *dev = static_cast<DishManager *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(DishManagerClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManagerClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : DishManagerClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *DishManagerClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(DishManagerClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	DishManagerClass::Additional Methods
} //	namespace
