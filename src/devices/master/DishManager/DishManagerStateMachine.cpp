/*----- PROTECTED REGION ID(DishManagerStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        DishManagerStateMachine.cpp
//
// description : State machine file for the DishManager class
//
// project :     DishManager
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <DishManager.h>

/*----- PROTECTED REGION END -----*/	//	DishManager::DishManagerStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  INIT     |  
//  STANDBY  |  SKA Control Model state: corresponds to STANDBY-LP mode defined
//           |  in Dish Model
//  DISABLE  |  SKA Control Model state: corresponds to MAINTENANCE, STOW mode defined
//           |  in Dish Model
//  ON       |  
//  ALARM    |  
//  FAULT    |  
//  OFF      |  
//  RUNNING  |  
//  UNKNOWN  |  
//  MOVING   |  


namespace DishManager_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetStandbyLPMode_allowed()
 *	Description : Execution allowed for SetStandbyLPMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetStandbyLPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetStandbyLPMode command.
	/*----- PROTECTED REGION ID(DishManager::SetStandbyLPModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}
	

	/*----- PROTECTED REGION END -----*/	//	DishManager::SetStandbyLPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetStandbyFPMode_allowed()
 *	Description : Execution allowed for SetStandbyFPMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetStandbyFPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetStandbyFPMode command.
	/*----- PROTECTED REGION ID(DishManager::SetStandbyFPModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}
	

	/*----- PROTECTED REGION END -----*/	//	DishManager::SetStandbyFPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetOperateMode_allowed()
 *	Description : Execution allowed for SetOperateMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetOperateMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetOperateMode command.
	/*----- PROTECTED REGION ID(DishManager::SetOperateModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}
	

	/*----- PROTECTED REGION END -----*/	//	DishManager::SetOperateModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetMaintenanceMode_allowed()
 *	Description : Execution allowed for SetMaintenanceMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetMaintenanceMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetMaintenanceMode command.
	/*----- PROTECTED REGION ID(DishManager::SetMaintenanceModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}
	

	/*----- PROTECTED REGION END -----*/	//	DishManager::SetMaintenanceModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetStowMode_allowed()
 *	Description : Execution allowed for SetStowMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetStowMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetStowMode command.
	/*----- PROTECTED REGION ID(DishManager::SetStowModeStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	DishManager::SetStowModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureBand1_allowed()
 *	Description : Execution allowed for ConfigureBand1 attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureBand1_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand1 command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureBand1StateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureBand1StateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureBand2_allowed()
 *	Description : Execution allowed for ConfigureBand2 attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureBand2_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand2 command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureBand2StateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureBand2StateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureBand3_allowed()
 *	Description : Execution allowed for ConfigureBand3 attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureBand3_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand3 command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureBand3StateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureBand3StateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureBand4_allowed()
 *	Description : Execution allowed for ConfigureBand4 attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureBand4_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand4 command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureBand4StateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureBand4StateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureBand5a_allowed()
 *	Description : Execution allowed for ConfigureBand5a attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureBand5a_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand5a command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureBand5aStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureBand5aStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureBand5b_allowed()
 *	Description : Execution allowed for ConfigureBand5b attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureBand5b_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureBand5b command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureBand5bStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureBand5bStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetIndexerPosition_allowed()
 *	Description : Execution allowed for SetIndexerPosition attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetIndexerPosition_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetIndexerPosition command.
	/*----- PROTECTED REGION ID(DishManager::SetIndexerPositionStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetIndexerPositionStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetIndexerPositionTask_allowed()
 *	Description : Execution allowed for SetIndexerPositionTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetIndexerPositionTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetIndexerPositionTask command.
	/*----- PROTECTED REGION ID(DishManager::SetIndexerPositionTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetIndexerPositionTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_Track_allowed()
 *	Description : Execution allowed for Track attribute
 */
//--------------------------------------------------------
bool DishManager::is_Track_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Track command.
	/*----- PROTECTED REGION ID(DishManager::TrackStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::TrackStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_Slew_allowed()
 *	Description : Execution allowed for Slew attribute
 */
//--------------------------------------------------------
bool DishManager::is_Slew_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Slew command.
	/*----- PROTECTED REGION ID(DishManager::SlewStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SlewStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_Scan_allowed()
 *	Description : Execution allowed for Scan attribute
 */
//--------------------------------------------------------
bool DishManager::is_Scan_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Scan command.
	/*----- PROTECTED REGION ID(DishManager::ScanStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ScanStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_HandleBandFunctionalErrorEvent_allowed()
 *	Description : Execution allowed for HandleBandFunctionalErrorEvent attribute
 */
//--------------------------------------------------------
bool DishManager::is_HandleBandFunctionalErrorEvent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for HandleBandFunctionalErrorEvent command.
	/*----- PROTECTED REGION ID(DishManager::HandleBandFunctionalErrorEventStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::HandleBandFunctionalErrorEventStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_HandleEStopEvent_allowed()
 *	Description : Execution allowed for HandleEStopEvent attribute
 */
//--------------------------------------------------------
bool DishManager::is_HandleEStopEvent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for HandleEStopEvent command.
	/*----- PROTECTED REGION ID(DishManager::HandleEStopEventStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::HandleEStopEventStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_HandlePowerCutEvent_allowed()
 *	Description : Execution allowed for HandlePowerCutEvent attribute
 */
//--------------------------------------------------------
bool DishManager::is_HandlePowerCutEvent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for HandlePowerCutEvent command.
	/*----- PROTECTED REGION ID(DishManager::HandlePowerCutEventStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::HandlePowerCutEventStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_HandlePowerRestoreEvent_allowed()
 *	Description : Execution allowed for HandlePowerRestoreEvent attribute
 */
//--------------------------------------------------------
bool DishManager::is_HandlePowerRestoreEvent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for HandlePowerRestoreEvent command.
	/*----- PROTECTED REGION ID(DishManager::HandlePowerRestoreEventStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::HandlePowerRestoreEventStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_HandleTMCommLossEvent_allowed()
 *	Description : Execution allowed for HandleTMCommLossEvent attribute
 */
//--------------------------------------------------------
bool DishManager::is_HandleTMCommLossEvent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for HandleTMCommLossEvent command.
	/*----- PROTECTED REGION ID(DishManager::HandleTMCommLossEventStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::HandleTMCommLossEventStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_HandleBandInFocusEvent_allowed()
 *	Description : Execution allowed for HandleBandInFocusEvent attribute
 */
//--------------------------------------------------------
bool DishManager::is_HandleBandInFocusEvent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for HandleBandInFocusEvent command.
	/*----- PROTECTED REGION ID(DishManager::HandleBandInFocusEventStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::HandleBandInFocusEventStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_FlushCommandQueue_allowed()
 *	Description : Execution allowed for FlushCommandQueue attribute
 */
//--------------------------------------------------------
bool DishManager::is_FlushCommandQueue_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for FlushCommandQueue command.
	/*----- PROTECTED REGION ID(DishManager::FlushCommandQueueStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::FlushCommandQueueStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetRxStandbyLPMode_allowed()
 *	Description : Execution allowed for SetRxStandbyLPMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetRxStandbyLPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetRxStandbyLPMode command.
	/*----- PROTECTED REGION ID(DishManager::SetRxStandbyLPModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetRxStandbyLPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetRxStandbyLPModeTask_allowed()
 *	Description : Execution allowed for SetRxStandbyLPModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetRxStandbyLPModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetRxStandbyLPModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetRxStandbyLPModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetRxStandbyLPModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetRxStandbyFPMode_allowed()
 *	Description : Execution allowed for SetRxStandbyFPMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetRxStandbyFPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetRxStandbyFPMode command.
	/*----- PROTECTED REGION ID(DishManager::SetRxStandbyFPModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetRxStandbyFPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetRxStandbyFPModeTask_allowed()
 *	Description : Execution allowed for SetRxStandbyFPModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetRxStandbyFPModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetRxStandbyFPModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetRxStandbyFPModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetRxStandbyFPModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetRxMaintenanceMode_allowed()
 *	Description : Execution allowed for SetRxMaintenanceMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetRxMaintenanceMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetRxMaintenanceMode command.
	/*----- PROTECTED REGION ID(DishManager::SetRxMaintenanceModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetRxMaintenanceModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetRxMaintenanceModeTask_allowed()
 *	Description : Execution allowed for SetRxMaintenanceModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetRxMaintenanceModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetRxMaintenanceModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetRxMaintenanceModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetRxMaintenanceModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureRxBand_allowed()
 *	Description : Execution allowed for ConfigureRxBand attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureRxBand_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureRxBand command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureRxBandStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureRxBandStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureRxBandAsync_allowed()
 *	Description : Execution allowed for ConfigureRxBandAsync attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureRxBandAsync_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureRxBandAsync command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureRxBandAsyncStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureRxBandAsyncStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureRxBandTask_allowed()
 *	Description : Execution allowed for ConfigureRxBandTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureRxBandTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureRxBandTask command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureRxBandTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureRxBandTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureAndSynchroniseRxBand_allowed()
 *	Description : Execution allowed for ConfigureAndSynchroniseRxBand attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureAndSynchroniseRxBand_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureAndSynchroniseRxBand command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureAndSynchroniseRxBandStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureAndSynchroniseRxBandStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ConfigureRxAttenuation_allowed()
 *	Description : Execution allowed for ConfigureRxAttenuation attribute
 */
//--------------------------------------------------------
bool DishManager::is_ConfigureRxAttenuation_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ConfigureRxAttenuation command.
	/*----- PROTECTED REGION ID(DishManager::ConfigureRxAttenuationStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ConfigureRxAttenuationStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_Capture_allowed()
 *	Description : Execution allowed for Capture attribute
 */
//--------------------------------------------------------
bool DishManager::is_Capture_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Capture command.
	/*----- PROTECTED REGION ID(DishManager::CaptureStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	DishManager::CaptureStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_StartCapture_allowed()
 *	Description : Execution allowed for StartCapture attribute
 */
//--------------------------------------------------------
bool DishManager::is_StartCapture_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for StartCapture command.
	/*----- PROTECTED REGION ID(DishManager::StartCaptureStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::StartCaptureStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_StopCapture_allowed()
 *	Description : Execution allowed for StopCapture attribute
 */
//--------------------------------------------------------
bool DishManager::is_StopCapture_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for StopCapture command.
	/*----- PROTECTED REGION ID(DishManager::StopCaptureStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::StopCaptureStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_StartRxCaptureTask_allowed()
 *	Description : Execution allowed for StartRxCaptureTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_StartRxCaptureTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for StartRxCaptureTask command.
	/*----- PROTECTED REGION ID(DishManager::StartRxCaptureTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::StartRxCaptureTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_Synchronise_allowed()
 *	Description : Execution allowed for Synchronise attribute
 */
//--------------------------------------------------------
bool DishManager::is_Synchronise_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Synchronise command.
	/*----- PROTECTED REGION ID(DishManager::SynchroniseStateAllowed) ENABLED START -----*/
	
	//=====================================================
	//==         CHECK IF CMD ALLOWED
	//=====================================================
	_DEBUG_LOG("Check if cmd "<<__FUNCTION__<<" is allowed...");
	bool check_cmd= true;
	try {
		IsCmdAllowed(__FUNCTION__,check_cmd);
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		throw;
	}

	/*----- PROTECTED REGION END -----*/	//	DishManager::SynchroniseStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SynchroniseRxBandTask_allowed()
 *	Description : Execution allowed for SynchroniseRxBandTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SynchroniseRxBandTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SynchroniseRxBandTask command.
	/*----- PROTECTED REGION ID(DishManager::SynchroniseRxBandTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SynchroniseRxBandTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_EnableRxEngineeringMode_allowed()
 *	Description : Execution allowed for EnableRxEngineeringMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_EnableRxEngineeringMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for EnableRxEngineeringMode command.
	/*----- PROTECTED REGION ID(DishManager::EnableRxEngineeringModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::EnableRxEngineeringModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ShutdownRXPU_allowed()
 *	Description : Execution allowed for ShutdownRXPU attribute
 */
//--------------------------------------------------------
bool DishManager::is_ShutdownRXPU_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ShutdownRXPU command.
	/*----- PROTECTED REGION ID(DishManager::ShutdownRXPUStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ShutdownRXPUStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ShutdownRXPUTask_allowed()
 *	Description : Execution allowed for ShutdownRXPUTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_ShutdownRXPUTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ShutdownRXPUTask command.
	/*----- PROTECTED REGION ID(DishManager::ShutdownRXPUTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ShutdownRXPUTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_PowerOffRXPU_allowed()
 *	Description : Execution allowed for PowerOffRXPU attribute
 */
//--------------------------------------------------------
bool DishManager::is_PowerOffRXPU_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PowerOffRXPU command.
	/*----- PROTECTED REGION ID(DishManager::PowerOffRXPUStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::PowerOffRXPUStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_PowerOnRXPU_allowed()
 *	Description : Execution allowed for PowerOnRXPU attribute
 */
//--------------------------------------------------------
bool DishManager::is_PowerOnRXPU_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PowerOnRXPU command.
	/*----- PROTECTED REGION ID(DishManager::PowerOnRXPUStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::PowerOnRXPUStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_PowerOffRXPUTask_allowed()
 *	Description : Execution allowed for PowerOffRXPUTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_PowerOffRXPUTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PowerOffRXPUTask command.
	/*----- PROTECTED REGION ID(DishManager::PowerOffRXPUTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::PowerOffRXPUTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_PowerOnRXPUTask_allowed()
 *	Description : Execution allowed for PowerOnRXPUTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_PowerOnRXPUTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PowerOnRXPUTask command.
	/*----- PROTECTED REGION ID(DishManager::PowerOnRXPUTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::PowerOnRXPUTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFStandbyLPMode_allowed()
 *	Description : Execution allowed for SetSPFStandbyLPMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFStandbyLPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFStandbyLPMode command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFStandbyLPModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFStandbyLPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFStandbyLPModeTask_allowed()
 *	Description : Execution allowed for SetSPFStandbyLPModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFStandbyLPModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFStandbyLPModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFStandbyLPModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFStandbyLPModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFOperateMode_allowed()
 *	Description : Execution allowed for SetSPFOperateMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFOperateMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFOperateMode command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFOperateModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFOperateModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFOperateModeTask_allowed()
 *	Description : Execution allowed for SetSPFOperateModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFOperateModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFOperateModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFOperateModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFOperateModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFOperational_allowed()
 *	Description : Execution allowed for SetSPFOperational attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFOperational_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFOperational command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFOperationalStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFOperationalStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFMaintenanceMode_allowed()
 *	Description : Execution allowed for SetSPFMaintenanceMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFMaintenanceMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFMaintenanceMode command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFMaintenanceModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFMaintenanceModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFMaintenanceModeTask_allowed()
 *	Description : Execution allowed for SetSPFMaintenanceModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFMaintenanceModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFMaintenanceModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFMaintenanceModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFMaintenanceModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFFeedMode_allowed()
 *	Description : Execution allowed for SetSPFFeedMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFFeedMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFFeedMode command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFFeedModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFFeedModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SendSPFFeedCommand_allowed()
 *	Description : Execution allowed for SendSPFFeedCommand attribute
 */
//--------------------------------------------------------
bool DishManager::is_SendSPFFeedCommand_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SendSPFFeedCommand command.
	/*----- PROTECTED REGION ID(DishManager::SendSPFFeedCommandStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SendSPFFeedCommandStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFLnaPowerOff_allowed()
 *	Description : Execution allowed for SetSPFLnaPowerOff attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFLnaPowerOff_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFLnaPowerOff command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFLnaPowerOffStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFLnaPowerOffStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFLnaPowerOn_allowed()
 *	Description : Execution allowed for SetSPFLnaPowerOn attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFLnaPowerOn_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFLnaPowerOn command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFLnaPowerOnStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFLnaPowerOnStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFLnaPowerOnTask_allowed()
 *	Description : Execution allowed for SetSPFLnaPowerOnTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFLnaPowerOnTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFLnaPowerOnTask command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFLnaPowerOnTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFLnaPowerOnTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFBandInFocus_allowed()
 *	Description : Execution allowed for SetSPFBandInFocus attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFBandInFocus_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFBandInFocus command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFBandInFocusStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFBandInFocusStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetSPFBandInFocusTask_allowed()
 *	Description : Execution allowed for SetSPFBandInFocusTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetSPFBandInFocusTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetSPFBandInFocusTask command.
	/*----- PROTECTED REGION ID(DishManager::SetSPFBandInFocusTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetSPFBandInFocusTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ShutdownSPFC_allowed()
 *	Description : Execution allowed for ShutdownSPFC attribute
 */
//--------------------------------------------------------
bool DishManager::is_ShutdownSPFC_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ShutdownSPFC command.
	/*----- PROTECTED REGION ID(DishManager::ShutdownSPFCStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ShutdownSPFCStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ShutdownSPFCTask_allowed()
 *	Description : Execution allowed for ShutdownSPFCTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_ShutdownSPFCTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ShutdownSPFCTask command.
	/*----- PROTECTED REGION ID(DishManager::ShutdownSPFCTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ShutdownSPFCTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_PowerOffSPFC_allowed()
 *	Description : Execution allowed for PowerOffSPFC attribute
 */
//--------------------------------------------------------
bool DishManager::is_PowerOffSPFC_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PowerOffSPFC command.
	/*----- PROTECTED REGION ID(DishManager::PowerOffSPFCStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::PowerOffSPFCStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_PowerOnSPFC_allowed()
 *	Description : Execution allowed for PowerOnSPFC attribute
 */
//--------------------------------------------------------
bool DishManager::is_PowerOnSPFC_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PowerOnSPFC command.
	/*----- PROTECTED REGION ID(DishManager::PowerOnSPFCStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::PowerOnSPFCStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_PowerOffSPFCTask_allowed()
 *	Description : Execution allowed for PowerOffSPFCTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_PowerOffSPFCTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PowerOffSPFCTask command.
	/*----- PROTECTED REGION ID(DishManager::PowerOffSPFCTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::PowerOffSPFCTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_PowerOnSPFCTask_allowed()
 *	Description : Execution allowed for PowerOnSPFCTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_PowerOnSPFCTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PowerOnSPFCTask command.
	/*----- PROTECTED REGION ID(DishManager::PowerOnSPFCTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::PowerOnSPFCTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetDSStandbyLPMode_allowed()
 *	Description : Execution allowed for SetDSStandbyLPMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetDSStandbyLPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDSStandbyLPMode command.
	/*----- PROTECTED REGION ID(DishManager::SetDSStandbyLPModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetDSStandbyLPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetDSStandbyLPModeTask_allowed()
 *	Description : Execution allowed for SetDSStandbyLPModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetDSStandbyLPModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDSStandbyLPModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetDSStandbyLPModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetDSStandbyLPModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetDSStandbyFPMode_allowed()
 *	Description : Execution allowed for SetDSStandbyFPMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetDSStandbyFPMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDSStandbyFPMode command.
	/*----- PROTECTED REGION ID(DishManager::SetDSStandbyFPModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetDSStandbyFPModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetDSStandbyFPModeTask_allowed()
 *	Description : Execution allowed for SetDSStandbyFPModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetDSStandbyFPModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDSStandbyFPModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetDSStandbyFPModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetDSStandbyFPModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetDSPointMode_allowed()
 *	Description : Execution allowed for SetDSPointMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetDSPointMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDSPointMode command.
	/*----- PROTECTED REGION ID(DishManager::SetDSPointModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetDSPointModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetDSPointModeTask_allowed()
 *	Description : Execution allowed for SetDSPointModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetDSPointModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDSPointModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetDSPointModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetDSPointModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetDSStowMode_allowed()
 *	Description : Execution allowed for SetDSStowMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetDSStowMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDSStowMode command.
	/*----- PROTECTED REGION ID(DishManager::SetDSStowModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetDSStowModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetDSStowModeTask_allowed()
 *	Description : Execution allowed for SetDSStowModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetDSStowModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDSStowModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetDSStowModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetDSStowModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetDSMaintenanceMode_allowed()
 *	Description : Execution allowed for SetDSMaintenanceMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetDSMaintenanceMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDSMaintenanceMode command.
	/*----- PROTECTED REGION ID(DishManager::SetDSMaintenanceModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetDSMaintenanceModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetDSMaintenanceModeTask_allowed()
 *	Description : Execution allowed for SetDSMaintenanceModeTask attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetDSMaintenanceModeTask_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetDSMaintenanceModeTask command.
	/*----- PROTECTED REGION ID(DishManager::SetDSMaintenanceModeTaskStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetDSMaintenanceModeTaskStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ResetDishMode_allowed()
 *	Description : Execution allowed for ResetDishMode attribute
 */
//--------------------------------------------------------
bool DishManager::is_ResetDishMode_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ResetDishMode command.
	/*----- PROTECTED REGION ID(DishManager::ResetDishModeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ResetDishModeStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_ResetDishTasks_allowed()
 *	Description : Execution allowed for ResetDishTasks attribute
 */
//--------------------------------------------------------
bool DishManager::is_ResetDishTasks_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for ResetDishTasks command.
	/*----- PROTECTED REGION ID(DishManager::ResetDishTasksStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::ResetDishTasksStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetTMProxyAddress_allowed()
 *	Description : Execution allowed for SetTMProxyAddress attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetTMProxyAddress_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetTMProxyAddress command.
	/*----- PROTECTED REGION ID(DishManager::SetTMProxyAddressStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetTMProxyAddressStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_RestartSPFComponents_allowed()
 *	Description : Execution allowed for RestartSPFComponents attribute
 */
//--------------------------------------------------------
bool DishManager::is_RestartSPFComponents_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for RestartSPFComponents command.
	/*----- PROTECTED REGION ID(DishManager::RestartSPFComponentsStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::RestartSPFComponentsStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_SetStandbyFPModeOnBandError_allowed()
 *	Description : Execution allowed for SetStandbyFPModeOnBandError attribute
 */
//--------------------------------------------------------
bool DishManager::is_SetStandbyFPModeOnBandError_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetStandbyFPModeOnBandError command.
	/*----- PROTECTED REGION ID(DishManager::SetStandbyFPModeOnBandErrorStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::SetStandbyFPModeOnBandErrorStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : DishManager::is_dummyDynCmd_allowed()
 *	Description : Execution allowed for dummyDynCmd attribute
 */
//--------------------------------------------------------
bool DishManager::is_dummyDynCmd_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for dummyDynCmd command.
	/*----- PROTECTED REGION ID(DishManager::dummyDynCmdStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	DishManager::dummyDynCmdStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(DishManager::DishManagerStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	DishManager::DishManagerStateAllowed.AdditionalMethods

}	//	End of namespace
