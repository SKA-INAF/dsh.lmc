/*----- PROTECTED REGION ID(LMCMonitor.h) ENABLED START -----*/
//=============================================================================
//
// file :        LMCMonitor.h
//
// description : Include file for the LMCMonitor class
//
// project :     LMCMonitor
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LMCMonitor_H
#define LMCMonitor_H

#include <tango.h>
#include <LMCDevice.h>

#include "NagiosListenerThread.h"

/*----- PROTECTED REGION END -----*/	//	LMCMonitor.h

/**
 *  LMCMonitor class description:
 *    Device server for LMC self monitoring. It monitors LMC servers and 
 *    computing server parameters.
 */

namespace LMCMonitor_ns
{
enum _centralLoggerStatusEnum {
} ;
typedef _centralLoggerStatusEnum centralLoggerStatusEnum;

enum _elementLoggerStatusEnum {
} ;
typedef _elementLoggerStatusEnum elementLoggerStatusEnum;

enum _storageLoggerStatusEnum {
} ;
typedef _storageLoggerStatusEnum storageLoggerStatusEnum;

enum _fwdAttrInitStatusEnum {
} ;
typedef _fwdAttrInitStatusEnum fwdAttrInitStatusEnum;

/*----- PROTECTED REGION ID(LMCMonitor::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
//class NagiosListenerThread;

/*----- PROTECTED REGION END -----*/	//	LMCMonitor::Additional Class Declarations

class LMCMonitor : public LMCDevice_ns::LMCDevice
{

/*----- PROTECTED REGION ID(LMCMonitor::Data Members) ENABLED START -----*/

//	Add your own data members
protected:

	bool m_stopNagiosThread;
	NagiosListenerThread* m_nagiosThread;	
	omni_mutex m_nagiosMutex;
	
/*----- PROTECTED REGION END -----*/	//	LMCMonitor::Data Members

//	Device property data members
public:
	//	NagiosQueryHandlerPath:	Path to Nagios query handler UNIX socket
	//  
	//  Ubuntu: /usr/local/nagios/var/rw/nagios.qh
	string	nagiosQueryHandlerPath;
	//	NagiosAttrPollPeriod:	Polling period (in ms) to be used for Nagios check imported 
	//  attributes.
	Tango::DevLong	nagiosAttrPollPeriod;
	//	NagiosAttrPeriodicEventPeriod:	Periodic period (in ms) to be used forperiodic events of Nagios attrs
	Tango::DevLong	nagiosAttrPeriodicEventPeriod;
	//	NagiosAttrArchiveEventPeriod:	Period (in ms) to be used for pushing archive events for Nagios attrs
	Tango::DevLong	nagiosAttrArchiveEventPeriod;

	bool	mandatoryNotDefined;

//	Attribute data members
public:

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LMCMonitor(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	LMCMonitor(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	LMCMonitor(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~LMCMonitor() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : LMCMonitor::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : LMCMonitor::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);



	//--------------------------------------------------------
	/**
	 *	Method      : LMCMonitor::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:

//	Dynamic commands methods
public:
	/**
	 *	Command dummy_dyn_cmd related method
	 *	Description: 
	 *
	 */
	virtual void dummy_dyn_cmd(Tango::Command &command);
	virtual bool is_dummy_dyn_cmd_allowed(const CORBA::Any &any);
	void add_dummy_dyn_cmd_dynamic_command(string cmdname, bool device);
	void remove_dummy_dyn_cmd_dynamic_command(string cmdname);

	//--------------------------------------------------------
	/**
	 *	Method      : LMCMonitor::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(LMCMonitor::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	//--------------------------------------------------------
		/**
	 	*	Method      : LMCMonitor::InitCmdAttrStateMachine()
	 	*	Description : Initialize cmd & attr state machine
	 	*/
		//--------------------------------------------------------
		virtual int InitCmdAttrStateMachine();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCMonitor::RegisterProxies()
	 	*	Description : Register device proxies to be used (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterProxies();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCMonitor::RegisterEventSubscriptions()
	 	*	Description : Register event subscriptions for device proxies (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterEventSubscriptions();

		//--------------------------------------------------------
		/**
	 	*	Method      : LMCMonitor::RegisterEventHandlers()
	 	*	Description : Register handler commands to be inkoved on event receiption (OVERRIDE BASE DEVICE METHOD)
	 	*/
		//--------------------------------------------------------
		virtual int RegisterEventHandlers();

public:
	//--------------------------------------------------------
	/**
	 *	Method      : LMCMonitor::IsNagiosThreadStopped()
	 *	Description : Check if Nagios thread is stopped
	 */
	//--------------------------------------------------------
	bool IsNagiosThreadStopped() {return m_stopNagiosThread;}

	//Friend class declarations
	friend class LMCMonitorClass;
	friend class NagiosListenerThread;

/*----- PROTECTED REGION END -----*/	//	LMCMonitor::Additional Method prototypes
};

/*----- PROTECTED REGION ID(LMCMonitor::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	LMCMonitor::Additional Classes Definitions

}	//	End of namespace

#endif   //	LMCMonitor_H
