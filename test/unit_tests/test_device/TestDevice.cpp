/*----- PROTECTED REGION ID(TestDevice.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        TestDevice.cpp
//
// description : C++ source for the TestDevice class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TestDevice are implemented in this file.
//
// project :     TestDevice
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TestDevice.h>
#include <TestDeviceClass.h>

/*----- PROTECTED REGION END -----*/	//	TestDevice.cpp

/**
 *  TestDevice class description:
 *    TestDevice
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace TestDevice_ns
{
/*----- PROTECTED REGION ID(TestDevice::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	TestDevice::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : TestDevice::TestDevice()
 *	Description : Constructors for a Tango device
 *                implementing the classTestDevice
 */
//--------------------------------------------------------
TestDevice::TestDevice(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(TestDevice::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TestDevice::constructor_1
}
//--------------------------------------------------------
TestDevice::TestDevice(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(TestDevice::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TestDevice::constructor_2
}
//--------------------------------------------------------
TestDevice::TestDevice(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(TestDevice::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TestDevice::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : TestDevice::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void TestDevice::delete_device()
{
	DEBUG_STREAM << "TestDevice::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(TestDevice::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	TestDevice::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : TestDevice::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void TestDevice::init_device()
{
	DEBUG_STREAM << "TestDevice::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(TestDevice::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	TestDevice::init_device_before
	
	//	No device property to be read from database
	
	/*----- PROTECTED REGION ID(TestDevice::init_device) ENABLED START -----*/
	
	//	Initialize device
	
	/*----- PROTECTED REGION END -----*/	//	TestDevice::init_device
}


//--------------------------------------------------------
/**
 *	Method      : TestDevice::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void TestDevice::always_executed_hook()
{
	DEBUG_STREAM << "TestDevice::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(TestDevice::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	TestDevice::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : TestDevice::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void TestDevice::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TestDevice::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TestDevice::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TestDevice::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : TestDevice::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void TestDevice::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(TestDevice::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	TestDevice::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : TestDevice::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void TestDevice::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(TestDevice::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	TestDevice::add_dynamic_commands
}

/*----- PROTECTED REGION ID(TestDevice::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	TestDevice::namespace_ending
} //	namespace
